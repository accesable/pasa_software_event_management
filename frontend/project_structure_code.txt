vite.config.ts:
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react-swc';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
});


src\App.css:
/*react transition group css*/
.page-enter {
  opacity: 0;
}

.page-enter-active {
  opacity: 1;
}

.page-exit {
  opacity: 1;
}

.page-exit-active {
  opacity: 0;
}

.page-enter-active,
.page-exit-active {
  transition: opacity 200ms;
}

.fade-enter-active,
.fade-exit-active {
  transition: opacity 300ms;
}

/*====*/

.right-to-left-enter {
  transform: translateX(100%);
}

.right-to-left-enter-active {
  transform: translateX(0);
  transition: all 300ms ease;
}

.right-to-left-exit {
  transform: translateX(0);
}

.right-to-left-exit-active {
  transform: translateX(-100%);
  transition: all 300ms ease;
}

/*====*/

.left-to-right-enter {
  transform: translateX(-100%);
}

.left-to-right-enter-active {
  transform: translateX(0);
  transition: all 300ms ease;
}

.left-to-right-exit {
  transform: translateX(0);
}

.left-to-right-exit-active {
  transform: translateX(100%);
  transition: all 300ms ease;
}

/*===*/

.top-to-bottom-enter {
  transform: translateY(-100%);
}

.top-to-bottom-enter-active {
  transform: translateY(0);
  transition: all 300ms ease;
}

.top-to-bottom-exit {
  transform: translateY(0);
}

.top-to-bottom-exit-active {
  transform: translateY(100%);
  transition: all 300ms ease;
}

/*===*/

.bottom-to-top-enter {
  transform: translateY(100%);
}

.bottom-to-top-enter-active {
  transform: translateY(0);
  transition: all 300ms ease;
}

.bottom-to-top-exit {
  transform: translateY(0);
}

.bottom-to-top-exit-active {
  transform: translateY(-100%);
  transition: all 300ms ease;
}

/*UTILITIES*/

.text-highlight {
  background: -webkit-linear-gradient(45deg, #8e44ad, #3498db);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.text-capitalize {
  text-transform: capitalize;
}

.text-uppercase {
  text-transform: uppercase;
}

.text-center {
  text-align: center;
}

.text-end {
  text-align: right;
}

.text-start {
  text-align: start;
}

.text-white {
  color: white !important;
}

.text-black {
  color: black !important;
}

.overflow-scroll {
  overflow: auto;
}

.m-0 {
  margin: 0 !important;
}

.p-0 {
  padding: 0 !important;
}

.w-100 {
  width: 100%;
}

.fw-bold {
  font-weight: bold;
}

.fw-bolder {
  font-weight: bolder;
}

/* Extra large devices (large laptops and desktops, 1200px and up) */
@media only screen and (min-width: 1200px) {
  .overflow-scroll {
    overflow: hidden;
  }
}


src\App.tsx:
// src/App.tsx
import { RouterProvider } from 'react-router-dom';
import { ConfigProvider, theme as antdTheme } from 'antd';

import { HelmetProvider } from 'react-helmet-async';
import { StylesContext } from './context';
import routes from './routes/routes.tsx';
import { useSelector } from 'react-redux';
import { RootState } from './redux/store.ts';
import './App.css';
import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { setUser } from './redux/userSlice.tsx';

// color palettes: triadic #A1A7CB, #CBA1A7, #A7CBA1
// 10 color objects of primary #2378c3 as generated by https://smart-swatch.netlify.app/#2378c3
// This is for reference purposes

const COLOR = {
  50: '#e0f1ff',
  100: '#b0d2ff',
  200: '#7fb0ff',
  300: '#4d8bff',
  400: '#1e79fe',
  500: '#076ee5',
  600: '#0062b3',
  700: '#004f81',
  800: '#003650',
  900: '#001620',
  borderColor: '#E7EAF3B2',
};

function App() {
  const { mytheme } = useSelector((state: RootState) => state.theme);
  const dispatch = useDispatch();
  useEffect(() => {
    const accessToken = localStorage.getItem('accessToken');

    if (accessToken) {
    // Lấy thông tin người dùng từ local storage hoặc API
    try {
      const storedUser = JSON.parse(localStorage.getItem('user') || '{}');
        dispatch(setUser(storedUser))
      // Lấy thông tin người dùng từ API
     // TODO, you have to call an api to fill out and assign to state if u wanna load user info right here 

      
    } catch (error) {
        localStorage.removeItem('user');
      console.error('fail load user when init from localstorage')
    }

    //  dispatch(setUser({ //hard assign
    //     avatar: "https://lh3.googleusercontent.com/a/ACg8ocIj_YgS0xOp0b681eI7Gz9GfMMPQW-_jQ7s-zP888l=s96-c",
    //     name : "Name example",
    //     email : 'sampleEmail@domain',
    //     id : '123'
    //   }))
    }
    else {
      localStorage.removeItem('user');
    }
  }, []);

  return (
    <HelmetProvider>
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: COLOR['500'],
            borderRadius: 6,
            fontFamily: 'Lato, sans-serif',
          },
          components: {
            Breadcrumb: {
              // linkColor: 'rgba(0,0,0,.8)',
              // itemColor: 'rgba(0,0,0,.8)',
            },
            Button: {
              colorLink: COLOR['500'],
              colorLinkActive: COLOR['700'],
              colorLinkHover: COLOR['300'],
            },
            Calendar: {
              colorBgContainer: 'none',
            },
            Card: {
              colorBorderSecondary: COLOR['borderColor'],
            },
            Carousel: {
              colorBgContainer: COLOR['800'],
              dotWidth: 8,
            },
            Rate: {
              colorFillContent: COLOR['100'],
              colorText: COLOR['600'],
            },
            Segmented: {
              colorBgLayout: COLOR['100'],
              borderRadius: 6,
              colorTextLabel: '#000000',
            },
            Table: {
              borderColor: COLOR['100'],
              colorBgContainer: 'none',
              headerBg: 'none',
              rowHoverBg: COLOR['50'],
            },
            Tabs: {
              colorBorderSecondary: COLOR['100'],
            },
            Timeline: {
              dotBg: 'none',
            },
            Typography: {
              colorLink: COLOR['500'],
              colorLinkActive: COLOR['700'],
              colorLinkHover: COLOR['300'],
              linkHoverDecoration: 'underline',
            },
          },
          algorithm:
            mytheme === 'dark'
              ? antdTheme.darkAlgorithm
              : antdTheme.defaultAlgorithm,
        }}
      >
        <StylesContext.Provider
          value={{
            rowProps: {
              gutter: [
                { xs: 8, sm: 16, md: 24, lg: 32 },
                { xs: 8, sm: 16, md: 24, lg: 32 },
              ],
            },
            carouselProps: {
              autoplay: true,
              dots: true,
              dotPosition: 'bottom',
              infinite: true,
              slidesToShow: 3,
              slidesToScroll: 1,
            },
          }}
        >
          <RouterProvider router={routes} />
        </StylesContext.Provider>
      </ConfigProvider>
    </HelmetProvider>
  );
}

export default App;
export {COLOR}

src\index.css:
:root {
  font-family: 'Lato', sans-serif;
}

body {
  margin: 0;
}


src\main.tsx:
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import './index.css';
import { store, persistor } from './redux/store.ts';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <PersistGate persistor={persistor}>
      <Provider store={store}>
        <App />
      </Provider>
    </PersistGate>
    ,
  </React.StrictMode>
);


src\vite-env.d.ts:
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_APP_TITLE: string;
  // more env variables...
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}


src\api\axiosInstance.ts:
// src/api/axiosInstance.ts
import axios from 'axios';

const baseURL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8080/api/v1'; // Sử dụng biến môi trường hoặc giá trị mặc định

const axiosInstance = axios.create({
  baseURL: baseURL,
  withCredentials: true, // Cho phép gửi cookie (nếu cần thiết cho refresh token)
});

export default axiosInstance;

src\components\index.ts:
export { BackBtn } from './BackBtn/BackBtn.tsx';
export { BlogsListCard } from './corporate/BlogsListCard/BlogsListCard';
export { Card } from './Card/Card';
export { ContactForm } from './ContactForm/ContactForm';
export { EmployeeCard } from './EmployeeCard/EmployeeCard';
export { FaqCollapse } from './FaqCollapse/FaqCollapse';
export { Flex } from './Flex/Flex';
export { Loader } from './Loader/Loader';
export { Logo } from './Logo/Logo';
export { MoreMenu } from './MoreMenu/MoreMenu';
export { NotificationsCard } from './NotificationsCard/NotificationsCard';
export { NotificationsItem } from './NotificationsItem/NotificationsItem';
export { PageHeader } from './PageHeader/PageHeader';
export { PricingTable } from './PricingTable/PricingTable';
export { RefreshBtn } from './RefreshBtn/RefreshBtn.tsx';
export { SitemapCard } from './SitemapCard/SitemapCard';
export { SocialMediaCard } from './SocialMediaCard/SocialMediaCard';
export { TimelineCard } from './TimelineCard/TimelineCard';
export { UserAvatar } from './UserAvatar/UserAvatar';
export * from './Nprogress';
export * from './dashboard';
export * from './Container';


src\components\BackBtn\BackBtn.tsx:
import { useNavigate } from 'react-router-dom';
import { Button, ButtonProps, Tooltip } from 'antd';
import { LeftOutlined } from '@ant-design/icons';

type Props = {
  wIcon?: boolean;
  iconOnly?: boolean;
} & ButtonProps;

export const BackBtn = ({ wIcon, iconOnly, ...others }: Props) => {
  const navigate = useNavigate();

  return (
    <Tooltip title="Navigate to previous page">
      <Button
        icon={wIcon || iconOnly ? <LeftOutlined /> : null}
        onClick={() => navigate(-1)}
        {...others}
      >
        {!iconOnly && 'Go back'}
      </Button>
    </Tooltip>
  );
};


src\components\Card\Card.tsx:
import { Card as AntdCard, CardProps } from 'antd';
import { ReactNode } from 'react';

import './styles.css';

type Props = { children: ReactNode } & CardProps;

export const Card = ({ children, ...others }: Props) => {
  return (
    <AntdCard className="card" {...others}>
      {children}
    </AntdCard>
  );
};


src\components\Card\styles.css:
/* Glassmorphism card effect */
.card {
  /*backdrop-filter: blur(16px) saturate(180%);*/
  /*-webkit-backdrop-filter: blur(16px) saturate(180%);*/
  /* background-color: rgba(255, 255, 255, 1); */
  /*border: 1px solid rgba(209, 213, 219, 0.3);*/
  -webkit-box-shadow: rgba(140, 152, 164, 0.075) 0 6px 12px 0;
  -moz-box-shadow: rgba(140, 152, 164, 0.075) 0 6px 12px 0;
  box-shadow: rgba(140, 152, 164, 0.075) 0 6px 12px 0;
  border: 1px solid rgba(231, 234, 243, 0.7);
}

.card .ant-card-head-title {
  text-transform: capitalize;
}


src\components\ContactForm\ContactForm.tsx:
import { Button, Col, Form, FormProps, Input, Row } from 'antd';
import { SendOutlined } from '@ant-design/icons';
import { useStylesContext } from '../../context';

const { TextArea } = Input;

type Props = FormProps;

export const ContactForm = ({ ...others }: Props) => {
  const stylesContext = useStylesContext();

  return (
    <div>
      <Form layout="vertical" {...others}>
        <Row {...stylesContext?.rowProps}>
          <Col sm={24} lg={12}>
            <Form.Item label="Name" tooltip="This is a required field">
              <Input />
            </Form.Item>
          </Col>
          <Col sm={24} lg={12}>
            <Form.Item label="Email" tooltip="This is a required field">
              <Input />
            </Form.Item>
          </Col>
        </Row>
        <Form.Item label="Subject" tooltip="This is a required field">
          <Input />
        </Form.Item>
        <Form.Item label="Message">
          <TextArea />
        </Form.Item>
        <Form.Item>
          <Button type="primary" icon={<SendOutlined />}>
            Submit
          </Button>
        </Form.Item>
      </Form>
    </div>
  );
};


src\components\Container\Container.tsx:
import {
  CSSProperties,
  HTMLProps,
  ReactNode,
  useEffect,
  useState,
} from 'react';
import { useMediaQuery } from 'react-responsive';

type ContainerProps = {
  children: ReactNode;
  style?: CSSProperties;
} & HTMLProps<HTMLDivElement>;

export const Container = ({ children, style, ...others }: ContainerProps) => {
  const [containerWidth, setContainerWidth] = useState<string>();
  const isMedium = useMediaQuery({ minWidth: 769 }),
    isLarge = useMediaQuery({ minWidth: 992 }),
    isXLarge = useMediaQuery({ minWidth: 1200 }),
    isXXLarge = useMediaQuery({ minWidth: 1400 });

  useEffect(() => {
    // sort from large to small devices
    if (isXXLarge) {
      setContainerWidth('1320px');
    } else if (isXLarge) {
      setContainerWidth('1140px');
    } else if (isLarge) {
      setContainerWidth('960px');
    } else if (isMedium) {
      setContainerWidth('720px');
    } else {
      setContainerWidth('100%');
    }
  }, [isLarge, isXLarge, isXXLarge, isMedium]);

  return (
    <div
      {...others}
      style={{
        width: containerWidth,
        margin: '0 auto',
        ...style,
      }}
    >
      {children}
    </div>
  );
};


src\components\Container\index.ts:
export { Container } from './Container.tsx';


src\components\corporate\BlogsListCard\BlogsListCard.tsx:
import React, { ReactNode } from 'react';
import { Alert, Button, CardProps, List, Space, Typography } from 'antd';
import { Card } from '../../index.ts';
import { LikeOutlined, MessageOutlined, StarOutlined } from '@ant-design/icons';

import './styles.css';

const IconText = ({ icon, text }: { icon: React.FC; text: string }) => (
  <Space>
    {React.createElement(icon)}
    {text}
  </Space>
);

type Props = { data: any; loading?: boolean; error?: ReactNode } & CardProps;

export const BlogsListCard = ({ data, loading, error, ...others }: Props) => {
  return (
    <Card
      title="Blogs"
      actions={[<Button>Explore more</Button>]}
      className="card blogs-list-card"
      {...others}
    >
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : (
        <List
          itemLayout="vertical"
          size="large"
          pagination={{
            onChange: (page) => {
              console.log(page);
            },
            pageSize: 3,
            align: 'center',
          }}
          dataSource={data}
          loading={loading}
          renderItem={(item: any) => (
            <List.Item
              key={item.title}
              actions={[
                <IconText
                  icon={StarOutlined}
                  text="156"
                  key="list-vertical-star-o"
                />,
                <IconText
                  icon={LikeOutlined}
                  text="156"
                  key="list-vertical-like-o"
                />,
                <IconText
                  icon={MessageOutlined}
                  text="2"
                  key="list-vertical-message"
                />,
              ]}
            >
              <Typography.Title level={5} className="m-0">
                {item.title}
              </Typography.Title>
              <Typography.Paragraph ellipsis={{ rows: 3 }} className="m-0">
                {item.content}
              </Typography.Paragraph>
            </List.Item>
          )}
        />
      )}
    </Card>
  );
};


src\components\corporate\BlogsListCard\styles.css:
.blogs-list-card .ant-card-body {
  padding: 0 0 1rem 0;
}

.blogs-list-card .ant-list-item {
  /*padding: 0;*/
}


src\components\dashboard\index.ts:
export {
  CampaignsCard,
  RecentUsersCard,
  GetStartedCard,
  OrdersChart,
  LatestOrdersCard,
  EarningsCard,
  SubscribersChart,
  WeeklyActivityCard,
  TasksChartCard,
  TasksListCard,
} from './default';
export { RevenueCard, PostsCard, ProjectsCard } from './shared';
export { CustomerReviewsCard } from './ecommerce';
export { ProjectsCountCard, ProjectsTable, ClientsTable } from './projects';
export {
  StatsCard as MarketingStatsCard,
  VisitorsChartCard,
  SocialStatsCard as MarketingSocialStatsCard,
  CampaignsActivity,
  CampaignsAdsCard,
  AudienceLocationChart,
} from './marketing';
export {
  SocialStatsCard,
  FollowersChart,
  LikesChart,
  DevicesCardChart,
  MilestonesCard,
  CommentsCard,
} from './social';
export {
  AuctionCarousel,
  CreatorsCard,
  TopItemsCard,
  TransactionsCard,
  CategoriesCard as BiddingCategoriesCard,
} from './bidding';
export {
  StatsCard as LearningStatsCard,
  CoursesCard,
  CoursesCarousel,
  StudyStatisticsCard,
  ProgressCard,
  ExamsCard,
  CommunityGroupCard,
} from './learning';
export {
  StatsCard as LogisticsStatsCard,
  DeliveryTableCard,
  DeliveryAnalyticsCard,
  DailyPlanCard,
  TruckListCard,
  DeliveryRequestCard,
} from './logistics';
export {
  EventTable,
  EventTimelineCard,
  MyEventTimelineCard
} from './events';
export {
  UserTable
} from './users'; 

src\components\dashboard\bidding\index.ts:
export { AuctionCarousel } from './AuctionCarousel/AuctionCarousel.tsx';
export { CreatorsCard } from './CreatorsCard/CreatorsCard.tsx';
export { TopItemsCard } from './TopItemsCard/TopItems.tsx';
export { TransactionsCard } from './TransactionsCard/TransactionsCard.tsx';
export { CategoriesCard } from './CategoriesCard/CategoriesCard.tsx';


src\components\dashboard\bidding\AuctionCarousel\AuctionCarousel.tsx:
import { ReactNode } from 'react';
import {
  Alert,
  Button,
  CardProps,
  Carousel,
  CarouselProps,
  Flex,
  message,
  Space,
  Tag,
  theme,
  Typography,
} from 'antd';
import { ClockCircleOutlined } from '@ant-design/icons';
import { Bidding } from '../../../../types';
import { Card, Loader } from '../../../index.ts';

import './styles.css';

type CardItemProps = {
  item: Bidding;
} & CardProps;

export const CardItem = ({ item, ...others }: CardItemProps) => {
  const {
    token: { borderRadius },
  } = theme.useToken();
  const {
    auction_id,
    nft_name,
    nft_image,
    is_highest_bid_mine,
    winning_bid,
    status,
    time_left,
  } = item;

  return (
    <article style={{ marginRight: 16 }}>
      <Card
        cover={
          <div
            className="auction-card-header"
            style={{
              backgroundImage: `linear-gradient(to bottom, rgba(75, 75, 75, .8) 0%, rgba(72, 85, 99, 0) 50%), url(${nft_image})`,
              backgroundSize: 'cover',
              backgroundRepeat: 'no-repeat',
              backgroundPosition: 'center',
              borderTopLeftRadius: borderRadius,
              borderTopRightRadius: borderRadius,
            }}
          >
            <Flex
              justify="space-between"
              align="flex-start"
              style={{ margin: `0 1rem`, padding: `1rem 0` }}
            >
              <Tag
                color={
                  status === 'active' ? 'green-inverse' : 'volcano-inverse'
                }
                className="text-capitalize m-0"
              >
                {status}
              </Tag>
              <Tag
                icon={<ClockCircleOutlined />}
                color="magenta-inverse"
                className="m-0"
              >
                {time_left.split(' ')[0]} left
              </Tag>
            </Flex>
          </div>
        }
        className="auction-card card"
        {...others}
      >
        <Flex vertical gap="middle" style={{ padding: '16px' }}>
          <Typography.Title level={5} className="text-capitalize m-0">
            {nft_name.split(' ')[0]} {nft_name.split(' ')[1]} #
            {auction_id.slice(0, 4)}
          </Typography.Title>
          <Space>
            <Typography.Text>
              {is_highest_bid_mine ? 'Your Bid' : 'Highest Bid'}
            </Typography.Text>
            <Typography.Text>${winning_bid}</Typography.Text>
          </Space>
          <Button
            block
            type="primary"
            disabled={is_highest_bid_mine}
            onClick={() => message.success('You placed your bid')}
          >
            Place Bid
          </Button>
        </Flex>
      </Card>
    </article>
  );
};

type Props = {
  data: Bidding[];
  loading: boolean;
  error: ReactNode;
};

export const AuctionCarousel = ({ data, error, loading }: Props) => {
  const settings: CarouselProps = {
    autoplay: false,
    dots: true,
    dotPosition: 'bottom',
    infinite: true,
    speed: 500,
    slidesToShow: 3,
    slidesToScroll: 2,
    initialSlide: 0,
    responsive: [
      {
        breakpoint: 1025,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 1,
        },
      },
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 1,
          initialSlide: 2,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
    cssEase: 'linear',
    className: 'auction-carousel',
  };

  return error ? (
    <Alert
      message="Error"
      description={error.toString()}
      type="error"
      showIcon
    />
  ) : loading ? (
    <Loader />
  ) : (
    <Carousel {...settings}>
      {data.map((item) => ( // Changed _ to item for clarity
        <CardItem key={item.auction_id} item={item} /> // Added key prop here
      ))}
    </Carousel>
  );
};

src\components\dashboard\bidding\AuctionCarousel\styles.css:
.auction-carousel {
}

.slick-slide {
}

.auction-card {
}

.auction-card .ant-card-body {
  padding: 2px;
}

.auction-card .auction-card-header {
  height: 280px;
  background-image: linear-gradient(60deg, #29323c 0%, #485563 100%);
}


src\components\dashboard\bidding\CategoriesCard\CategoriesCard.tsx:
import { CardProps, Table } from 'antd';
import { Card } from '../../../index.ts';

import './styles.css';

const CATEGORIES_MOCKS = [
  {
    id: '4f3d4a10-9650-4351-8583-deebc6aba264',
    quantity: 619,
    popular_categories: 'Clothing',
  },
  {
    id: 'd7c83fcf-e1ef-41c0-a2b1-a647cb2fd595',
    quantity: 122,
    popular_categories: 'Automotive',
  },
  {
    id: 'ec3eaf43-ae68-4527-95f1-d0047a21c6cd',
    quantity: 72,
    popular_categories: 'Music',
  },
  {
    id: '51a35167-8039-42f7-a9fd-dab30dbf95f3',
    quantity: 589,
    popular_categories: 'Jewelry',
  },
  {
    id: '546dff0a-7924-40e4-88ee-89f7b60f5467',
    quantity: 839,
    popular_categories: 'Movies',
  },
  {
    id: '1ae852f1-ed30-42d0-8777-af9202d84672',
    quantity: 458,
    popular_categories: 'Automotive',
  },
  {
    id: 'addd564f-8374-4acc-92bb-b0c94a92daf2',
    quantity: 948,
    popular_categories: 'Electronics',
  },
  {
    id: '70636710-5993-44d7-9a3b-e55f8d2c5876',
    quantity: 965,
    popular_categories: 'Jewelry',
  },
  {
    id: '91e983de-6f07-4d79-83ea-a5ffcb33ae8e',
    quantity: 797,
    popular_categories: 'Food',
  },
  {
    id: '796a05c6-c8da-4e1d-a015-5758deeff3ed',
    quantity: 662,
    popular_categories: 'Electronics',
  },
  {
    id: 'b19df40e-aa7b-4ca2-955a-9cd8e2611a42',
    quantity: 650,
    popular_categories: 'Books',
  },
  {
    id: '1fa890ed-3cb5-4d26-828c-9922c968c979',
    quantity: 536,
    popular_categories: 'Toys',
  },
  {
    id: '7e2b5762-b21f-4e33-be1d-e1bdc63a9afa',
    quantity: 898,
    popular_categories: 'Sports',
  },
  {
    id: 'ed96e148-21e1-4cdc-93fa-233722220524',
    quantity: 680,
    popular_categories: 'Electronics',
  },
  {
    id: '15f722c0-3f56-4249-9249-26776d56b7bd',
    quantity: 490,
    popular_categories: 'Toys',
  },
  {
    id: '02adf93d-be3f-49b0-889d-88d6976e67eb',
    quantity: 712,
    popular_categories: 'Home Decor',
  },
  {
    id: '3d23dd98-adb8-4d4b-add6-3c17ce041fe3',
    quantity: 919,
    popular_categories: 'Clothing',
  },
  {
    id: 'e0c6a330-595c-4ec9-af39-f66928e39e62',
    quantity: 726,
    popular_categories: 'Gaming',
  },
  {
    id: 'c371dcde-cc84-4947-807d-68551aba9c97',
    quantity: 155,
    popular_categories: 'Automotive',
  },
  {
    id: '58274205-ee48-483d-b6b8-901fda940bda',
    quantity: 197,
    popular_categories: 'Automotive',
  },
  {
    id: 'b2e08639-c11d-4a2f-8904-9d114b4aa497',
    quantity: 853,
    popular_categories: 'Jewelry',
  },
  {
    id: '27b313ac-e75c-46e0-8a83-0ca8673f3bf3',
    quantity: 168,
    popular_categories: 'Music',
  },
  {
    id: '5f0fc9b8-8274-45cb-a9dd-615838ee20b0',
    quantity: 804,
    popular_categories: 'Food',
  },
  {
    id: '1f68c92e-81dd-44f2-a5f3-d438faef07ab',
    quantity: 110,
    popular_categories: 'Gaming',
  },
  {
    id: '3500c27b-3ad9-4ac8-9ce9-725ad0045787',
    quantity: 14,
    popular_categories: 'Health',
  },
  {
    id: 'b0263765-8663-40aa-b76f-d01d50d78fc1',
    quantity: 780,
    popular_categories: 'Clothing',
  },
  {
    id: '0009f9c6-c112-408d-8b15-16ec1611b2ba',
    quantity: 407,
    popular_categories: 'Beauty',
  },
  {
    id: '579bfb91-5d1c-4b51-ade4-d3d05a5f1008',
    quantity: 665,
    popular_categories: 'Food',
  },
  {
    id: '0f15c852-680c-4c1a-8e3f-536108d4c5e7',
    quantity: 807,
    popular_categories: 'Pets',
  },
  {
    id: '6d502647-79c4-4a5b-8939-6b494b8850f6',
    quantity: 215,
    popular_categories: 'Movies',
  },
];

const CATEGORIES_COLUMNS = [
  {
    title: 'Category',
    dataIndex: 'popular_categories',
    key: 'popular_categories',
  },
  {
    title: 'Quantity',
    dataIndex: 'quantity',
    key: 'quantity',
  },
];

type Props = CardProps;

export const CategoriesCard = ({ ...others }: Props) => {
  return (
    <Card title="categories" className="card" {...others}>
      <Table
        dataSource={CATEGORIES_MOCKS}
        columns={CATEGORIES_COLUMNS}
        size="middle"
        className="overflow-scroll"
      />
    </Card>
  );
};


src\components\dashboard\bidding\CategoriesCard\styles.css:
.categories-list-card .ant-card-body {
  padding: 0 0 1rem 0;
}

.available-tucks-card .ant-list-item {
  /*padding: 0;*/
}


src\components\dashboard\bidding\CreatorsCard\CreatorsCard.tsx:
import { ReactNode } from 'react';
import { Alert, Button, CardProps, Table, TableColumnsType } from 'antd';
import { AuctionCreator } from '../../../../types';
import { Card, UserAvatar } from '../../../index';
import { UserAddOutlined } from '@ant-design/icons';
import './styles.css';

const COLUMNS: TableColumnsType<AuctionCreator> = [
  {
    key: 'creators_name',
    dataIndex: 'first_name',
    title: 'Creator',
    render: (_, { first_name, last_name, favorite_color }) => (
      <UserAvatar
        fullName={`${first_name} ${last_name}`}
        color={favorite_color}
        verified
        textWidth="auto"
      />
    ),
  },
  {
    key: 'sold_items',
    dataIndex: 'sales_count',
    title: 'Items',
  },
  {
    key: 'creator_actions',
    dataIndex: 'actions',
    title: 'Actions',
    render: () => (
      <Button type="link" icon={<UserAddOutlined />}>
        Follow
      </Button>
    ),
  },
];

type Props = {
  data?: AuctionCreator[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const CreatorsCard = ({ data, loading, error, ...others }: Props) => {
  return error ? (
    <Alert
      message="Error"
      description={error.toString()}
      type="error"
      showIcon
    />
  ) : (
    <Card
      title="creators"
      extra={<Button>See all creators</Button>}
      className="card"
      {...others}
    >
      <Table
        dataSource={data}
        columns={COLUMNS}
        size="middle"
        loading={loading}
        className="overflow-scroll"
      />
    </Card>
  );
};


src\components\dashboard\bidding\CreatorsCard\styles.css:
.creators-list-card .ant-card-body {
  padding: 0 0 1rem 0;
}

.available-tucks-card .ant-list-item {
  /*padding: 0;*/
}


src\components\dashboard\bidding\TopItemsCard\TopItems.tsx:
import { Alert, CardProps, Flex, Image, Table, Typography } from 'antd';
import { AuctionSales } from '../../../../types';
import { Card } from '../../../index.ts';
import { ReactNode } from 'react';
import { numberWithCommas } from '../../../../utils';

const SALES_COLUMNS = [
  {
    title: 'Title',
    dataIndex: 'title',
    key: 'title',
    render: (_: any, { image_url, owner, title }: any) => (
      <Flex align="center" gap="small">
        <Image src={image_url} height={24} width={24} preview={false} />
        <Flex vertical gap={4} style={{ width: 160 }}>
          <Typography.Text strong className="text-capitalize">
            {title}
          </Typography.Text>
          <Typography.Link>@{owner.split(' ')[0]}</Typography.Link>
        </Flex>
      </Flex>
    ),
  },
  {
    title: 'Sales count',
    dataIndex: 'volume',
    key: 'sales_count',
    render: (_: any) => (
      <Typography.Text>{numberWithCommas(Number(_))}</Typography.Text>
    ),
  },
  {
    title: 'Price',
    dataIndex: 'price',
    key: 'price',
    render: (_: any) => (
      <Typography.Text>${numberWithCommas(Number(_))}</Typography.Text>
    ),
  },
  {
    title: 'Status',
    dataIndex: 'status',
    key: 'status',
  },
  {
    title: 'Collection',
    dataIndex: 'collection',
    key: 'collection',
  },
  {
    title: 'Owners',
    dataIndex: 'owners_count',
    key: 'owners_count',
    render: (_: any) => (
      <Typography.Text>{numberWithCommas(Number(_))}</Typography.Text>
    ),
  },
];

type Props = {
  data?: AuctionSales[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const TopItemsCard = ({ data, loading, error, ...others }: Props) => {
  return error ? (
    <Alert
      message="Error"
      description={error.toString()}
      type="error"
      showIcon
    />
  ) : (
    <Card title="Top selling items" {...others}>
      <Table
        dataSource={data}
        columns={SALES_COLUMNS}
        loading={loading}
        className="overflow-scroll"
      />
    </Card>
  );
};


src\components\dashboard\bidding\TransactionsCard\TransactionsCard.tsx:
import { CardProps, Table, Typography, Image, Space, Alert } from 'antd';
import { AuctionTransactions } from '../../../../types';
import { SwapRightOutlined } from '@ant-design/icons';
import { Card } from '../../../index.ts';
import { ReactNode } from 'react';

const TRANSACTIONS_COLUMNS = [
  {
    title: 'Type',
    dataIndex: 'transaction_type',
    key: 'transaction_type',
    render: (_: any) => <span className="text-capitalize">{_}</span>,
  },
  {
    title: 'Image',
    dataIndex: 'image',
    key: 'image',
    render: (text: any, { product_id }: any) => (
      <Image
        src={text}
        alt={product_id}
        width={24}
        height={24}
        preview={false}
      />
    ),
  },
  {
    title: 'From/To',
    dataIndex: 'seller',
    key: 'from_to',
    render: (_: any, { buyer, seller, profit }: any) => (
      <Space style={{ width: 240 }}>
        <Typography.Link>@{seller}</Typography.Link>
        <SwapRightOutlined style={{ color: profit > 0 ? 'green' : 'red' }} />
        <Typography.Link>@{buyer}</Typography.Link>
      </Space>
    ),
  },
  {
    title: 'Profit',
    dataIndex: 'profit',
    key: 'profit',
    render: (_: any, { profit }: any) => (
      <Typography.Text>${profit}</Typography.Text>
    ),
  },
  {
    title: 'Value',
    dataIndex: 'purchase_price',
    key: 'purchase_price',
    render: (text: any) => <Typography.Text>${text}</Typography.Text>,
  },
  {
    title: 'Quantity',
    dataIndex: 'quantity',
    key: 'quantity',
  },
  {
    title: 'Date',
    dataIndex: 'transaction_date',
    key: 'transaction_date',
  },
];

type Props = {
  data?: AuctionTransactions[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const TransactionsCard = ({
  data,
  loading,
  error,
  ...others
}: Props) => {
  return error ? (
    <Alert
      message="Error"
      description={error.toString()}
      type="error"
      showIcon
    />
  ) : (
    <Card title="Recent transactions" {...others}>
      <Table
        dataSource={data}
        columns={TRANSACTIONS_COLUMNS}
        loading={loading}
        className="overflow-scroll"
      />
    </Card>
  );
};


src\components\dashboard\default\index.ts:
export { CampaignsCard } from './CampaignsCard/CampaignsCard.tsx';
export { EarningsCard } from './EarningsCard/EarningsCard.tsx';
export { GetStartedCard } from './GetStartedCard/GetStartedCard.tsx';
export { LatestOrdersCard } from './LatestOrdersCard/LatestOrdersCard.tsx';
export { OrdersChart } from './OrdersChart/OrdersChart.tsx';
export { RecentUsersCard } from './RecentUsersCard/RecentUsersCard.tsx';
export { SubscribersChart } from './SubscribersChart/SubscribersChart.tsx';
export { WeeklyActivityCard } from './WeeklyActivityCard/WeeklyActivityCard.tsx';
export { TasksChartCard } from './TasksChartCard/TasksChartCard.tsx';
export { TasksListCard } from './TasksListCard/TasksListCard.tsx';


src\components\dashboard\default\CampaignsCard\CampaignsCard.tsx:
import {
  Alert,
  Badge,
  Button,
  Card,
  CardProps,
  Space,
  Spin,
  Table,
  Tag,
  TagProps,
  theme,
  Typography,
} from 'antd';
import { ReactNode, useEffect, useState } from 'react';
import { CalendarOutlined, PlusOutlined } from '@ant-design/icons';
import { blue, green, orange } from '@ant-design/colors';
import CampaignsData from '../../../../../public/mocks/Campaigns.json';
import { Loader } from '../../../index.ts';

// socials - Facebook, Instagram, Twitter, LinkedIn
// target audience - men, women, young adults, parents
// statuses - active, inactive, pending, completed, cancelled

enum Status {
  Pending = 'pending',
  Inactive = 'inactive',
  Active = 'active',
  Cancelled = 'cancelled',
  Completed = 'completed',
}

const DATA_SOURCE = CampaignsData;

const COLUMNS = [
  {
    title: 'Name',
    dataIndex: 'campaign_name',
    key: 'name',
    render: (_: any) => <span className="text-capitalize">{_}</span>,
  },
  {
    title: 'Audience',
    dataIndex: 'target_audience',
    key: 'audience',
    render: (_: any) => <span className="text-capitalize">{_}</span>,
  },
  {
    title: 'Objective',
    dataIndex: 'campaign_objective',
    key: 'objective',
    render: (_: any) => <span className="text-capitalize">{_}</span>,
  },
  {
    title: 'Platform',
    dataIndex: 'platform',
    key: 'platform',
  },
  {
    title: 'Status',
    dataIndex: 'status',
    key: 'status',
    render: (_: any) => {
      let color: TagProps['color'];

      if (_ === 'pending') {
        color = 'orange';
      } else if (_ === 'active') {
        color = 'blue';
      } else if (_ === 'completed') {
        color = 'green';
      } else if (_ === 'cancelled') {
        color = 'red';
      } else {
        color = 'default';
      }

      return (
        <Tag color={color} className="text-capitalize">
          {_}
        </Tag>
      );
    },
  },
  {
    title: 'Start - End Date',
    dataIndex: 'start_date',
    key: 'status',
    render: (_: any, { start_date, end_date }: any) => (
      <Space>
        <CalendarOutlined />
        <Typography.Text>{start_date}</Typography.Text>-
        <Typography.Text>{end_date}</Typography.Text>
      </Space>
    ),
  },
];

type Props = { data?: any; loading?: boolean; error?: ReactNode } & CardProps;

export const CampaignsCard = ({ error, data, loading, ...others }: Props) => {
  const {
    token: { colorPrimary },
  } = theme.useToken();
  const [activeTabKey, setActiveTabKey] = useState<string>('allCampaigns');
  const [campaignsData, setCampaignsData] = useState<any>([]);

  const TAB_LIST = [
    {
      key: 'allCampaigns',
      label: (
        <Space>
          <Typography.Text>All Campaigns</Typography.Text>
          {loading ? (
            <Spin size="small" />
          ) : (
            <Badge color={colorPrimary} count={DATA_SOURCE.length} />
          )}
        </Space>
      ),
    },
    {
      key: 'pending',
      label: (
        <Space>
          <Typography.Text>Pending</Typography.Text>
          {loading ? (
            <Spin size="small" />
          ) : (
            <Badge
              color={orange[5]}
              count={
                DATA_SOURCE.filter((_: any) => _.status === Status.Pending)
                  .length
              }
            />
          )}
        </Space>
      ),
    },
    {
      key: 'active',
      label: (
        <Space>
          <Typography.Text>Active</Typography.Text>
          {loading ? (
            <Spin size="small" />
          ) : (
            <Badge
              color={blue[5]}
              count={
                DATA_SOURCE.filter((_: any) => _.status === Status.Active)
                  .length
              }
            />
          )}
        </Space>
      ),
    },
    {
      key: 'completed',
      label: (
        <Space>
          <Typography.Text>Completed</Typography.Text>
          {loading ? (
            <Spin size="small" />
          ) : (
            <Badge
              color={green[6]}
              count={
                DATA_SOURCE.filter((_: any) => _.status === Status.Pending)
                  .length
              }
            />
          )}
        </Space>
      ),
    },
  ];

  const onTabChange = (key: string) => {
    setActiveTabKey(key);
  };

  useEffect(() => {
    const dd = data.length > 0 ? data : DATA_SOURCE;
    if (activeTabKey !== 'allCampaigns') {
      setCampaignsData(dd.filter((_: any) => _.status === activeTabKey));
    } else {
      setCampaignsData(dd);
    }
  }, [activeTabKey, data]);

  return (
    <Card
      style={{ width: '100%' }}
      tabList={TAB_LIST}
      activeTabKey={activeTabKey}
      tabBarExtraContent={
        <Button type="primary" icon={<PlusOutlined />}>
          Create campaign
        </Button>
      }
      onTabChange={onTabChange}
      {...others}
    >
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <Table columns={COLUMNS} dataSource={campaignsData} />
      )}
    </Card>
  );
};


src\components\dashboard\default\EarningsCard\EarningsCard.tsx:
import { Badge, Card, CardProps, Space, Typography } from 'antd';
import { Pie } from '@ant-design/charts';
import { ArrowDownOutlined, ArrowUpOutlined } from '@ant-design/icons';
import * as _ from 'lodash';
import { MoreMenu } from '../../../index.ts';

type Props = {
  data: any;
  title: string;
  diff: number;
} & CardProps;

export const EarningsCard = ({ data, title, diff, ...others }: Props) => {
  const config = {
    appendPadding: 10,
    data,
    angleField: 'value',
    colorField: 'type',
    radius: 1,
    innerRadius: 0.6,
    label: {
      type: 'inner',
      offset: '-50%',
      content: '{value}',
      style: {
        textAlign: 'center',
        fontSize: 14,
      },
    },
    interactions: [
      {
        type: 'element-selected',
      },
      {
        type: 'element-active',
      },
    ],
    statistic: {
      title: false,
      content: {
        style: {
          whiteSpace: 'pre-wrap',
          overflow: 'hidden',
          textOverflow: 'ellipsis',
        },
        content: '',
      },
    },
  };

  return (
    <Card title={title} extra={<MoreMenu />} {...others}>
      <Space
        direction="vertical"
        style={{ justifyContent: 'flex-start', width: '100%' }}
      >
        <Space direction="horizontal" align="center">
          <Typography.Title level={1} style={{ margin: 0 }}>
            <small>$</small>
            {_.sumBy(data, 'value')}
          </Typography.Title>
          <Badge
            count={
              <div style={{ display: 'flex', gap: '4px' }}>
                {diff < 0 ? <ArrowDownOutlined /> : <ArrowUpOutlined />}
                <Typography.Text style={{ color: 'white' }} strong>
                  {diff}
                </Typography.Text>
              </div>
            }
            style={{
              backgroundColor: diff < 0 ? '#ff4d4f' : '#52c41a',
              color: 'white',
              padding: '.175rem .35rem',
            }}
          />
        </Space>
        <div style={{ height: 180, textAlign: 'center' }}>
          {/*@ts-ignore*/}
          <Pie {...config} />
        </div>
      </Space>
    </Card>
  );
};


src\components\dashboard\default\GetStartedCard\GetStartedCard.tsx:
import { Button, CardProps, Flex, Image, Typography } from 'antd';
import { RightOutlined } from '@ant-design/icons';
import { Card } from '../../../index';
import CountUp from 'react-countup';

type Props = CardProps;

export const GetStartedCard = ({ ...others }: Props) => {
  return (
    <Card {...others}>
      <Flex justify="space-between" align="center" gap="middle">
        <Flex vertical gap="large" align="flex-start">
          <Typography.Title level={4} style={{ margin: 0 }}>
            You have <CountUp end={2} /> projects to finish this week
          </Typography.Title>
          <Typography.Text>
            You have already completed 68% of your monthly target. Keep going to
            achieve your goal.
          </Typography.Text>
          <Button type="primary" size="middle">
            Get started <RightOutlined />
          </Button>
        </Flex>
        <Image
          src="/get-started.png"
          height={180}
          preview={false}
          style={{ objectFit: 'cover' }}
        />
      </Flex>
    </Card>
  );
};


src\components\dashboard\default\LatestOrdersCard\LatestOrdersCard.tsx:
import { Alert, Card, CardProps, Table } from 'antd';
import { MoreMenu } from '../../../index.ts';
import { ReactNode } from 'react';
import { useFetchData } from '../../../../hooks';

const COLUMNS = [
  {
    title: 'Customer name',
    dataIndex: 'customer_name',
    key: 'customer_name',
  },
  {
    title: 'Product',
    dataIndex: 'product_name',
    key: 'product_name',
  },
  {
    title: 'Orders',
    dataIndex: 'orders',
    key: 'orders',
  },
  {
    title: 'Country',
    dataIndex: 'country',
    key: 'country',
  },
  {
    title: 'Shipping address',
    dataIndex: 'shipping_address',
    key: 'shipping_address',
  },
];

type Props = {
  data?: any;
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const LatestOrdersCard = ({
  data,
  loading,
  error,
  ...others
}: Props) => {
  const {
    data: ordersData,
    loading: ordersDataLoading,
    error: ordersDataError,
  } = useFetchData('/mocks/CountryOrders.json');

  return (
    <Card title={`Latest Orders`} extra={<MoreMenu />} {...others}>
      {ordersDataError || error ? (
        <Alert
          message="Error"
          description={error?.toString() || ordersDataError.toString()}
          type="error"
          showIcon
        />
      ) : (
        <Table
          columns={COLUMNS}
          dataSource={ordersData}
          loading={ordersDataLoading || loading}
        />
      )}
    </Card>
  );
};


src\components\dashboard\default\OrdersChart\OrdersChart.tsx:
import { Card, CardProps } from 'antd';
import { Area } from '@ant-design/charts';
import { MoreMenu } from '../../../index.ts';

const AreaChart = () => {
  const data = [
    {
      country: 'order',
      date: '1 Aug',
      value: 100,
    },
    {
      country: 'order',
      date: '8 Aug',
      value: 300,
    },
    {
      country: 'order',
      date: '15 Aug',
      value: 200,
    },
    {
      country: 'order',
      date: '22 Aug',
      value: 250,
    },
    {
      country: 'revenue',
      date: '1 Aug',
      value: 900.5,
    },
    {
      country: 'revenue',
      date: '8 Aug',
      value: 1500.5,
    },
    {
      country: 'revenue',
      date: '15 Aug',
      value: 1200.7,
    },
    {
      country: 'revenue',
      date: '22 Aug',
      value: 1300.1,
    },
  ];

  const config = {
    data,
    xField: 'date',
    yField: 'value',
    seriesField: 'country',
    slider: {
      start: 0.1,
      end: 0.9,
    },
  };

  return <Area {...config} />;
};

type Props = CardProps;

export const OrdersChart = ({ ...others }: Props) => {
  return (
    <Card title="Orders value" extra={<MoreMenu />} {...others}>
      <AreaChart />
    </Card>
  );
};


src\components\dashboard\default\RecentUsersCard\RecentUsersCard.tsx:
import { Alert, Card, CardProps, Table, Typography } from 'antd';
import { MoreMenu } from '../../../index.ts';
import { useFetchData } from '../../../../hooks';
import { ReactNode } from 'react';

const COLUMNS = [
  {
    title: 'Names',
    dataIndex: 'first_name',
    key: 'name',
    render: (_: any, { first_name, last_name }: any) => (
      <Typography.Text>
        {first_name} {last_name}
      </Typography.Text>
    ),
  },
  {
    title: 'Gender',
    dataIndex: 'gender',
    key: 'gender',
  },
  {
    title: 'Country',
    dataIndex: 'country',
    key: 'country',
  },
  {
    title: 'Birth date',
    dataIndex: 'birthdate',
    key: 'birthdate',
  },
];

type Props = { data?: any; loading?: boolean; error?: ReactNode } & CardProps;

export const RecentUsersCard = ({ data, loading, error, ...others }: Props) => {
  const {
    data: usersData,
    loading: usersDataLoading,
    error: usersDataError,
  } = useFetchData('/mocks/ChannelUsers.json');

  return (
    <Card title={`Recent Users`} extra={<MoreMenu />} {...others}>
      {usersDataError || error ? (
        <Alert
          message="Error"
          description={error?.toString() || usersDataError.toString()}
          type="error"
          showIcon
        />
      ) : (
        <Table
          columns={COLUMNS}
          dataSource={usersData}
          loading={usersDataLoading || loading}
        />
      )}
    </Card>
  );
};


src\components\dashboard\default\SubscribersChart\SubscribersChart.tsx:
import { Card, CardProps, Flex, Typography } from 'antd';
import { Column } from '@ant-design/charts';
import { MoreMenu } from '../../../index.ts';

type Props = CardProps;

const ColumnChart = () => {
  const data = [
    {
      type: '1 July',
      subscribers: 38,
    },
    {
      type: '8 July',
      subscribers: 52,
    },
    {
      type: '15 July',
      subscribers: 61,
    },
    {
      type: '22 July',
      subscribers: 145,
    },
    {
      type: '29 July',
      subscribers: 48,
    },
    {
      type: '5 Aug',
      subscribers: 38,
    },
    {
      type: '12 Aug',
      subscribers: 38,
    },
    {
      type: '19 Aug',
      subscribers: 38,
    },
  ];
  const config = {
    data,
    xField: 'type',
    yField: 'subscribers',
    label: {
      position: 'middle',

      style: {
        fill: '#FFFFFF',
        opacity: 0.6,
      },
    },
    xAxis: {
      label: {
        autoHide: true,
        autoRotate: false,
      },
    },
    meta: {
      type: {
        alias: 'Subscribers',
      },
      subscribers: {
        alias: 'count',
      },
    },
  };
  // @ts-ignore
  return <Column {...config} />;
};

export const SubscribersChart = ({ ...others }: Props) => {
  return (
    <Card title="YouTube Subscribers" extra={<MoreMenu />} {...others}>
      <Flex gap="middle" vertical>
        <Typography.Text>75% activity growth</Typography.Text>
        <ColumnChart />
      </Flex>
    </Card>
  );
};


src\components\dashboard\default\TasksChartCard\TasksChartCard.tsx:
import { Column } from '@ant-design/charts';
import { Button, CardProps } from 'antd';
import { Card } from '../../../index.ts';

type Tasks = {
  day: string;
  value: number;
  status: string;
};

type ChartProps = {
  data: Tasks[];
};

const ColumnChart = ({ data }: ChartProps) => {
  const config = {
    data,
    isStack: true,
    xField: 'day',
    yField: 'value',
    seriesField: 'status',
    label: {
      position: 'top', // 'top', 'bottom', 'middle'
      offset: 10,
      style: {
        fill: 'transparent',
      },
    },
    interactions: [
      {
        type: 'active-region',
        enable: false,
      },
    ],
    columnBackground: {
      style: {
        fill: 'rgba(0,0,0,0.1)',
      },
    },
    legend: {
      position: 'bottom',
    },
  };

  // @ts-ignore
  return <Column {...config} />;
};

type Props = {
  data?: Tasks[];
} & CardProps;

export const TasksChartCard = ({ data, ...others }: Props) => {
  return (
    <Card title="Tasks stats" extra={<Button>See all</Button>} {...others}>
      <ColumnChart data={data || []} />
    </Card>
  );
};


src\components\dashboard\default\TasksListCard\styles.css:
.tasks-list-card .ant-card-body {
  /*padding: 0 0 1rem 0;*/
}

.tasks-list-card .ant-list-item {
  /*padding: 0;*/
}


src\components\dashboard\default\TasksListCard\TasksListCard.tsx:
import {
  Alert,
  Badge,
  Button,
  Card as AntdCard,
  CardProps,
  Flex,
  List,
  Space,
  Tag,
  Typography,
} from 'antd';
import { Tasks } from '../../../../types';
import { CalendarOutlined, FlagOutlined } from '@ant-design/icons';
import { Card, Loader, UserAvatar } from '../../../index';

import './styles.css';

type Props = {
  data?: Tasks[];
  loading?: boolean;
  error?: any;
} & CardProps;

export const TasksListCard = ({ data, error, loading, ...others }: Props) => {
  return (
    <Card
      title="Tasks"
      extra={<Button>View all</Button>}
      className="tasks-list-card card"
      {...others}
    >
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <List
          grid={{
            gutter: 16,
            xs: 1,
            sm: 1,
            md: 2,
            lg: 2,
            xl: 3,
            xxl: 4,
          }}
          pagination={{
            onChange: (page) => {
              console.log(page);
            },
            pageSize: 6,
            align: 'center',
          }}
          dataSource={data}
          renderItem={(item) => (
            <List.Item key={item.name} style={{ height: '100%' }}>
              <AntdCard
                hoverable
                bordered
                type="inner"
                style={{ height: '100%' }}
              >
                <Flex vertical gap="middle">
                  <Flex justify="space-between" align="center">
                    <Typography.Text strong className="text-capitalize">
                      {item.name.slice(0, 20)}...
                    </Typography.Text>
                    <Tag className="text-capitalize">{item.category}</Tag>
                  </Flex>
                  <Flex justify="space-between" align="center">
                    <Tag
                      icon={<FlagOutlined />}
                      color={item.color}
                      style={{ textTransform: 'capitalize' }}
                    >
                      {item.priority}
                    </Tag>
                    <Badge
                      className="text-capitalize"
                      status={
                        item.status.toLowerCase() === 'completed'
                          ? 'success'
                          : item.status.toLowerCase() === 'in progress'
                            ? 'processing'
                            : 'warning'
                      }
                      text={item.status}
                    />
                  </Flex>
                  <Space>
                    <CalendarOutlined />
                    <Typography.Text>{item.due_date}</Typography.Text>
                  </Space>
                  <UserAvatar fullName={item.assigned_to} size="middle" />
                </Flex>
              </AntdCard>
            </List.Item>
          )}
        />
      )}
    </Card>
  );
};


src\components\dashboard\default\WeeklyActivityCard\WeeklyActivityCard.tsx:
import { Area } from '@ant-design/charts';
import { CardProps } from 'antd';
import { Card } from '../../../index.ts';

type Activity = {
  day: string;
  value: number;
};

type ChartProps = {
  data: Activity[];
};

const AreaChart = ({ data }: ChartProps) => {
  const config = {
    data,
    xField: 'day',
    yField: 'value',
    xAxis: {
      range: [0, 1],
    },
    smooth: true,
  };

  return <Area {...config} />;
};

type Props = {
  data: Activity[];
} & CardProps;

export const WeeklyActivityCard = ({ data, ...others }: Props) => {
  return (
    <Card title="Weekly activity" {...others}>
      <AreaChart data={data} />
    </Card>
  );
};


src\components\dashboard\ecommerce\index.ts:
export { CustomerReviewsCard } from './CustomerReviewsCard/CustomerReviewsCard.tsx';


src\components\dashboard\ecommerce\CustomerReviewsCard\CustomerReviewsCard.tsx:
import {
  Button,
  CardProps,
  Flex,
  Popover,
  Progress,
  ProgressProps,
  Rate,
  Typography,
} from 'antd';
import { green, lime, orange, red, yellow } from '@ant-design/colors';
import { QuestionOutlined } from '@ant-design/icons';
import { Card } from '../../../index.ts';

const PROGRESS_PROPS: ProgressProps = {
  style: {
    width: 300,
  },
};

type Props = CardProps;

export const CustomerReviewsCard = ({ ...others }: Props) => {
  return (
    <Card
      title="Customer reviews"
      extra={
        <Popover content="Overall rating of 5k reviews" title="Review ratings">
          <Button icon={<QuestionOutlined />} size="small" type="text" />
        </Popover>
      }
      actions={[<Button>See all customer reviews</Button>]}
      {...others}
    >
      <Flex vertical gap="middle">
        <Flex align="center" gap="middle" justify="center">
          <Rate allowHalf value={4.6} disabled />
          <Typography.Title level={2} style={{ margin: 0 }}>
            4.6/5
          </Typography.Title>
        </Flex>
        <Flex vertical gap="small">
          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
            <Typography.Text>Excellent</Typography.Text>
            <Progress percent={35} strokeColor={lime[6]} {...PROGRESS_PROPS} />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
            <Typography.Text>Good</Typography.Text>
            <Progress percent={25} strokeColor={green[5]} {...PROGRESS_PROPS} />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
            <Typography.Text>Average</Typography.Text>
            <Progress
              percent={30}
              strokeColor={yellow[6]}
              {...PROGRESS_PROPS}
            />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
            <Typography.Text>Poor</Typography.Text>
            <Progress
              percent={30}
              strokeColor={orange[5]}
              {...PROGRESS_PROPS}
            />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
            <Typography.Text>Critical</Typography.Text>
            <Progress percent={30} strokeColor={red[6]} {...PROGRESS_PROPS} />
          </div>
        </Flex>
      </Flex>
    </Card>
  );
};


src\components\dashboard\events\ActivityTable.tsx:
import {
    Alert,
    Button,
    Table,
} from 'antd';
import { useNavigate } from 'react-router-dom';
import { Card } from '../../';

const ACTIVITY_COLUMNS = (navigate: ReturnType<typeof useNavigate>) => [
    {
      title: 'ID',
      dataIndex: 'activity_id',
      key: 'id',
    },
    {
      title: 'Activity Name',
      dataIndex: 'activity_name',
      key: 'name',
    },
    {
      title: 'Description',
      dataIndex: 'description',
      key: 'description',
    },
    {
      title: 'Attendees',
      dataIndex: 'attendees',
      key: 'Attendees',
    },
    {
      title: 'Actions',
      dataIndex: 'activity_id',
      key: 'id',
      render: (value,record) => (
        <div>
        <Button type="primary" onClick={() => navigate(`/details/events/${value}`)}>
          Details
        </Button>
        </div>
      )
    }
  ];
  interface EventTableProps {
    data: [];
    error?: string;
    loading: boolean;
  }
export const ActivityTable : React.FC<EventTableProps> = ({data,error,loading} ) => {
  const navigate = useNavigate();
  return (
    <div>
          <Card title="This Event's Activities" extra={<a href="/create/activities">Create Activities for this Event</a>}>
            {error ? (
              <Alert
                message="Error"
                description={error.toString()}
                type="error"
                showIcon
              />
            ) : (
              <Table
                columns={ACTIVITY_COLUMNS(navigate)}
                dataSource={data}
                loading={loading}
                className="overflow-scroll"
              />
            )}
          </Card>
    </div>
  )
}


src\components\dashboard\events\EventSchedule.tsx:
import { Alert, Button, CardProps, Flex, Timeline, Typography } from 'antd';
import {
  LaptopOutlined,
  MobileOutlined,
  TabletOutlined,
} from '@ant-design/icons';
// import { ActivityTimeline } from '../../../types';
import { Card, Loader } from '../../index.ts';
import { ReactNode } from 'react';

type Props = {
  data?: [];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const EventTimelineCard = ({ data, error, loading, ...others }: Props) => {
  return (
    <Card title="Latest activities" {...others}>
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <Timeline
          mode="left"
          items={data?.map((_) => ({
            // dot:
            //   _.device_type === 'desktop' ? (
            //     <LaptopOutlined />
            //   ) : _.device_type === 'tablet' ? (
            //     <TabletOutlined />
            //   ) : (
            //     <MobileOutlined />
            //   ),
            children: (
              <Flex gap="small" vertical>
                <Typography.Paragraph
                  ellipsis={{
                    rows: 2,
                  }}
                  // title={`${_.post_content}--${_.timestamp}`}
                  style={{ marginBottom: 0 }}
                >
                  {_.post_content} - By <i>{_.speaker_name}</i>
                </Typography.Paragraph>
                {/* <Typography.Text type="secondary">
                  {_.timestamp}
                </Typography.Text> */}
              </Flex>
            ),
          }))}
        />
      )}
    </Card>
  );
};


src\components\dashboard\events\EventTable.tsx:
// src\components\dashboard\events\EventTable.tsx
import {
  Alert,
  Button,
  Table,
} from 'antd';
import { useNavigate } from 'react-router-dom';
import { Card } from '../../';

const EVENT_COLUMNS = (navigate: ReturnType<typeof useNavigate>) => [
  {
    title: 'ID',
    dataIndex: 'id',
    key: 'id',
  },
  {
    title: 'Event Name',
    dataIndex: 'name',
    key: 'name',
  },
  {
    title: 'Description',
    dataIndex: 'description',
    key: 'description',
  },
  {
    title: 'Attendees',
    dataIndex: 'capacity',
    key: 'capacity',
  },
  {
    title: 'Location',
    dataIndex: 'location',
    key: 'location',
  },
  {
    title: 'Start At',
    dataIndex: 'startDate',
    key: 'startDate',
  },
  {
    title: 'End At',
    dataIndex: 'endDate',
    key: 'endDate',
  },
  {
    title: 'Actions',
    dataIndex: 'id',
    key: 'id',
    render: (/* value bị xóa */_: any, record: any) => ( // Xóa parameter value
      <div>
        <Button type="primary" onClick={() => navigate(`/details/events/${record.id}`)}> {/* Đảm bảo URL là `/details/events/${record.id}` */}
          Details
        </Button>
      </div>
    )
  }
];
interface EventTableProps {
  data: [];
  error?: string;
  loading: boolean;
}
export const EventTable: React.FC<EventTableProps> = ({ data, error, loading }) => {
  const navigate = useNavigate();
  return (
    <div>
      <Card title="Your Events" extra={<a href="/create/events">Create Your Events</a>}>
        {error ? (
          <Alert
            message="Error"
            description={error.toString()}
            type="error"
            showIcon
          />
        ) : (
          <Table
            columns={EVENT_COLUMNS(navigate)}
            dataSource={data}
            loading={loading}
            className="overflow-scroll"
          />
        )}
      </Card>
    </div>
  )
}

src\components\dashboard\events\index.tsx:
export {EventTable} from './EventTable.tsx';
export {EventTimelineCard} from './EventSchedule.tsx';
export {MyEventTimelineCard} from './MyEventTimelineCard.tsx';
export {ActivityTable} from './ActivityTable.tsx';

src\components\dashboard\events\MyEventTable.tsx:
// src\components\dashboard\events\MyEventTable.tsx
import {
  Badge,
  BadgeProps,
  Button,
  Popconfirm,
  Space,
  Table,
  TableProps,
  Tag,
  TagProps,
  Typography,
  message,
} from 'antd';
import { useNavigate } from 'react-router-dom';
import { useState } from 'react';
import authService from '../../../services/authService';
import { Events } from '../../../types';
import { ColumnsType } from 'antd/es/table';

type Props = {
  data: Events[];
  loading: boolean;
  fetchData: () => void;
  activeTabKey: string;
} & TableProps<Events>;

export const MyEventsTable = ({ data, loading, fetchData, activeTabKey, ...others }: Props) => {
  const navigate = useNavigate();
  const [tableLoading, setTableLoading] = useState(false);

  const COLUMNS = (navigate: ReturnType<typeof useNavigate>, setLoading: (loading: boolean) => void, fetchData: () => void, activeTabKey: string): ColumnsType<Events> => [
    {
      title: 'Name',
      dataIndex: 'name',
      key: 'proj_name',
      render: (_: any, record: Events) => (
        <Typography.Paragraph
          ellipsis={{ rows: 1 }}
          className="text-capitalize"
          style={{ marginBottom: 0 }}
        >
          {record.name?.substring(0, 20)}
        </Typography.Paragraph>
      ),
    },
    {
      title: 'Category',
      dataIndex: 'categoryId',
      key: 'event_category',
      render: (_: any) => <span className="text-capitalize">{_}</span>,
    },
    {
      title: 'Status',
      dataIndex: 'status',
      key: 'proj_status',
      render: (_: any) => {
        let status: BadgeProps['status'];

        if (_ === 'SCHEDULED') {
          status = 'default';
        } else if (_ === 'FINISHED') {
          status = 'success';
        } else if (_ === "CANCELED") {
          status = 'error';
        } else {
          status = 'processing'
        }

        return <Badge status={status} text={_} className="text-capitalize" />;
      },
    },
    {
      title: 'Capacity',
      dataIndex: 'maxParticipants',
      key: 'event_capacity',
    },
    {
      title: 'Start Date',
      dataIndex: 'startDate',
      key: 'event_start_date',
    },
    {
      title: 'End Date',
      dataIndex: 'endDate',
      key: 'event_end_date',
    },
    {
      title: 'Actions',
      dataIndex: 'id',
      key: 'event_actions',
      render: (eventId: string, record: Events) => {
        return (
          <Space size="small">
            <Button type="primary" onClick={() => navigate(`/details/events/${record.id}`)}> {/* Đã sửa URL navigate */}
              Details
            </Button>
            {activeTabKey !== 'CANCELED' && activeTabKey !== 'FINISHED' && (
              <Button type="primary" onClick={() => navigate(`/edit/events/${record.id}`)}>
                Update
              </Button>
            )}
            {activeTabKey !== 'CANCELED' && activeTabKey !== 'FINISHED' && (
              <Popconfirm
                title="Cancel Event"
                description="Are you sure to cancel this event?"
                onConfirm={() => handleCancel(eventId, setTableLoading, fetchData)}
                onCancel={() => message.info('Cancel cancel')}
                okText="Yes, Cancel"
                cancelText="No"
                placement="topRight" // Thử thay đổi placement
                overlayInnerStyle={{ width: 300 }} // Thử set width
              >
                <Button danger>
                  Cancel
                </Button>
              </Popconfirm>
            )}
          </Space>
        );
      },
    },
  ];

  const handleCancel = async (eventId: string, setLoading: (loading: boolean) => void, fetchData: () => void) => {
    setLoading(true);
    try {
      const accessToken = localStorage.getItem('accessToken');
      if (!accessToken) {
        message.error("No access token found. Please login again.");
        return;
      }

      const response = await authService.deleteEvent(eventId, accessToken) as { statusCode: number, message: string };
      if (response.statusCode === 200) {
        message.success(response.message);
        fetchData();
      } else {
        message.error(response.message || 'Failed to cancel event');
      }
    } catch (error: any) {
      console.error('Error canceling event:', error);
      message.error(error.message || 'Failed to cancel event');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Table
      rowKey="id"
      dataSource={data}
      columns={COLUMNS(navigate, setTableLoading, fetchData, activeTabKey)}
      className="overflow-scroll"
      loading={loading || tableLoading}
      {...others}
    />
  );
};

src\components\dashboard\events\MyEventTimelineCard.tsx:
import { Alert, Button, CardProps, Flex, Form, Input, Modal, Timeline, Typography } from 'antd';
import {
  LaptopOutlined,
  MobileOutlined,
  TabletOutlined,
} from '@ant-design/icons';
// import { ActivityTimeline } from '../../../types';
import { Card, Loader } from '../../index.ts';
import { ReactNode, useEffect, useState } from 'react';

type Props = {
  data?: [];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const MyEventTimelineCard = ({ data, error, loading, ...others }: Props) => {

    // Modal State for create event type
    const [activityTimeline, setActivityTimeline] = useState(data);
    useEffect(() => {
      setActivityTimeline(data);
    }, [data]);
    const [isCreateTimelineModalOpen, setIsCreateTimelineModalOpen] = useState<any>(false);
  
      const [form] = Form.useForm();
  
    const showCreateTimelineModal = () => {
      setIsCreateTimelineModalOpen(true);
    };
  
    const handleOkCreateTimeline = () => {
      setIsCreateTimelineModalOpen(false);
      form.submit()
    };
  
    const handleCancelCreateTimeline = () => {
      setIsCreateTimelineModalOpen(false);
    };

    const onFinishTimeline = (values : any) => {
      setActivityTimeline([...activityTimeline, {
        speaker_name: values.speaker_name,
        post_content: values.post_content
      }]);
      setIsCreateTimelineModalOpen(false);
    };
  return (
    <Card title="Latest activities" {...others} extra={<Button type='primary' onClick={showCreateTimelineModal}>Add New Activity</Button>}>
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <Timeline
          mode="left"
          items={activityTimeline?.map((_) => ({
            // dot:
            //   _.device_type === 'desktop' ? (
            //     <LaptopOutlined />
            //   ) : _.device_type === 'tablet' ? (
            //     <TabletOutlined />
            //   ) : (
            //     <MobileOutlined />
            //   ),
            children: (
              <Flex gap="small" vertical>
                <Typography.Paragraph
                  ellipsis={{
                    rows: 2,
                  }}
                  // title={`${_.post_content}--${_.timestamp}`}
                  style={{ marginBottom: 0 }}
                >
                  {_.post_content} - By <i>{_.speaker_name}</i>
                </Typography.Paragraph>
                {/* <Typography.Text type="secondary">
                  {_.timestamp}
                </Typography.Text> */}
              </Flex>
            ),
          }))}
        />
      )}
              <Modal title="Create Event Type" open={isCreateTimelineModalOpen} onOk={handleOkCreateTimeline} onCancel={handleCancelCreateTimeline}>
          <Form layout='vertical'
            onFinish={onFinishTimeline}
            form={form}
          >
            <Form.Item label="Speaker's Name" name="speaker_name">
              <Input placeholder="John Doe" />
            </Form.Item>
            <Form.Item label="Talk About" name="post_content">
              <Input placeholder="Software Engineering Future" />
            </Form.Item>
          </Form>
      </Modal>
    </Card>
  );
};


src\components\dashboard\learning\index.ts:
export { StatsCard } from './StatsCard/StatsCard.tsx';
export { CoursesCard } from './CoursesCard/CoursesCard.tsx';
export { CoursesCarousel } from './CoursesCarousel/CoursesCarousel.tsx';
export { StudyStatisticsCard } from './StudyStatisticsCard/StudyStatisticsCard.tsx';
export { ProgressCard } from './ProgressCard/ProgressCard.tsx';
export { ExamsCard } from './ExamsCard/ExamsCard.tsx';
export { CommunityGroupCard } from './CommunityGroupsCard/CommunityGroupCard.tsx';


src\components\dashboard\learning\CommunityGroupsCard\CommunityGroupCard.tsx:
import { Alert, Avatar, Button, CardProps, List, Typography } from 'antd';
import { CommunityGroup } from '../../../../types';
import { PlusOutlined } from '@ant-design/icons';
import { Card } from '../../../index.ts';
import { ReactNode } from 'react';

import './styles.css';

type Props = {
  data?: CommunityGroup[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const CommunityGroupCard = ({
  data,
  loading,
  error,
  ...others
}: Props) => {
  return (
    <Card
      title="Community Groups"
      className="community-group-card card"
      extra={<Button icon={<PlusOutlined />} />}
      {...others}
    >
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : (
        <List
          itemLayout="vertical"
          size="small"
          className="community-group-list"
          pagination={{
            onChange: (page) => {
              console.log(page);
            },
            pageSize: 5,
            align: 'center',
          }}
          dataSource={data}
          renderItem={(item) => (
            <List.Item key={item.id}>
              <List.Item.Meta
                avatar={
                  <Avatar
                    src={item.image}
                    alt={item.name}
                    size="default"
                    style={{ backgroundColor: item.favorite_color }}
                  />
                }
                title={<Typography.Link>{item.name}</Typography.Link>}
                description={`${item.size} Members`}
              />
            </List.Item>
          )}
          loading={loading}
        />
      )}
    </Card>
  );
};


src\components\dashboard\learning\CommunityGroupsCard\styles.css:
.community-group-card .ant-card-body {
  padding: 0 0 1rem 0;
}

.community-group-list .ant-list-item {
  /*padding: 0;*/
}

.community-group-list .ant-list-item-meta {
  margin-block-end: 0 !important;
  align-items: center !important;
}

.community-group-list .ant-list-item-meta-title {
  text-transform: capitalize;
  font-weight: 500;
  margin-bottom: 0 !important;
}

.community-group-list .ant-list-item-meta-title a {
  font-size: 16px;
}


src\components\dashboard\learning\CoursesCard\CoursesCard.tsx:
import { Alert, CardProps, Space, Table, Typography } from 'antd';
import { LearningCourses } from '../../../../types';
import { SwapRightOutlined } from '@ant-design/icons';
import { ColumnsType } from 'antd/es/table';
import { Card, UserAvatar } from '../../../index.ts';
import { ReactNode } from 'react';

const COURSES_COLUMNS: ColumnsType<LearningCourses> = [
  {
    title: 'Courses Title',
    dataIndex: 'name',
    key: 'courses_title',
    render: (_: any) => <span className="text-capitalize">{_}</span>,
  },
  {
    title: 'Lessons Completed',
    dataIndex: 'current_lessons',
    key: 'current_lessons',
    render: (_: any, { current_lessons, total_lessons }: any) => (
      <Space size={2} style={{ width: 120 }}>
        <Typography.Text type="success">{current_lessons}</Typography.Text>
        <Typography.Text>/</Typography.Text>
        <Typography.Text>{total_lessons}</Typography.Text>
        <Typography.Text strong>
          ({Number(current_lessons / total_lessons).toFixed(2)}%)
        </Typography.Text>
      </Space>
    ),
  },
  {
    title: 'Duration (Start-End)',
    dataIndex: 'start_date',
    key: 'start_date',
    render: (_: any, { start_date, end_date }: any) => (
      <Space size="small" style={{ width: 200 }}>
        <Typography.Text>{start_date}</Typography.Text>
        <SwapRightOutlined />
        <Typography.Text>{end_date}</Typography.Text>
      </Space>
    ),
  },
  {
    title: 'Instructor',
    dataIndex: 'instructor_name',
    key: 'instructor_name',
    render: (_: any, { instructor_name, favorite_color }: any) => (
      <UserAvatar
        fullName={instructor_name}
        color={favorite_color}
        textWidth={120}
      />
    ),
  },
  {
    title: 'Prerequisites',
    dataIndex: 'prerequisites',
    key: 'prerequisites',
  },
];

type Props = {
  data?: LearningCourses[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const CoursesCard = ({ data, loading, error, ...others }: Props) => {
  return (
    <Card title="My courses" {...others}>
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : (
        <Table
          dataSource={data}
          columns={COURSES_COLUMNS}
          loading={loading}
          className="overflow-scroll"
        />
      )}
    </Card>
  );
};


src\components\dashboard\learning\CoursesCarousel\CoursesCarousel.tsx:
import {
  Alert,
  Button,
  Card as AntdCard,
  CardProps,
  Carousel,
  CarouselProps,
  Flex,
  Space,
  Tag,
  Typography,
} from 'antd';
import { RecommendedCourses } from '../../../../types';
import { ReactNode, useEffect, useRef, useState } from 'react';
import {
  BookOutlined,
  ClockCircleOutlined,
  LeftCircleOutlined,
  LockOutlined,
  RightCircleOutlined,
  TagFilled,
} from '@ant-design/icons';
import { Card, Loader } from '../../../index.ts';
import { useMediaQuery } from 'react-responsive';

import './styles.css';

type CardItemProps = {
  data: RecommendedCourses;
} & CardProps;

const CardItem = ({ data, ...others }: CardItemProps) => {
  const [levelColor, setLevelColor] = useState<string>();
  const { duration, category, name, lessons, level } = data;

  useEffect(() => {
    switch (level) {
      case 'beginner':
        setLevelColor('geekblue');
        break;
      case 'intermediate':
        setLevelColor('magenta');
        break;
      case 'advanced':
        setLevelColor('volcano');
        break;
      case 'expert':
        setLevelColor('red');
        break;
      default:
        setLevelColor('warning');
        break;
    }
  }, [level]);

  return (
    <AntdCard
      style={{
        margin: `0 4px`,
      }}
      {...others}
    >
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        <Typography.Title
          level={4}
          style={{
            margin: 0,
            textTransform: 'capitalize',
          }}
        >
          {name.slice(0, 30)}...
        </Typography.Title>
        <Space size="small">
          <Space size={4}>
            <BookOutlined />
            <Typography.Text>{lessons} Lessons</Typography.Text>
          </Space>
          <Typography.Text>-</Typography.Text>
          <Space size={4}>
            <ClockCircleOutlined />
            <Typography.Text>{duration} Hours</Typography.Text>
          </Space>
        </Space>
        <Flex wrap="wrap" gap="small">
          <Tag icon={<TagFilled />}>{category}</Tag>
          <Tag
            bordered={true}
            color={levelColor}
            style={{ textTransform: 'capitalize' }}
          >
            {level}
          </Tag>
        </Flex>
        <Button icon={<LockOutlined />} type="primary" block>
          Enroll Now
        </Button>
      </Space>
    </AntdCard>
  );
};

type Props = {
  data?: RecommendedCourses[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const CoursesCarousel = ({ data, loading, error, ...others }: Props) => {
  const sliderRef = useRef<any>();
  const isXlScreen = useMediaQuery({ maxWidth: 1200 });

  const settings: CarouselProps = {
    arrows: false,
    slidesToShow: 1,
    slidesToScroll: 1,
    infinite: true,
    dots: false,
    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 1,
          infinite: true,
          dots: true,
        },
      },
      {
        breakpoint: 769,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2,
          initialSlide: 2,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
  };

  const handlePrevious = (): void => {
    sliderRef?.current?.prev();
  };

  const handleNext = (): void => {
    sliderRef?.current?.next();
  };

  return (
    <Card
      title="Recommended for you"
      extra={
        <Space>
          {isXlScreen ? (
            <>
              <Button onClick={handlePrevious}>Previous</Button>
              <Button onClick={handleNext}>Next</Button>
            </>
          ) : (
            <>
              <Button onClick={handlePrevious} icon={<LeftCircleOutlined />} />
              <Button onClick={handleNext} icon={<RightCircleOutlined />} />
            </>
          )}
        </Space>
      }
      className="courses-carousel-card card"
      {...others}
    >
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <Carousel ref={sliderRef} {...settings}>
          {data?.map((d) => <CardItem key={d.id} data={d} />)}
        </Carousel>
      )}
    </Card>
  );
};


src\components\dashboard\learning\CoursesCarousel\styles.css:
.courses-carousel-card .ant-card-body {
  /*padding-bottom: 0;*/
}


src\components\dashboard\learning\ExamsCard\ExamsCard.tsx:
import { Alert, Button, CardProps, Flex, List, Typography } from 'antd';
import { Exam } from '../../../../types';
import { RightOutlined } from '@ant-design/icons';

import './styles.css';
import { Card } from '../../../index.ts';
import { ReactNode } from 'react';
import { useMediaQuery } from 'react-responsive';

type Props = {
  data?: Exam[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const ExamsCard = ({ data, loading, error, ...others }: Props) => {
  const isLarge = useMediaQuery({ maxWidth: 1024 });

  return (
    <Card
      title="Upcoming Exams"
      className="exam-card card"
      actions={[<Button>See all upcoming exams</Button>]}
      {...others}
    >
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : (
        <List
          itemLayout="vertical"
          size="large"
          pagination={{
            onChange: (page) => {
              console.log(page);
            },
            pageSize: 5,
            align: 'center',
          }}
          dataSource={data}
          renderItem={(item) => (
            <List.Item key={item.student_id}>
              <Flex align="center" justify="space-between">
                <Flex vertical={!isLarge} gap={!isLarge ? 'small' : 'middle'}>
                  <Typography.Title level={5} style={{ margin: 0 }}>
                    {item.course} - {item.course_code}
                  </Typography.Title>
                  <Typography.Text>Date: {item.exam_date}</Typography.Text>
                  <Typography.Text>
                    Duration: {item.exam_duration} mins
                  </Typography.Text>
                </Flex>
                <Button size="small" icon={<RightOutlined />} type="link" />
              </Flex>
            </List.Item>
          )}
          loading={loading}
        />
      )}
    </Card>
  );
};


src\components\dashboard\learning\ExamsCard\styles.css:
.exam-card .ant-card-body {
  padding: 0 0 1rem 0;
}


src\components\dashboard\learning\ProgressCard\ProgressCard.tsx:
import {
  Button,
  CardProps,
  Col,
  Dropdown,
  Flex,
  MenuProps,
  Row,
  Space,
  Typography,
} from 'antd';
import { RadialBar } from '@ant-design/charts';
import { DownOutlined } from '@ant-design/icons';
import { Card } from '../../../index.ts';

const RadialChart = () => {
  const data = [
    {
      name: 'Not Started',
      count: 805,
    },
    {
      name: 'In Progress',
      count: 1478,
    },
    {
      name: 'Completed',
      count: 7100,
    },
  ];

  const config = {
    data,
    height: 240,
    xField: 'name',
    yField: 'count',
    maxAngle: 270,
    radius: 1,
    innerRadius: 0.5,
    tooltip: {
      formatter: (datum: any) => {
        return {
          name: 'count',
          value: datum.count,
        };
      },
    },
    colorField: 'count',
    color: ({ count }: any) => {
      if (count > 5000) {
        return '#36c361';
      } else if (count > 1000) {
        return '#2194ff';
      }

      return '#ff4d4f';
    },
    barBackground: {},
    barStyle: {
      lineCap: 'round',
    },
    xAxis: {
      title: null, // Hide x-axis title
      label: null, // Hide x-axis labels
    },
  };

  // @ts-ignore
  return <RadialBar {...config} />;
};

const items: MenuProps['items'] = [
  {
    key: 'daily',
    label: 'Daily',
  },
  {
    key: 'weekly',
    label: 'Weekly',
  },
  {
    key: 'yearly',
    label: 'Yearly',
  },
];

type Props = CardProps;

export const ProgressCard = ({ ...others }: Props) => {
  return (
    <Card
      title="My Progress"
      extra={
        <Dropdown menu={{ items }} trigger={['click']}>
          <Button onClick={(e) => e.preventDefault()}>
            <Space>
              Weekly
              <DownOutlined />
            </Space>
          </Button>
        </Dropdown>
      }
      {...others}
    >
      <Flex vertical gap="middle">
        <RadialChart />
        <Typography.Paragraph style={{ textAlign: 'center' }}>
          Total hours: <b>10h 34min</b>
        </Typography.Paragraph>
        <Row>
          <Col span={8}>
            <div style={{ display: 'flex', gap: '4px' }}>
              <div
                style={{
                  height: '20px',
                  width: '8px',
                  backgroundColor: '#36c361',
                  borderRadius: '4px',
                }}
              />
              <Space direction="vertical" size={2}>
                <Typography.Text strong>7100/9383</Typography.Text>
                <Typography.Text>Completed</Typography.Text>
              </Space>
            </div>
          </Col>
          <Col span={8}>
            <div style={{ display: 'flex', gap: '4px', borderRadius: '4px' }}>
              <div
                style={{
                  height: '20px',
                  width: '8px',
                  backgroundColor: '#2194ff',
                  borderRadius: '4px',
                }}
              />
              <Space direction="vertical" size={2}>
                <Typography.Text strong>1478/9383</Typography.Text>
                <Typography.Text>In progress</Typography.Text>
              </Space>
            </div>
          </Col>
          <Col span={8}>
            <div style={{ display: 'flex', gap: '4px', borderRadius: '4px' }}>
              <div
                style={{
                  height: '20px',
                  width: '8px',
                  backgroundColor: '#ff4d4f',
                  borderRadius: '4px',
                }}
              />
              <Space direction="vertical" size={2}>
                <Typography.Text strong>805/9383</Typography.Text>
                <Typography.Text>Not started</Typography.Text>
              </Space>
            </div>
          </Col>
        </Row>
      </Flex>
    </Card>
  );
};


src\components\dashboard\learning\StatsCard\StatsCard.tsx:
import React from 'react';
import { CardProps, Flex, Progress, Typography } from 'antd';
import { Card } from '../../../index.ts';
import CountUp from 'react-countup';

type Props = {
  title: string;
  value: number;
  icon: any;
  color: string;
  progress: number;
} & CardProps;

export const StatsCard = ({
  color,
  icon,
  title,
  value,
  progress,
  ...others
}: Props) => {
  return (
    <Card {...others}>
      <Flex vertical gap="middle">
        {React.createElement(icon, { style: { fontSize: 30 } })}
        <Typography.Text className="m-0 text-capitalize">
          {title}
        </Typography.Text>
        <Typography.Title level={2} className="m-0">
          <CountUp end={value} />
        </Typography.Title>
        <Progress percent={progress} showInfo={false} strokeColor={color} />
      </Flex>
    </Card>
  );
};


src\components\dashboard\learning\StudyStatisticsCard\StudyStatisticsCard.tsx:
import { Alert, CardProps } from 'antd';
import { Heatmap } from '@ant-design/charts';
import { ReactNode, useEffect, useState } from 'react';
import * as _ from 'lodash';
import { Card, Loader } from '../../../index.ts';

type StudyStatistics = {
  id: string;
  value: number;
  category: string;
  month: string;
  total?: number;
};

type ColumnChartProps = { data: StudyStatistics[] };

const ColumnChart = ({ data }: ColumnChartProps) => {
  const [refinedData, setRefinedData] = useState<StudyStatistics[]>([]);

  useEffect(() => {
    const formattedData = _.sortBy(data, (item) => {
      // Map the month names to their corresponding numerical values for sorting
      const monthMap: { [key: string]: number } = {
        Jan: 1,
        Feb: 2,
        Mar: 3,
        Apr: 4,
        May: 5,
        Jun: 6,
        Jul: 7,
        Aug: 8,
        Sept: 9,
        Oct: 10,
        Nov: 11,
        Dec: 12,
      };
      // Use the numerical value for sorting
      return monthMap[item.month];
    });
    setRefinedData(formattedData);
  }, [data]);

  const config = {
    // width: 650,
    // height: 400,
    autoFit: true,
    data: refinedData,
    xField: 'month',
    yField: 'category',
    colorField: 'value',
    // color: ['#174c83', '#7eb6d4', '#efefeb', '#efa759', '#9b4d16'],
    meta: {
      'Month of Year': {
        type: 'cat',
      },
    },
  };

  // @ts-ignore
  return <Heatmap {...config} />;
};

type Props = {
  data?: StudyStatistics[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const StudyStatisticsCard = ({
  data,
  error,
  loading,
  ...others
}: Props) => {
  return (
    <Card title="Study statistics" {...others}>
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <ColumnChart data={data || []} />
      )}
    </Card>
  );
};


src\components\dashboard\logistics\index.ts:
export { StatsCard } from './StatsCard/StatsCard.tsx';
export { DeliveryTableCard } from './DeliveryTableCard/DeliveryTableCard.tsx';
export { DeliveryAnalyticsCard } from './DeliveryAnalyticsCard/DeliveryAnalyticsCard.tsx';
export { DailyPlanCard } from './DailyPlanCard/DailyPlanCard.tsx';
export { TruckListCard } from './TrucksListCard/TruckListCard.tsx';
export { DeliveryRequestCard } from './DeliveryRequestCard/DeliveryRequestCard.tsx';


src\components\dashboard\logistics\DailyPlanCard\DailyPlanCard.tsx:
import { Bar } from '@ant-design/charts';
import { CardProps } from 'antd';
import { Card } from '../../../index.ts';

type Plan = {
  type: string;
  value: number;
};

type BarProps = {
  data: Plan[];
};

const BarChart = ({ data }: BarProps) => {
  const config = {
    data,
    xField: 'value',
    yField: 'type',
    seriesField: 'type',
    legend: {
      position: 'top-left',
    },
  };
  // @ts-ignore
  return <Bar {...config} />;
};

type Props = {
  data?: Plan[];
} & CardProps;

export const DailyPlanCard = ({ data, ...others }: Props) => {
  return (
    <Card title="Daily activities" {...others}>
      <BarChart data={data || []} />
    </Card>
  );
};


src\components\dashboard\logistics\DeliveryAnalyticsCard\DeliveryAnalyticsCard.tsx:
import { Alert, CardProps } from 'antd';
import { Column } from '@ant-design/charts';
import { DeliveryAnalytics } from '../../../../types';
import { ReactNode, useEffect, useState } from 'react';
import * as _ from 'lodash';
import { Card, Loader } from '../../../index.ts';

type ChartProps = {
  data: DeliveryAnalytics[];
};

const MultiLineChart = ({ data }: ChartProps) => {
  const [refinedData, setRefinedData] = useState<DeliveryAnalytics[]>([]);

  useEffect(() => {
    const formattedData = _.sortBy(data, (item) => {
      // Map the month names to their corresponding numerical values for sorting
      const monthMap: { [key: string]: number } = {
        January: 1,
        February: 2,
        March: 3,
        April: 4,
        May: 5,
        June: 6,
        July: 7,
        August: 8,
        September: 9,
        October: 10,
        November: 11,
        December: 12,
      };
      // Use the numerical value for sorting
      return monthMap[item.month];
    });
    setRefinedData(formattedData);
  }, [data]);

  const config = {
    data: refinedData,
    isStack: true,
    xField: 'month',
    yField: 'value',
    seriesField: 'status',
    radius: 0.2,
    label: {
      // 可手动配置 label 数据标签位置
      position: 'top', // 'top', 'bottom', 'middle',
      offset: 10,
      style: {
        fill: 'transparent',
      },
    },
    interactions: [
      {
        type: 'active-region',
        enable: false,
      },
    ],
    connectedArea: {
      style: (oldStyle: any) => {
        return {
          fill: 'rgba(0,0,0,0.25)',
          stroke: oldStyle.fill,
          lineWidth: 0.5,
        };
      },
    },
    slider: {
      start: 0,
      end: 0.5,
    },
    barStyle: {
      lineCap: 'round',
    },
  };

  // @ts-ignore
  return <Column {...config} />;
};

type Props = {
  data?: DeliveryAnalytics[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const DeliveryAnalyticsCard = ({
  data,
  loading,
  error,
  ...others
}: Props) => {
  return (
    <Card title="Analytics" {...others}>
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <MultiLineChart data={data || []} />
      )}
    </Card>
  );
};


src\components\dashboard\logistics\DeliveryRequestCard\DeliveryRequestCard.tsx:
import { Badge, Button, CardProps, Flex, List, Space, Typography } from 'antd';
import { DeliveryRequest } from '../../../../types';
import { Card, UserAvatar } from '../../../index.ts';

import './styles.css';
import { ReactNode } from 'react';
import { CalendarOutlined } from '@ant-design/icons';

type Props = {
  data?: DeliveryRequest[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const DeliveryRequestCard = ({ data, ...others }: Props) => {
  return (
    <Card
      title="Recent request"
      className="delivery-request-card card"
      extra={<Button>See all</Button>}
      {...others}
    >
      <List
        size="large"
        className="delivery-request-list"
        pagination={{
          onChange: (page) => {
            console.log(page);
          },
          pageSize: 5,
          align: 'center',
        }}
        dataSource={data}
        renderItem={(item) => (
          <List.Item key={item.id}>
            <Space style={{ justifyContent: 'space-between', width: '100%' }}>
              <Flex vertical gap="small">
                <Typography.Text strong style={{ textTransform: 'capitalize' }}>
                  {item.name}
                </Typography.Text>
                <Badge
                  color="geekblue"
                  text={
                    <Typography.Text>
                      From: {item.delivery_location}
                    </Typography.Text>
                  }
                />
                <Badge
                  color="magenta"
                  text={
                    <Typography.Text>
                      To: {item.pickup_location}
                    </Typography.Text>
                  }
                />
              </Flex>
              <Flex vertical align="flex-end" gap="small">
                <Flex gap={4} align="center">
                  <CalendarOutlined />
                  <Typography.Text>{item.delivery_date}</Typography.Text>
                </Flex>
                <UserAvatar
                  fullName={item.driver_name}
                  align="flex-end"
                  textWidth="auto"
                />
                <Flex gap={4}>
                  <Typography.Text>Contact:</Typography.Text>
                  <Typography.Link href={`tel:${item.contact_number}`}>
                    {item.contact_number}
                  </Typography.Link>
                </Flex>
              </Flex>
            </Space>
          </List.Item>
        )}
      />
    </Card>
  );
};


src\components\dashboard\logistics\DeliveryRequestCard\styles.css:
.delivery-request-card .ant-card-body {
  padding: 0 0 1rem 0;
}

.delivery-request-list .ant-card-body {
  padding: 1rem;
}


src\components\dashboard\logistics\DeliveryTableCard\DeliveryTableCard.tsx:
import { Alert, Button, CardProps, Table, TableProps } from 'antd';
import { TruckDelivery } from '../../../../types';
import { ReactNode, useState } from 'react';
import { ColumnsType } from 'antd/es/table';
import { Card, UserAvatar } from '../../../index.ts';
import { numberWithCommas } from '../../../../utils';

type TabKeys = 'all' | 'in transit' | 'delayed' | 'delivered' | string;

type TabList = {
  key: TabKeys;
  tab: string;
}[];

const TAB_LIST: TabList = [
  {
    key: 'all',
    tab: 'All',
  },
  {
    key: 'in transit',
    tab: 'In Transit',
  },
  {
    key: 'delivered',
    tab: 'Delivered',
  },
  {
    key: 'delayed',
    tab: 'Delayed',
  },
];

const DELIVERY_TABLE_COLUMNS: ColumnsType<TruckDelivery> = [
  {
    title: 'Id',
    dataIndex: 'shipment_id',
    key: 'shipment_id',
    render: (text: any) => text.split('-')[0],
  },
  {
    title: 'Destination',
    dataIndex: 'destination_city',
    key: 'destination',
  },
  {
    title: 'Customer',
    dataIndex: 'customer_name',
    key: 'customer_name',
  },
  {
    title: 'Driver',
    dataIndex: 'driver_name',
    key: 'driver_name',
    render: (_: any) => <UserAvatar fullName={_} />,
  },
  {
    title: 'Status',
    dataIndex: 'delivery_status',
    key: 'delivery_status',
  },
  {
    title: 'Cost',
    dataIndex: 'shipment_cost',
    key: 'shipment_cost',
    render: (_: any) => <span>${numberWithCommas(_)}</span>,
  },
  {
    title: 'Delivery date',
    dataIndex: 'shipment_date',
    key: 'shipment_date',
  },
];

type DeliveryTableProps = {
  data?: TruckDelivery[];
} & TableProps<any>;

const DeliveryTable = ({ data, ...others }: DeliveryTableProps) => {
  return (
    <Table
      dataSource={data || []}
      columns={DELIVERY_TABLE_COLUMNS}
      className="overflow-scroll"
      {...others}
    />
  );
};

type Props = {
  data?: TruckDelivery[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const DeliveryTableCard = ({
  data,
  loading,
  error,
  ...others
}: Props) => {
  const [activeTabKey, setActiveTabKey] = useState<TabKeys>('all');

  const onTabChange = (key: string) => {
    setActiveTabKey(key);
  };

  return (
    <Card
      title="Deliveries"
      extra={<Button>See all</Button>}
      tabList={TAB_LIST}
      activeTabKey={activeTabKey}
      onTabChange={onTabChange}
      {...others}
    >
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : (
        <DeliveryTable
          data={
            activeTabKey !== 'all'
              ? data?.filter(
                  (d) => d.delivery_status.toLowerCase() === activeTabKey
                )
              : data || []
          }
          loading={loading}
        />
      )}
    </Card>
  );
};


src\components\dashboard\logistics\StatsCard\StatsCard.tsx:
import React from 'react';
import { CardProps, Flex, Typography } from 'antd';
import { ArrowDownOutlined, ArrowUpOutlined } from '@ant-design/icons';
import { green, red } from '@ant-design/colors';
import { Card } from '../../../index.ts';
import CountUp from 'react-countup';

type Props = {
  title: string;
  value: number;
  diff: number;
  icon: any;
} & CardProps;

export const StatsCard = ({ icon, title, value, diff, ...others }: Props) => {
  return (
    <Card {...others}>
      <Flex vertical gap="middle" style={{ width: '100%' }}>
        {React.createElement(icon, { style: { fontSize: 30 } })}
        <Typography.Text style={{ textTransform: 'capitalize' }}>
          {title}
        </Typography.Text>
        <Flex gap="small" align="center" justify="space-between">
          <Typography.Title level={2} className="m-0">
            <CountUp end={value} />
          </Typography.Title>
          <Typography.Text
            strong
            style={{ color: diff > 0 ? green[5] : red[5] }}
          >
            {diff}%&nbsp;
            {diff > 0 ? <ArrowUpOutlined /> : <ArrowDownOutlined />}
          </Typography.Text>
        </Flex>
      </Flex>
    </Card>
  );
};


src\components\dashboard\logistics\TrucksListCard\styles.css:
.available-tucks-card .ant-card-body {
  padding: 0 0 1rem 0;
}

.available-tucks-card .ant-list-item {
  /*padding: 0;*/
}


src\components\dashboard\logistics\TrucksListCard\TruckListCard.tsx:
import {
  Alert,
  Badge,
  Button,
  CardProps,
  Col,
  List,
  Progress,
  Row,
  Space,
  Typography,
} from 'antd';
import { Truck } from '../../../../types';
import { Card } from '../../../index.ts';
import { ReactNode } from 'react';

import './styles.css';

type Props = {
  data?: Truck[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const TruckListCard = ({ data, loading, error, ...others }: Props) => {
  return (
    <Card
      title="Available Trucks"
      extra={<Button>See All</Button>}
      className="available-tucks-card card"
      {...others}
    >
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : (
        <List
          itemLayout="vertical"
          className="available-truck-list"
          size="large"
          pagination={{
            onChange: (page) => {
              console.log(page);
            },
            pageSize: 5,
            align: 'center',
          }}
          dataSource={data}
          renderItem={(item) => (
            <List.Item key={item.truck_id}>
              <Space style={{ marginBottom: '.5rem' }}>
                <Typography.Text strong style={{ textTransform: 'uppercase' }}>
                  {item.truck_id.split('-')[0]}
                </Typography.Text>
                <Badge
                  status={
                    item.status.toLowerCase() === 'delivered'
                      ? 'success'
                      : item.status.toLowerCase() === 'in transit'
                        ? 'processing'
                        : 'warning'
                  }
                  text={
                    <span style={{ textTransform: 'capitalize' }}>
                      {item.status}
                    </span>
                  }
                />
              </Space>
              <Row gutter={16}>
                <Col span={10}>
                  <Space direction="vertical">
                    <Badge
                      color="purple"
                      text={<Typography.Text>{item.origin}</Typography.Text>}
                    />
                    <Badge
                      color="cyan"
                      text={
                        <Typography.Text>{item.destination}</Typography.Text>
                      }
                    />
                  </Space>
                </Col>
                <Col span={6}>
                  <Space direction="vertical">
                    <Typography.Text>Make: {item.make}</Typography.Text>
                    <Typography.Text>Model: {item.model}</Typography.Text>
                  </Space>
                </Col>
                <Col span={5}>
                  <Space direction="vertical">
                    <Typography.Text strong>{item.mileage} km</Typography.Text>
                    <Typography.Text>Distance</Typography.Text>
                  </Space>
                </Col>
                <Col span={1}>
                  <Progress type="circle" percent={item.progress} size={48} />
                </Col>
              </Row>
            </List.Item>
          )}
          loading={loading}
        />
      )}
    </Card>
  );
};


src\components\dashboard\marketing\index.ts:
export { StatsCard } from './StatsCard/StatsCard.tsx';
export { VisitorsChartCard } from './VisitorsChartCard/VisitorsChartCard.tsx';
export { SocialStatsCard } from './SocialStatsCard/SocialStatsCard.tsx';
export { CampaignsActivity } from './CampaignsActivity/CampaignsActivity.tsx';
export { CampaignsAdsCard } from './CampaignsAdsCard/CampaignsAdsCard.tsx';
export { AudienceLocationChart } from './AudienceLocationChart/AudienceLocationChart.tsx';


src\components\dashboard\marketing\AudienceLocationChart\AudienceLocationChart.tsx:
import { CirclePacking } from '@ant-design/charts';
import { Button, CardProps, Popover } from 'antd';
import { Card } from '../../../index.ts';
import { QuestionOutlined } from '@ant-design/icons';

const CirclePackingChart = () => {
  const data = {
    name: 'root',
    children: [
      {
        name: 'US',
        value: 1046790,
      },
      {
        name: 'China',
        value: 1039358,
      },
      {
        name: 'Canada',
        value: 461880,
      },
      {
        name: 'France',
        value: 308136,
      },
      {
        name: 'India',
        value: 270578,
      },
      {
        name: 'Germany',
        value: 226334,
      },
      {
        name: 'UK',
        value: 197342,
      },
      {
        name: 'Brazil',
        value: 189739,
      },
      {
        name: 'South Africa',
        value: 175272,
      },
      {
        name: 'Spain',
        value: 150621,
      },
      {
        name: 'Russia',
        value: 138255,
      },
      {
        name: 'Egypt',
        value: 121216,
      },
      {
        name: 'Australia',
        value: 119912,
      },
      {
        name: 'Japan',
        value: 102488,
      },
      {
        name: 'New Zealand',
        value: 90157,
      },
      {
        name: 'Netherlands',
        value: 59307,
      },
      {
        name: 'Italy',
        value: 58999,
      },
      {
        name: 'Switzerland',
        value: 52776,
      },
      {
        name: 'Sweden',
        value: 50800,
      },
      {
        name: 'Greece',
        value: 22614,
      },
      {
        name: 'Morocco',
        value: 22026,
      },
      {
        name: 'Mexico',
        value: 19706,
      },
      {
        name: 'Saudi Arabia',
        value: 18274,
      },
      {
        name: 'Poland',
        value: 16108,
      },
      {
        name: 'Algeria',
        value: 12535,
      },
      {
        name: 'Israel',
        value: 12240,
      },
      {
        name: 'Argentina',
        value: 1992,
      },
      {
        name: 'Portugal',
        value: 36,
      },
    ],
  };
  const config = {
    autoFit: true,
    padding: 0,
    data,
    sizeField: 'r',
    color: 'rgb(252, 253, 191)-rgb(231, 82, 99)-rgb(183, 55, 121)',
    // 自定义 label 样式
    label: {
      formatter: ({ name }: any) => {
        return name !== 'root' ? name : '';
      },
      // 偏移
      offsetY: 8,
      style: {
        fontSize: 12,
        textAlign: 'center',
        fill: 'rgba(0,0,0,0.65)',
      },
    },
    legend: false,
  };

  // @ts-ignore
  return <CirclePacking {...config} />;
};

type Props = CardProps;

export const AudienceLocationChart = ({ ...others }: Props) => {
  return (
    <Card
      title="Audience by location"
      extra={
        <Popover content="View your audience data by their location">
          <Button icon={<QuestionOutlined />} type="text" />
        </Popover>
      }
      {...others}
    >
      <CirclePackingChart />
    </Card>
  );
};


src\components\dashboard\marketing\CampaignsActivity\CampaignsActivity.tsx:
import { Button, Calendar, CalendarProps, CardProps, Popover } from 'antd';
import type { Dayjs } from 'dayjs';
import { QuestionOutlined } from '@ant-design/icons';
import { Card } from '../../../index.ts';

const onPanelChange = (value: Dayjs, mode: CalendarProps<Dayjs>['mode']) => {
  console.log(value.format('YYYY-MM-DD'), mode);
};

type Props = CardProps;

export const CampaignsActivity = ({ ...others }: Props) => {
  return (
    <Card
      title="Campaign activity"
      extra={
        <Popover content="Check the campaign activity schedule">
          <Button icon={<QuestionOutlined />} type="text" />
        </Popover>
      }
      {...others}
    >
      <Calendar fullscreen={false} onPanelChange={onPanelChange} />
    </Card>
  );
};


src\components\dashboard\marketing\CampaignsAdsCard\CampaignsAdsCard.tsx:
import {
  Alert,
  Button,
  CardProps,
  Popover,
  Space,
  Table,
  TableColumnsType,
} from 'antd';
import { Card } from '../../../index.ts';
import {
  FacebookFilled,
  InstagramFilled,
  LinkedinFilled,
  QuestionCircleFilled,
  QuestionOutlined,
  TwitterCircleFilled,
} from '@ant-design/icons';
import { CampaignAds } from '../../../../types';
import { createElement, ReactNode, useEffect, useState } from 'react';
import * as _ from 'lodash';
import { numberWithCommas } from '../../../../utils';

type ParentDataType = {
  id: string;
  ad_source: string;
  items: CampaignAds[];
  total_impressions: number | string;
  total_clicks: number | string;
  total_cost: number | string;
  total_revenue: number | string;
};

type ExpandedDataType = CampaignAds;

const PARENT_TABLE_COLUMNS: TableColumnsType<ParentDataType> = [
  {
    title: 'Source',
    dataIndex: 'ad_source',
    key: 'total_marketing_source',
    render: (_) => {
      const social = _.toLowerCase();
      let icon: any;

      if (social.includes('facebook')) {
        icon = FacebookFilled;
      } else if (social.includes('linkedin')) {
        icon = LinkedinFilled;
      } else if (social.includes('twitter')) {
        icon = TwitterCircleFilled;
      } else if (social.includes('instagram')) {
        icon = InstagramFilled;
      } else {
        icon = QuestionCircleFilled;
      }

      return (
        <Space>
          {createElement(icon, { style: { fontSize: 16 } })}
          <span>{_}</span>
        </Space>
      );
    },
  },
  {
    title: 'Impressions',
    dataIndex: 'total_impressions',
    key: 'total_marketing_impression',
    render: (_: any) => <span>{numberWithCommas(Number(_))}</span>,
  },
  {
    title: 'Cost',
    dataIndex: 'total_cost',
    key: 'total_marketing_cost',
    render: (_: any) => <span>$ {numberWithCommas(Number(_))}</span>,
  },
  {
    title: 'Revenue',
    dataIndex: 'total_revenue',
    key: 'marketing_revenue',
    render: (_: any) => <span>$ {numberWithCommas(Number(_))}</span>,
  },
  {
    title: 'Clicks',
    dataIndex: 'total_clicks',
    key: 'total_marketing_clicks',
    render: (_: any) => <span>{numberWithCommas(Number(_))}</span>,
  },
];

const CHILD_TABLE_COLUMNS: TableColumnsType<ExpandedDataType> = [
  {
    title: 'Impressions',
    dataIndex: 'impressions',
    key: 'marketing_impression',
    render: (_: any) => <span>{numberWithCommas(Number(_))}</span>,
  },
  {
    title: 'Cost',
    dataIndex: 'cost',
    key: 'marketing_cost',
    render: (_: any) => <span>$ {numberWithCommas(Number(_))}</span>,
  },
  {
    title: 'Revenue',
    dataIndex: 'revenue',
    key: 'marketing_revenue',
    render: (_: any) => <span>$ {numberWithCommas(Number(_))}</span>,
  },
  {
    title: 'Clicks',
    dataIndex: 'clicks',
    key: 'marketing_clicks',
    render: (_: any) => <span>{numberWithCommas(Number(_))}</span>,
  },
  {
    title: 'Conversion rate',
    dataIndex: 'conversion_rate',
    key: 'conversion_rate',
    render: (_: any) => <span>{_}%</span>,
  },
  {
    title: 'ROI',
    dataIndex: 'roi',
    key: 'marketing_roi',
    render: (_: any) => <span>{_}%</span>,
  },
];

type ExpandedProps = { data: CampaignAds[] };

export const ExpandedRowRender = ({ data }: ExpandedProps) => {
  return (
    <Table
      columns={CHILD_TABLE_COLUMNS}
      dataSource={data}
      pagination={{
        pageSize: 5,
        position: ['bottomRight'],
      }}
    />
  );
};

type Props = {
  data?: CampaignAds[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const CampaignsAdsCard = ({ error, data, ...others }: Props) => {
  const [groupedData, setGroupedData] = useState<ParentDataType[]>([]);

  useEffect(() => {
    const dd = _.chain(data)
      .groupBy('ad_source')
      .map((items: CampaignAds[], source: string) => ({
        id: source,
        ad_source: source,
        items,
        total_impressions: _.sumBy(items, 'impressions').toFixed(2),
        total_clicks: _.sumBy(items, 'clicks').toFixed(2),
        total_cost: _.sumBy(items, 'cost').toFixed(2),
        total_revenue: _.sumBy(items, 'revenue').toFixed(2),
      }))
      .value();

    setGroupedData(dd);
  }, [data]);

  return error ? (
    <Alert
      message="Error"
      description={error.toString()}
      type="error"
      showIcon
    />
  ) : (
    <Card
      title="Campaign performance by source"
      extra={
        <Popover content="Marketing data by several ads resources">
          <Button icon={<QuestionOutlined />} type="text" />
        </Popover>
      }
      {...others}
    >
      <Table
        dataSource={groupedData}
        columns={PARENT_TABLE_COLUMNS}
        rowKey={(record) => record.id}
        expandable={{
          expandedRowRender: (record) => (
            <ExpandedRowRender data={record.items} />
          ),
        }}
        className="overflow-scroll"
      />
    </Card>
  );
};


src\components\dashboard\marketing\SocialStatsCard\SocialStatsCard.tsx:
import {
  Card as AntdCard,
  CardProps,
  Flex,
  List,
  Space,
  Tag,
  Typography,
} from 'antd';
import {
  FacebookFilled,
  InstagramFilled,
  LinkedinFilled,
  TwitterOutlined,
  YoutubeFilled,
} from '@ant-design/icons';
import { Card } from '../../../index.ts';
import { createElement } from 'react';
import CountUp from 'react-countup';

const SOCIALS_DATA = [
  {
    icon: FacebookFilled,
    title: 'facebook',
    diff: 12.3,
    value: 216869,
  },
  {
    icon: InstagramFilled,
    title: 'instagram',
    diff: 4.8,
    value: 978342,
  },
  {
    icon: TwitterOutlined,
    title: 'twitter',
    diff: -2.4,
    value: 567323,
  },
  {
    icon: LinkedinFilled,
    title: 'linkedIn',
    diff: 3.79,
    value: 738382,
  },
  {
    icon: YoutubeFilled,
    title: 'youtube',
    diff: -5.3,
    value: 892123,
  },
];

type Props = CardProps;

export const SocialStatsCard = ({ ...others }: Props) => (
  <Card title="Social media analytics" {...others}>
    <List
      grid={{
        gutter: 16,
        xs: 1,
        sm: 1,
        md: 2,
        lg: 2,
        xl: 2,
        xxl: 2,
      }}
      dataSource={SOCIALS_DATA}
      renderItem={(item, i) => (
        <List.Item>
          <AntdCard key={`${item.title}-${i}`} hoverable={false}>
            <Flex vertical gap="middle" justify="center">
              <Flex align="center" justify="space-between">
                <Space>
                  {createElement(item.icon)}
                  <Typography.Text className="text-capitalize">
                    {item.title}
                  </Typography.Text>
                </Space>
                <Tag color={item.diff < 0 ? 'red-inverse' : 'green-inverse'}>
                  {item.diff}%
                </Tag>
              </Flex>
              <Flex gap="small" align="flex-end">
                <Typography.Title level={3} className="m-0">
                  <CountUp end={item.value} />
                </Typography.Title>
                <Typography.Text color="secondary">visitors</Typography.Text>
              </Flex>
            </Flex>
          </AntdCard>
        </List.Item>
      )}
    />
  </Card>
);


src\components\dashboard\marketing\StatsCard\StatsCard.tsx:
import { CardProps, Col, Flex, Row, Tag, Typography } from 'antd';
import { TinyColumn } from '@ant-design/charts';
import { Card } from '../../../index.ts';
import CountUp from 'react-countup';

type ChartData = [number, number, number, number];

type StatsColumnChartProps = {
  data: ChartData;
  color?: string;
};

const ColumnChart = ({ data, color }: StatsColumnChartProps) => {
  const brandColor = color || '#5B8FF9';
  const config = {
    height: 64,
    autoFit: true,
    data,
    color: brandColor,
    tooltip: {
      customContent: function (x: any, data: any) {
        return `NO.${x}: ${data[0]?.data?.y.toFixed(2)}`;
      },
    },
  };
  return <TinyColumn {...config} />;
};

type Props = {
  title: string;
  value: number | string;
  data: ChartData;
  diff: number;
  asCurrency?: boolean;
} & CardProps;

export const StatsCard = ({
  data,
  diff,
  title,
  value,
  asCurrency,
  ...others
}: Props) => {
  return (
    <Card {...others}>
      <Flex vertical>
        <Typography.Text className="text-capitalize m-0">
          {title}
        </Typography.Text>
        <Row>
          <Col span={14}>
            <Typography.Title level={2}>
              {typeof value === 'number' ? (
                <>
                  {asCurrency && <span>$</span>}
                  <CountUp end={value} />
                </>
              ) : (
                value
              )}
            </Typography.Title>
          </Col>
          <Col span={10}>
            <ColumnChart data={data} />
          </Col>
        </Row>
        <Flex align="center">
          <Tag color={diff < 0 ? 'red' : 'green'}>{diff}%</Tag>
          <Typography.Text>compared to last month.</Typography.Text>
        </Flex>
      </Flex>
    </Card>
  );
};


src\components\dashboard\marketing\VisitorsChartCard\VisitorsChartCard.tsx:
import { Button, CardProps } from 'antd';
import { RightOutlined } from '@ant-design/icons';
import { Area } from '@ant-design/charts';
import { Card } from '../../../index.ts';

const AreaChart = () => {
  const data = [
    {
      timePeriod: '1 Aug',
      value: 6789,
    },
    {
      timePeriod: '2 Aug',
      value: 4123,
    },
    {
      timePeriod: '3 Aug',
      value: 7142,
    },
    {
      timePeriod: '4 Aug',
      value: 8461,
    },
    {
      timePeriod: '5 Aug',
      value: 10393,
    },
    {
      timePeriod: '6 Aug',
      value: 20381,
    },
    {
      timePeriod: '7 Aug',
      value: 19381,
    },
    {
      timePeriod: '8 Aug',
      value: 5693,
    },
    {
      timePeriod: '9 Aug',
      value: 11283,
    },
    {
      timePeriod: '10 Aug',
      value: 17621,
    },
  ];

  const config = {
    data,
    xField: 'timePeriod',
    yField: 'value',
    xAxis: {
      range: [0, 1],
    },
    smooth: true,
  };

  return <Area {...config} />;
};

type Props = CardProps;

export const VisitorsChartCard = ({ ...others }: Props) => {
  return (
    <Card
      title="Website visitor traffic and analytics"
      extra={
        <Button>
          More details <RightOutlined />
        </Button>
      }
      {...others}
    >
      <AreaChart />
    </Card>
  );
};


src\components\dashboard\projects\index.ts:
export { ClientsTable } from './ClientsTable/ClientsTable.tsx';
export { ProjectsCountCard } from './ProjectsCountCard/ProjectsCountCard.tsx';
export { ProjectsTable } from './ProjectsTables/ProjectsTable.tsx';


src\components\dashboard\projects\ClientsTable\ClientsTable.tsx:
import { Table, TableProps, Typography } from 'antd';
import { Clients } from '../../../../types';
import { UserAvatar } from '../../../index.ts';

const COLUMNS = [
  {
    title: 'Client Name',
    dataIndex: 'client_name',
    key: 'c_name',
    render: (_: any, { first_name, last_name }: Clients) => (
      <UserAvatar fullName={`${first_name} ${last_name}`} />
    ),
  },
  {
    title: 'Amount',
    dataIndex: 'total_price',
    key: 'client_amount',
    render: (_: any) => <Typography.Text>${_}</Typography.Text>,
  },
];

type Props = {
  data: Clients[];
} & TableProps<any>;

export const ClientsTable = ({ data, ...others }: Props) => (
  <Table
    dataSource={data}
    columns={COLUMNS}
    key="client_table"
    size="middle"
    className="overflow-scroll"
    {...others}
  />
);


src\components\dashboard\projects\ProjectsCountCard\ProjectsCountCard.tsx:
import {
  Card,
  CardProps,
  Col,
  Progress,
  ProgressProps,
  Row,
  Space,
  SpaceProps,
  Statistic,
  Tooltip,
} from 'antd';
import ProjectsData from '../../../../../public/mocks/Projects.json';
import './styles.scss';

const PROGRESS_PROPS: ProgressProps = {
  type: 'circle',
  showInfo: false,
  size: 24,
  style: {
    paddingBottom: '.35rem',
  },
};

const SPACE_PROPS: SpaceProps = {
  align: 'end',
};

type Props = CardProps;

export const ProjectsCountCard = ({ ...others }: Props) => {
  const completed = ProjectsData.filter((_) => _.status === 'completed'),
    inProgress = ProjectsData.filter((_) => _.status === 'in progress'),
    onHold = ProjectsData.filter((_) => _.status === 'on hold');

  return (
    <Card
      title="Project stats"
      bodyStyle={{
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'space-between',
        height: '80%',
      }}
      className="card"
      style={{
        height: '100%',
      }}
      {...others}
    >
      <Row gutter={16}>
        <Col span={8}>
          <Space {...SPACE_PROPS}>
            <Statistic title="Active" value={inProgress.length} />
            <Tooltip
              title={`${inProgress.length} / ${ProjectsData.length} active`}
            >
              <Progress
                percent={Number(
                  ((inProgress.length / ProjectsData.length) * 100).toFixed(2)
                )}
                {...PROGRESS_PROPS}
              />
            </Tooltip>
          </Space>
        </Col>
        <Col span={8}>
          <Space {...SPACE_PROPS}>
            <Statistic title="On Hold" value={onHold.length} />
            <Tooltip
              title={`${onHold.length} / ${ProjectsData.length} on hold`}
            >
              <Progress
                percent={Number(
                  ((onHold.length / ProjectsData.length) * 100).toFixed(2)
                )}
                {...PROGRESS_PROPS}
              />
            </Tooltip>
          </Space>
        </Col>
        <Col span={8}>
          <Space {...SPACE_PROPS}>
            <Statistic title="Completed" value={completed.length} />
            <Tooltip
              title={`${completed.length} / ${ProjectsData.length} completed`}
            >
              <Progress
                percent={Number(
                  ((completed.length / ProjectsData.length) * 100).toFixed(2)
                )}
                {...PROGRESS_PROPS}
              />
            </Tooltip>
          </Space>
        </Col>
      </Row>
    </Card>
  );
};


src\components\dashboard\projects\ProjectsCountCard\styles.scss:


src\components\dashboard\projects\ProjectsTables\ProjectsTable.tsx:
// src\components\dashboard\projects\ProjectsTables\ProjectsTable.tsx
import {
  Badge,
  BadgeProps,
  Table,
  TableProps,
  Tag,
  TagProps,
  Typography,
} from 'antd';
import { Projects } from '../../../../types';
import { ColumnsType } from 'antd/es/table'; // Import ColumnsType

const COLUMNS: ColumnsType<Projects> = [ // Specify ColumnsType<Projects>
  {
    title: 'Name',
    dataIndex: 'project_name',
    key: 'proj_name',
    render: (_: any, { project_name }: Projects) => ( // Ensure record is of type Projects
      <Typography.Paragraph
        ellipsis={{ rows: 1 }}
        className="text-capitalize"
        style={{ marginBottom: 0 }}
      >
        {project_name?.substring(0, 20)}  // Optional chaining for safety
      </Typography.Paragraph>
    ),
  },
  {
    title: 'Client',
    dataIndex: 'client_name',
    key: 'proj_client_name',
  },
  {
    title: 'Category',
    dataIndex: 'project_category',
    key: 'proj_category',
    render: (_: any) => <span className="text-capitalize">{_}</span>,
  },
  {
    title: 'Priority',
    dataIndex: 'priority',
    key: 'proj_priority',
    render: (_: any) => {
      let color: TagProps['color'];

      if (_ === 'low') {
        color = 'cyan';
      } else if (_ === 'medium') {
        color = 'geekblue';
      } else {
        color = 'magenta';
      }

      return (
        <Tag color={color} className="text-capitalize">
          {_}
        </Tag>
      );
    },
  },
  {
    title: 'Status',
    dataIndex: 'status',
    key: 'proj_status',
    render: (_: any) => {
      let status: BadgeProps['status'];

      if (_ === 'on hold') {
        status = 'default';
      } else if (_ === 'finished') { // Đã sửa thành finished
        status = 'success';
      } else {
        status = 'processing';
      }

      return <Badge status={status} text={_} className="text-capitalize" />;
    },
  },
  {
    title: 'Team size',
    dataIndex: 'team_size',
    key: 'proj_team_size',
  },
  {
    title: 'Duration',
    dataIndex: 'project_duration',
    key: 'project_duration',
  },
  {
    title: 'Start date',
    dataIndex: 'start_date',
    key: 'proj_start_date',
  },
];

type Props = {
  data: Projects[];
} & TableProps<Projects>; // Fixed type to TableProps<Projects>

export const ProjectsTable = ({ data, ...others }: Props) => {
  return (
    <Table
      rowKey="project_id" // Thêm rowKey="project_id"
      dataSource={data}
      columns={COLUMNS}
      className="overflow-scroll"
      {...others}
    />
  );
};

src\components\dashboard\shared\index.ts:
export { RevenueCard } from './RevenueCard/RevenueCard.tsx';
export { PostsCard } from './PostsCard/PostsCard.tsx';
export { ProjectsCard } from './ProjectsCard/ProjectsCard.tsx';
export {EventsCard } from './EventsCard/EventsCard.tsx';

src\components\dashboard\shared\EventsCard\EventsCard.tsx:
// src\components\dashboard\shared\EventsCard\EventsCard.tsx
import {
  Card as AntdCard,
  CardProps,
  Descriptions,
  DescriptionsProps,
  Flex,
  Tooltip,
  Typography,
} from 'antd';
import {
  CalendarOutlined,
  UsergroupAddOutlined,
} from '@ant-design/icons';

import './styles.css';
import { Events } from '../../../../types';

const { Text, Title } = Typography;

type Props = {
  event?: Events; // Make event prop optional
  size?: 'small' | 'default';
} & CardProps;

export const EventsCard = (props: Props) => {
  const {
    size,
    event, // Event can be potentially undefined
    ...others
  } = props;

  // Check if event is defined before accessing its properties
  const items: DescriptionsProps['items'] = event ? [
    {
      key: 'event_name',
      label: 'Title',
      children: (
        <span className="text-capitalize">{event.name?.slice(0, 36)}...</span> // Use optional chaining
      ),
      span: 24,
    },
    {
      key: 'event_id',
      label: 'ID',
      children: event.id,
      span: 24,
    },
    {
      key: 'event_type',
      label: 'Category', // Changed label to "Category"
      children: <span className="text-capitalize">{event.categoryId}</span>, // Changed to categoryId
      span: 24,
    },
    {
      key: 'project_location',
      label: 'Location',
      children: event.location,
      span: 24,
    },
    {
      key: 'project_status',
      label: 'Status',
      children: <span className="text-capitalize">{event.status}</span>,
    },
    {
      key: 'team_size',
      label: <UsergroupAddOutlined />,
      children: (
        <Tooltip title="Team size">
          <Typography.Text>{event.maxParticipants}</Typography.Text>
        </Tooltip>
      ),
    },
    {
      key: 'start_date',
      label: <CalendarOutlined />,
      children: (
        <Tooltip title="Project date">
          <Typography.Text>{event.startDate} - {event.endDate}</Typography.Text>
        </Tooltip>
      ),
    },
  ] : []; // Render empty descriptions if event is undefined


  return size === 'small' ? (
    <AntdCard
      bordered
      hoverable={true}
      className="project-small-card"
      {...others}
    >
      <Title level={5} className="text-capitalize m-0">
        {event?.name?.slice(0, 15)} {/* Use optional chaining here too */}
      </Title>
      <br />
      <Flex wrap="wrap" gap="small" className="text-capitalize">
        <Text>
          Category: <b>{event?.categoryId},</b> {/* Changed to categoryId */}
        </Text>
        <Text>
          Location: <b>{event?.location}</b>
        </Text>
      </Flex>
    </AntdCard>
  ) : (
    <AntdCard bordered hoverable={true} {...others}>
      <Descriptions
        items={items}
        column={{ xxl: 2, xl: 2, lg: 2, md: 1, sm: 1, xs: 1 }}
      />
    </AntdCard>
  );
};

src\components\dashboard\shared\EventsCard\styles.css:
.project-small-card .ant-card-body {
}


src\components\dashboard\shared\PostsCard\PostsCard.tsx:
import {
  Alert,
  Avatar,
  Button,
  CardProps,
  Col,
  Divider,
  Flex,
  Image,
  List,
  Row,
  Space,
  theme,
  Typography,
} from 'antd';
import { Posts } from '../../../../types';
import {
  CommentOutlined,
  DeleteFilled,
  EditFilled,
  LikeOutlined,
  ShareAltOutlined,
} from '@ant-design/icons';
import React, { ReactNode } from 'react';
import { getNameInitials } from '../../../../utils';
import { Card, Loader } from '../../../index.ts';

import './styles.css';

const IconText = ({
  icon,
  text,
}: {
  icon: React.FC;
  text: string | number;
}) => (
  <Space>
    {React.createElement(icon)}
    {text}
  </Space>
);

type Props = {
  as: 'scheduled' | 'active';
  data?: Posts[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const PostsCard = ({ as, data, error, loading, ...others }: Props) => {
  const { token } = theme.useToken();

  return (
    <Card className="posts-lists-card card" {...others}>
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <List
          itemLayout="vertical"
          size="large"
          pagination={{
            onChange: (page) => {
              console.log(page);
            },
            pageSize: 5,
            align: 'center',
          }}
          dataSource={data}
          renderItem={(item: Posts) =>
            as === 'active' ? (
              <List.Item
                key={item.title}
                actions={[
                  <IconText
                    icon={LikeOutlined}
                    text={item.likes_count}
                    key="list-vertical-star-o"
                  />,
                  <IconText
                    icon={CommentOutlined}
                    text={item.comments_count}
                    key="list-vertical-like-o"
                  />,
                  <IconText
                    icon={ShareAltOutlined}
                    text={item.shares_count}
                    key="list-vertical-message"
                  />,
                ]}
                extra={<img width={32} alt="logo" src={item.image_url} />}
              >
                <List.Item.Meta
                  avatar={
                    <Avatar style={{ backgroundColor: token.colorPrimary }}>
                      {getNameInitials(item.author)}
                    </Avatar>
                  }
                  title={
                    <Typography.Link style={{ textTransform: 'capitalize' }}>
                      {item.title.slice(0, 30)}...
                    </Typography.Link>
                  }
                  description={
                    <Space>
                      <Typography.Text>{item.category}</Typography.Text>
                      <Divider type="vertical" />
                      <Typography.Text>{item.date}</Typography.Text>
                      <Divider type="vertical" />
                      <Typography.Text>{item.location}</Typography.Text>
                    </Space>
                  }
                />
                <Typography.Paragraph ellipsis={{ rows: 3 }}>
                  {item.content}
                </Typography.Paragraph>
              </List.Item>
            ) : (
              <List.Item key={item.title}>
                <Row gutter={[8, 8]}>
                  <Col span={2}>
                    <Flex
                      justify="center"
                      align="center"
                      style={{ height: '100%' }}
                    >
                      <Image
                        src={item.image_url}
                        width={24}
                        height={24}
                        alt={item.title}
                        placeholder={true}
                        preview={false}
                      />
                    </Flex>
                  </Col>
                  <Col span={20}>
                    <Flex vertical gap="small">
                      <Typography.Text strong className="text-capitalize m-0">
                        {item.title.slice(0, 50)}...
                      </Typography.Text>
                      <Flex vertical gap="small">
                        <Flex gap="small">
                          <Typography.Text>Category:</Typography.Text>
                          <Typography.Text>{item.category}</Typography.Text>
                        </Flex>
                        <Flex gap="small">
                          <Typography.Text>Posting date:</Typography.Text>
                          <Typography.Text>
                            {item.date} - {item.time}:00h
                          </Typography.Text>
                        </Flex>
                      </Flex>
                    </Flex>
                  </Col>
                  <Col span={2}>
                    <Flex vertical align="flex-end" gap="middle">
                      <Button shape="circle">
                        <EditFilled />
                      </Button>
                      <Button shape="circle">
                        <DeleteFilled />
                      </Button>
                    </Flex>
                  </Col>
                </Row>
              </List.Item>
            )
          }
        />
      )}
    </Card>
  );
};


src\components\dashboard\shared\PostsCard\styles.css:
.posts-lists-card .ant-card-body {
  padding: 0 0 1rem 0;
}

.available-tucks-card .ant-list-item {
  /*padding: 0;*/
}


src\components\dashboard\shared\ProjectsCard\ProjectsCard.tsx:
import {
  Card as AntdCard,
  CardProps,
  Descriptions,
  DescriptionsProps,
  Flex,
  Tooltip,
  Typography,
} from 'antd';
import {
  CalendarOutlined,
  ClockCircleOutlined,
  UsergroupAddOutlined,
} from '@ant-design/icons';
import { Projects } from '../../../../types';

import './styles.css';

const { Text, Title } = Typography;

type Props = {
  project: Projects;
  size?: 'small' | 'default';
} & CardProps;

export const ProjectsCard = (props: Props) => {
  const {
    size,
    project: {
      client_name,
      end_date,
      project_duration,
      project_manager,
      project_name,
      project_type,
      project_location,
      priority,
      team_size,
      status,
    },
    ...others
  } = props;

  const items: DescriptionsProps['items'] = [
    {
      key: 'project_name',
      label: 'Title',
      children: (
        <span className="text-capitalize">{project_name.slice(0, 36)}...</span>
      ),
      span: 24,
    },
    {
      key: 'project_manager',
      label: 'Manager',
      children: project_manager,
      span: 24,
    },
    {
      key: 'project_client',
      label: 'Client',
      children: client_name,
      span: 24,
    },
    {
      key: 'project_type',
      label: 'Type',
      children: <span className="text-capitalize">{project_type}</span>,
      span: 24,
    },
    {
      key: 'project_location',
      label: 'Location',
      children: project_location,
      span: 24,
    },
    {
      key: 'project_priority',
      label: 'Priority',
      children: <span className="text-capitalize">{priority}</span>,
    },
    {
      key: 'project_status',
      label: 'Status',
      children: <span className="text-capitalize">{status}</span>,
    },
    {
      key: 'team_size',
      label: <UsergroupAddOutlined />,
      children: (
        <Tooltip title="Team size">
          <Typography.Text>{team_size}</Typography.Text>
        </Tooltip>
      ),
    },
    {
      key: 'period',
      label: <ClockCircleOutlined />,
      children: (
        <Tooltip title="Project duration (months)">
          <Typography.Text>{project_duration}</Typography.Text>
        </Tooltip>
      ),
    },
    {
      key: 'end_date',
      label: <CalendarOutlined />,
      children: (
        <Tooltip title="Project end date">
          <Typography.Text>{end_date}</Typography.Text>
        </Tooltip>
      ),
    },
  ];

  return size === 'small' ? (
    <AntdCard
      bordered
      hoverable={true}
      className="project-small-card"
      {...others}
    >
      <Title level={5} className="text-capitalize m-0">
        {project_name.slice(0, 15)}
      </Title>
      <br />
      <Flex wrap="wrap" gap="small" className="text-capitalize">
        <Text>
          Owner: <b>{project_manager},</b>
        </Text>
        <Text>
          Client: <b>{client_name},</b>
        </Text>
        <Text>
          Priority: <b>{priority},</b>
        </Text>
        <Text>
          Type: <b>{project_type},</b>
        </Text>
        <Text>
          Location: <b>{project_location}</b>
        </Text>
      </Flex>
    </AntdCard>
  ) : (
    <AntdCard bordered hoverable={true} {...others}>
      <Descriptions
        items={items}
        column={{ xxl: 2, xl: 2, lg: 2, md: 1, sm: 1, xs: 1 }}
      />
    </AntdCard>
  );
};


src\components\dashboard\shared\ProjectsCard\styles.css:
.project-small-card .ant-card-body {
}


src\components\dashboard\shared\RevenueCard\RevenueCard.tsx:
import { CardProps, Flex, Space, Typography } from 'antd';
import { ArrowDownOutlined, ArrowUpOutlined } from '@ant-design/icons';
import { green, red } from '@ant-design/colors';
import CountUp from 'react-countup';
import { Card } from '../../../index.ts';
import { CSSProperties } from 'react';

type Props = {
  title: string;
  value: string | number;
  diff: number;
  justify?: CSSProperties['justifyContent'];
  height?: number;
} & CardProps;

export const RevenueCard = (props: Props) => {
  const { title, value, diff, justify, height, ...others } = props;

  return (
    <Card {...others} style={{ height }}>
      <Flex
        vertical
        gap={justify ? 0 : 'large'}
        justify={justify}
        style={{ height: height ? height - 60 : 'auto' }}
      >
        <Typography.Text>{title}</Typography.Text>
        <Flex justify="space-between" align="center">
          <Typography.Title level={2} style={{ margin: 0 }}>
            {typeof value === 'number' ? (
              <>
                $
                <CountUp end={value} />
              </>
            ) : (
              <span>{value}</span>
            )}
          </Typography.Title>
          <Space style={{ color: diff > 0 ? green[6] : red[5] }}>
            {diff > 0 ? <ArrowUpOutlined /> : <ArrowDownOutlined />}
            <Typography.Text
              style={{
                color: diff > 0 ? green[6] : red[5],
                fontWeight: 500,
              }}
            >
              <CountUp end={diff} />%
            </Typography.Text>
          </Space>
        </Flex>
      </Flex>
    </Card>
  );
};


src\components\dashboard\social\index.ts:
export { SocialStatsCard } from './SocialStatsCard/SocialStatsCard.tsx';
export { FollowersChart } from './FollowersChart/FollowersChart.tsx';
export { LikesChart } from './LikesChart/LikesChart.tsx';
export { DevicesCardChart } from './DevicesCardChart/DevicesCardChart.tsx';
export { MilestonesCard } from './MilestonesCard/MilestonesCard.tsx';
export { CommentsCard } from './CommentsCard/CommentsCard.tsx';


src\components\dashboard\social\CommentsCard\CommentsCard.tsx:
import { ReactNode } from 'react';
import {
  Alert,
  Button,
  CardProps,
  Flex,
  List,
  Space,
  Tag,
  Typography,
} from 'antd';
import {
  ArrowRightOutlined,
  CommentOutlined,
  DeleteOutlined,
  EyeOutlined,
  LikeOutlined,
} from '@ant-design/icons';
import { Comments } from '../../../../types';
import { Card, Loader, UserAvatar } from '../../../index';

import './styles.css';

type Props = {
  data?: Comments[];
  error?: ReactNode;
  loading?: boolean;
} & CardProps;

export const CommentsCard = ({ data, error, loading, ...others }: Props) => (
  <Card
    title="recent comments"
    actions={[
      <Button>
        View all <ArrowRightOutlined />
      </Button>,
    ]}
    className="comments-lists-card card"
    {...others}
  >
    {error ? (
      <Alert
        message="Error"
        description={error.toString()}
        type="error"
        showIcon
      />
    ) : loading ? (
      <Loader />
    ) : (
      <List
        itemLayout="vertical"
        pagination={false}
        dataSource={data}
        renderItem={(item: Comments) => (
          <List.Item key={item.id}>
            <Space direction="vertical" size="small">
              <Flex justify="space-between">
                <UserAvatar
                  fullName={item.author}
                  size="middle"
                  style={{ fontWeight: 500 }}
                />
                <Tag className="text-capitalize" bordered={false}>
                  {item.activity_type}
                </Tag>
              </Flex>
              <Typography.Paragraph ellipsis={{ rows: 3 }} className="m-0">
                {item.post_content}
              </Typography.Paragraph>
              <Flex justify="space-between">
                <Space size="small">
                  <Button shape="circle" type="text">
                    <LikeOutlined />
                  </Button>
                  <Button shape="circle" type="text">
                    <CommentOutlined />
                  </Button>
                  <Button type="text" icon={<EyeOutlined />}>
                    See Post
                  </Button>
                </Space>
                <Button shape="circle" type="text" danger>
                  <DeleteOutlined />
                </Button>
              </Flex>
            </Space>
          </List.Item>
        )}
      />
    )}
  </Card>
);


src\components\dashboard\social\CommentsCard\styles.css:
.comments-lists-card .ant-card-body {
  /*padding: 1rem 0 1rem 0;*/
}

.available-tucks-card .ant-list-item {
  /*padding: 0;*/
}


src\components\dashboard\social\DevicesCardChart\DevicesCardChart.tsx:
import { Button, CardProps, Col, Popover, Row, Space, Typography } from 'antd';
import { Pie } from '@ant-design/charts';
import {
  DesktopOutlined,
  MobileOutlined,
  QuestionOutlined,
  SettingOutlined,
  TabletFilled,
} from '@ant-design/icons';
import { Card } from '../../../index.ts';

const PieChart = () => {
  const data = [
    {
      type: 'Desktop',
      value: 16,
    },
    {
      type: 'Mobile',
      value: 70,
    },
    {
      type: 'Tablet',
      value: 10,
    },
    {
      type: 'Others',
      value: 4,
    },
  ];
  const config = {
    appendPadding: 10,
    data,
    angleField: 'value',
    colorField: 'type',
    radius: 1,
    innerRadius: 0.6,
    label: {
      type: 'inner',
      offset: '-50%',
      content: ({ percent }: any) => `${(percent * 100).toFixed(0)}%`,
      style: {
        textAlign: 'center',
        fontSize: 12,
      },
    },
    interactions: [
      {
        type: 'element-selected',
      },
      {
        type: 'element-active',
      },
    ],
    statistic: {
      title: false,
      content: {
        style: {
          whiteSpace: 'pre-wrap',
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          fontSize: 16,
          fontWeight: 'normal',
        },
        content: 'Devices\nUsage',
      },
    },
    legend: false,
  };

  // @ts-ignore
  return <Pie {...config} />;
};

type Props = CardProps;

export const DevicesCardChart = ({ ...others }: Props) => {
  return (
    <Card
      title="Flow on device"
      extra={
        <Popover content="Stats can help to design post">
          <Button icon={<QuestionOutlined />} type="text" />
        </Popover>
      }
      {...others}
    >
      <Row gutter={[8, 8]} style={{ alignItems: 'center' }}>
        <Col xs={24} sm={10} lg={8}>
          <div style={{ height: 200 }}>
            <PieChart />
          </div>
        </Col>
        <Col xs={24} sm={12} lg={14}>
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
            }}
          >
            <Space direction="vertical">
              <DesktopOutlined />
              <Typography.Text>Desktop</Typography.Text>
              <Typography.Text style={{ color: '#62daaa' }}>
                70%
              </Typography.Text>
            </Space>
            <Space direction="vertical">
              <MobileOutlined />
              <Typography.Text>Mobile</Typography.Text>
              <Typography.Text style={{ color: '#6394f9' }}>
                16%
              </Typography.Text>
            </Space>
            <Space direction="vertical">
              <TabletFilled />
              <Typography.Text>Tablet</Typography.Text>
              <Typography.Text style={{ color: '#657797' }}>
                10%
              </Typography.Text>
            </Space>
            <Space direction="vertical">
              <SettingOutlined />
              <Typography.Text>Other</Typography.Text>
              <Typography.Text style={{ color: '#f6c022' }}>4%</Typography.Text>
            </Space>
          </div>
        </Col>
      </Row>
    </Card>
  );
};


src\components\dashboard\social\FollowersChart\FollowersChart.tsx:
import { CardProps, Typography } from 'antd';
import { useEffect, useState } from 'react';
import { Line } from '@ant-design/charts';
import { Card } from '../../../index.ts';

type TabKeys = 'all' | 'followers' | 'following' | 'blocked' | string;

type LineProps = {
  type: TabKeys;
};

const LineChart = ({ type }: LineProps) => {
  const dd = [
    {
      month: 'Jan',
      key: 'followers',
      value: 125,
    },
    {
      month: 'Jan',
      key: 'following',
      value: 51,
    },
    {
      month: 'Jan',
      key: 'blocked',
      value: 6,
    },
    {
      month: 'Feb',
      key: 'followers',
      value: 132,
    },
    {
      month: 'Feb',
      key: 'following',
      value: 91,
    },
    {
      month: 'Feb',
      key: 'blocked',
      value: 9,
    },
    {
      month: 'Mar',
      key: 'followers',
      value: 141,
    },
    {
      month: 'Mar',
      key: 'following',
      value: 34,
    },
    {
      month: 'Mar',
      key: 'blocked',
      value: 3,
    },
    {
      month: 'Apr',
      key: 'followers',
      value: 158,
    },
    {
      month: 'Apr',
      key: 'following',
      value: 47,
    },
    {
      month: 'Apr',
      key: 'blocked',
      value: 4,
    },
    {
      month: 'May',
      key: 'followers',
      value: 133,
    },
    {
      month: 'May',
      key: 'following',
      value: 63,
    },
    {
      month: 'May',
      key: 'blocked',
      value: 6,
    },
    {
      month: 'June',
      key: 'followers',
      value: 143,
    },
    {
      month: 'June',
      key: 'following',
      value: 58,
    },
    {
      month: 'June',
      key: 'blocked',
      value: 7,
    },
    {
      month: 'July',
      key: 'followers',
      value: 176,
    },
    {
      month: 'July',
      key: 'following',
      value: 56,
    },
    {
      month: 'July',
      key: 'blocked',
      value: 6,
    },
    {
      month: 'Aug',
      key: 'followers',
      value: 194,
    },
    {
      month: 'Aug',
      key: 'following',
      value: 77,
    },
    {
      month: 'Aug',
      key: 'blocked',
      value: 8,
    },
    {
      month: 'Sep',
      key: 'followers',
      value: 115,
    },
    {
      month: 'Sep',
      key: 'following',
      value: 99,
    },
    {
      month: 'Sep',
      key: 'blocked',
      value: 10,
    },
    {
      month: 'Oct',
      key: 'followers',
      value: 134,
    },
    {
      month: 'Oct',
      key: 'following',
      value: 106,
    },
    {
      month: 'Oct',
      key: 'blocked',
      value: 16,
    },
    {
      month: 'Nov',
      key: 'followers',
      value: 110,
    },
    {
      month: 'Nov',
      key: 'following',
      value: 88,
    },
    {
      month: 'Nov',
      key: 'blocked',
      value: 8,
    },
    {
      month: 'Dec',
      key: 'followers',
      value: 91,
    },
    {
      month: 'Dec',
      key: 'following',
      value: 56,
    },
    {
      month: 'Dec',
      key: 'blocked',
      value: 8,
    },
  ];
  const [data, setData] = useState<any>([]);

  useEffect(() => {
    if (type === 'all') {
      setData(dd);
    } else {
      setData(dd.filter((_) => _.key === type));
    }
  }, [type]);

  const config = {
    data,
    xField: 'month',
    yField: 'value',
    legend: false,
    seriesField: 'key',
    stepType: 'hvh',
  };

  // @ts-ignore
  return <Line {...config} />;
};

const TAB_LIST = [
  {
    key: 'all',
    tab: 'All',
  },
  {
    key: 'followers',
    tab: 'Followers',
  },
  {
    key: 'following',
    tab: 'Following',
  },
  {
    key: 'blocked',
    tab: 'Blocked',
  },
];

const TAB_CONTENT: Record<TabKeys, React.ReactNode> = {
  all: <LineChart type="all" />,
  followers: <LineChart type="followers" />,
  following: <LineChart type="following" />,
  blocked: <LineChart type="blocked" />,
};

type Props = CardProps;

export const FollowersChart = ({ ...others }: Props) => {
  const [activeTabKey, setActiveTabKey] = useState<TabKeys>('all');

  const onTabChange = (key: TabKeys) => {
    setActiveTabKey(key);
  };

  return (
    <Card
      tabList={TAB_LIST}
      activeTabKey={activeTabKey}
      onTabChange={onTabChange}
      tabBarExtraContent={
        <Typography.Title level={5} className="m-0">
          Account activity
        </Typography.Title>
      }
      tabProps={{
        size: 'large',
      }}
      {...others}
    >
      {TAB_CONTENT[activeTabKey]}
    </Card>
  );
};


src\components\dashboard\social\LikesChart\LikesChart.tsx:
import { CardProps } from 'antd';
import { Column } from '@ant-design/charts';
import { Card } from '../../../index.ts';

const ColumnChart = () => {
  const data = [
    {
      name: 'Likes',
      month: 'Jan.',
      rainfall: 18.9,
    },
    {
      name: 'Likes',
      month: 'Feb.',
      rainfall: 28.8,
    },
    {
      name: 'Likes',
      month: 'Mar.',
      rainfall: 39.3,
    },
    {
      name: 'Likes',
      month: 'Apr.',
      rainfall: 81.4,
    },
    {
      name: 'Likes',
      month: 'May',
      rainfall: 47,
    },
    {
      name: 'Likes',
      month: 'Jun.',
      rainfall: 20.3,
    },
    {
      name: 'Likes',
      month: 'Jul.',
      rainfall: 24,
    },
    {
      name: 'Likes',
      month: 'Aug.',
      rainfall: 35.6,
    },
    {
      name: 'Share',
      month: 'Jan.',
      rainfall: 12.4,
    },
    {
      name: 'Share',
      month: 'Feb.',
      rainfall: 23.2,
    },
    {
      name: 'Share',
      month: 'Mar.',
      rainfall: 34.5,
    },
    {
      name: 'Share',
      month: 'Apr.',
      rainfall: 99.7,
    },
    {
      name: 'Share',
      month: 'May',
      rainfall: 52.6,
    },
    {
      name: 'Share',
      month: 'Jun.',
      rainfall: 35.5,
    },
    {
      name: 'Share',
      month: 'Jul.',
      rainfall: 37.4,
    },
    {
      name: 'Share',
      month: 'Aug.',
      rainfall: 42.4,
    },
    {
      name: 'Comments',
      month: 'Jan.',
      rainfall: 8.4,
    },
    {
      name: 'Comments',
      month: 'Feb.',
      rainfall: 33.2,
    },
    {
      name: 'Comments',
      month: 'Mar.',
      rainfall: 24.5,
    },
    {
      name: 'Comments',
      month: 'Apr.',
      rainfall: 79.7,
    },
    {
      name: 'Comments',
      month: 'May',
      rainfall: 42.6,
    },
    {
      name: 'Comments',
      month: 'Jun.',
      rainfall: 65.5,
    },
    {
      name: 'Comments',
      month: 'Jul.',
      rainfall: 57.4,
    },
    {
      name: 'Comments',
      month: 'Aug.',
      rainfall: 52.4,
    },
  ];
  const config = {
    data,
    isGroup: true,
    xField: 'month',
    yField: 'rainfall',
    seriesField: 'name',
    columnStyle: {
      radius: [20, 20, 0, 0],
    },
    label: {
      position: 'top',
    },
    /** Set color */
    //color: ['#1ca9e6', '#f88c24'],
  };

  // @ts-ignore
  return <Column {...config} />;
};

type Props = CardProps;

export const LikesChart = ({ ...others }: Props) => {
  return (
    <Card title="Posts activity" {...others}>
      <ColumnChart />
    </Card>
  );
};


src\components\dashboard\social\MilestonesCard\MilestonesCard.tsx:
import {
  Button,
  CardProps,
  Col,
  Flex,
  List,
  Progress,
  Row,
  Typography,
} from 'antd';
import React from 'react';
import {
  GroupOutlined,
  RadiusSettingOutlined,
  ShareAltOutlined,
} from '@ant-design/icons';
import { Card } from '../../../index.ts';

import './styles.css';

const MOCK_DATA = [
  {
    title: 'ads challenges',
    progress: 56,
    current: 12000,
    target: 20000,
    deadline: '12/05/2023',
    icon: RadiusSettingOutlined,
  },
  {
    title: 'add members',
    progress: 28,
    current: 3400,
    target: 20000,
    deadline: '12/05/2023',
    icon: GroupOutlined,
  },
];

type Props = CardProps;

export const MilestonesCard = ({ ...others }: Props) => {
  return (
    <Card
      title="Milestones"
      extra={<Button icon={<ShareAltOutlined />}>Share</Button>}
      className="milestones-lists-card card"
      {...others}
    >
      <List
        itemLayout="vertical"
        size="large"
        pagination={{
          onChange: (page) => {
            console.log(page);
          },
          pageSize: 3,
          align: 'center',
        }}
        dataSource={MOCK_DATA}
        renderItem={(item) => (
          <List.Item key={item.title}>
            <Row gutter={[8, 8]}>
              <Col xs={2} sm={2} lg={2}>
                <Flex
                  align="center"
                  justify="center"
                  style={{ height: '100%' }}
                >
                  {React.createElement(item.icon, {
                    style: { fontSize: 24, margin: 4 },
                  })}
                </Flex>
              </Col>
              <Col xs={22} sm={6} lg={6}>
                <Flex
                  vertical
                  gap="small"
                  justify="center"
                  style={{ height: '100%' }}
                >
                  <Typography.Title level={5} className="text-capitalize m-0">
                    {item.title}
                  </Typography.Title>
                  <Typography.Text>{item.target} reached</Typography.Text>
                </Flex>
              </Col>
              <Col xs={24} sm={8} lg={8}>
                <Flex vertical justify="center" style={{ height: '100%' }}>
                  <Flex align="end" gap="small">
                    <Typography.Title level={4} className="m-0">
                      {item.progress}%
                    </Typography.Title>
                    <Typography.Text>target</Typography.Text>
                  </Flex>
                  <Progress percent={item.progress} showInfo={false} />
                </Flex>
              </Col>
              <Col xs={12} sm={4} lg={4}>
                <Flex align="center" style={{ height: '100%' }}>
                  <Typography.Text>Deadline: {item.deadline}</Typography.Text>
                </Flex>
              </Col>
              <Col xs={12} sm={4} lg={4}>
                <Flex align="center" style={{ height: '100%' }}>
                  <Button size="middle" type="link">
                    View details
                  </Button>
                </Flex>
              </Col>
            </Row>
          </List.Item>
        )}
        className="overflow-scroll"
      />
    </Card>
  );
};


src\components\dashboard\social\MilestonesCard\styles.css:
.milestones-lists-card .ant-card-body {
  padding: 0 0 1rem 0;
}

.available-tucks-card .ant-list-item {
  /*padding: 0;*/
}


src\components\dashboard\social\SocialStatsCard\SocialStatsCard.tsx:
import { Alert, CardProps, Flex, Typography } from 'antd';
import {
  CommentOutlined,
  LikeOutlined,
  UserAddOutlined,
  UserOutlined,
  UserSwitchOutlined,
} from '@ant-design/icons';
import { ReactElement, ReactNode } from 'react';
import { Card, Loader } from '../../../index';
import CountUp from 'react-countup';

type Props = {
  title: 'followers' | 'following' | 'likes' | 'comments' | string;
  value?: number;
  error?: ReactNode;
  loading?: boolean;
} & CardProps;

export const SocialStatsCard = ({
  value,
  title,
  loading,
  error,
  ...others
}: Props) => {
  const Icon = (): ReactElement => {
    let i;
    switch (title) {
      case 'following':
        i = <UserAddOutlined style={{ fontSize: 30 }} />;
        break;
      case 'followers':
        i = <UserSwitchOutlined style={{ fontSize: 30 }} />;
        break;
      case 'likes':
        i = <LikeOutlined style={{ fontSize: 30 }} />;
        break;
      case 'comments':
        i = <CommentOutlined style={{ fontSize: 30 }} />;
        break;
      default:
        i = <UserOutlined style={{ fontSize: 30 }} />;
        break;
    }

    return i;
  };

  return (
    <Card {...others}>
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <Flex vertical gap="middle">
          <Icon />
          <Typography.Text className="text-capitalize">{title}</Typography.Text>
          <Typography.Title level={2} className="m-0">
            <CountUp end={value || 0} />
          </Typography.Title>
        </Flex>
      )}
    </Card>
  );
};


src\components\dashboard\users\index.tsx:
export {UserTable} from './UserTable';

src\components\dashboard\users\UserTable.tsx:
import {
    Alert,
    Badge,
    BadgeProps,
    Button,
    Form,
    Input,
    Modal,
    Table,
} from 'antd';
// import { useNavigate } from 'react-router-dom';  
import { Card } from '../..';
import { useState } from 'react';
// navigate: ReturnType<typeof useNavigate>
const USER_COLUMNS = () => [
    {
      title: 'ID',
      dataIndex: 'id',
      key: 'id',
    },
    {
      title: 'Full Name',
      dataIndex: 'full_name',
      key: 'name',
    },
    {
      title: 'Email Address',
      dataIndex: 'email',
      key: 'emailAddress',
    },
    {
      title: 'Gender',
      dataIndex: 'gender',
      key: 'gender',
    },
    {
      title: 'Job Title',
      dataIndex: 'title',
      key: 'title',
    },
    // {
    //   title: 'Actions',
    //   dataIndex: 'id',
    //   key: 'id',
    //   render: (value,record) => (
    //     <div>
    //     <Button type="primary" onClick={() => navigate(`/details/events/${record.id}`)}>
    //       Details
    //     </Button>
    //     </div>
    //   )
    // }
    {
      title: 'Current Status',
      dataIndex: 'status',
      key: 'status',
      render: (_: any) => {
        let status: BadgeProps['status'];
  
        if (_ === 'offline') {
          status = 'default';
        } else if (_ === 'online') {
          status = 'success';
        } 
  
        return <Badge status={status} text={_} className="text-capitalize" />;
      },
    }
  ];
  interface UserTableProps {
    data: [];
    error?: string;
    loading: boolean;
  }

export const UserTable : React.FC<UserTableProps> = ({data,error,loading} ) => {
        // Modal State for create user
        const [isCreateUserModalOpen, setIsCreateUserModalOpen] = useState<any>(false);
  
        const showCreateUserModal = () => {
          setIsCreateUserModalOpen(true);
        };
      
        const handleOkCreateUser = () => {
          setIsCreateUserModalOpen(false);
        };
      
        const handleCancelCreateUser = () => {
          setIsCreateUserModalOpen(false);
        };
  // const navigate = useNavigate();
  return (
    <div>
          <Card title="Your Events" extra={<Button onClick={showCreateUserModal}>Create New User</Button>}>
            {error ? (
              <Alert
                message="Error"
                description={error.toString()}
                type="error"
                showIcon
              />
            ) : (
              <Table
                columns={USER_COLUMNS()}
                dataSource={data}
                loading={loading}
                className="overflow-scroll"
              />
            )}
          </Card>
          <Modal title="Create Event User" open={isCreateUserModalOpen} onOk={handleOkCreateUser} onCancel={handleCancelCreateUser}>
          <Form layout='vertical'>
            <Form.Item label="User's Email">
              <Input placeholder="example@email.com" />
            </Form.Item>
            <Form.Item label="User's Full Name">
              <Input placeholder="John Doe" />
            </Form.Item>
            <Form.Item label="User's Title">
              <Input placeholder="Software Engineer" />
            </Form.Item>
          </Form>
      </Modal>
    </div>
  )
}


src\components\EmployeeCard\EmployeeCard.tsx:
import { Employee } from '../../types';
import { Card as AntdCard, CardProps, Flex, Typography } from 'antd';

const { Meta } = AntdCard;

type Props = {
  data: Employee;
  showInfo?: boolean;
} & CardProps;

export const EmployeeCard = ({ data, showInfo, ...others }: Props) => {
  const {
    avatar,
    first_name,
    middle_name,
    last_name,
    role,
    age,
    country,
    title,
    email,
    hire_date,
  } = data;

  return (
    <AntdCard
      hoverable
      cover={
        <img
          alt={`${first_name} image`}
          src={avatar}
          height={240}
          style={{ objectFit: 'cover' }}
        />
      }
      {...others}
    >
      <Meta title={`${title}. ${first_name} ${middle_name} ${last_name}`} />
      <Flex vertical gap="small" style={{ marginTop: '8px' }}>
        <Typography.Text>{role}</Typography.Text>
        {showInfo && (
          <>
            <Typography.Text>Email: {email}</Typography.Text>
            <Typography.Text>Country: {country}</Typography.Text>
            <Typography.Text>Age: {age}</Typography.Text>
            <Typography.Text>Join date: {hire_date}</Typography.Text>
          </>
        )}
      </Flex>
    </AntdCard>
  );
};


src\components\FaqCollapse\FaqCollapse.tsx:
import { Collapse, CollapseProps } from 'antd';

type Props = CollapseProps;

export const FaqCollapse = ({ ...others }: Props) => {
  return <Collapse {...others} />;
};


src\components\Flex\Flex.tsx:
import { CSSProperties, ReactNode } from 'react';

type Props = {
  gap?: 'small' | 'middle' | 'large' | number;
  justifyContent?: CSSProperties['justifyContent'];
  alignItems?: CSSProperties['alignItems'];
  flexDirection?: CSSProperties['flexDirection'];
  children: ReactNode;
} & CSSProperties;

export const Flex = ({
  flexDirection,
  alignItems,
  gap,
  justifyContent,
  children,
  ...others
}: Props) => {
  return (
    <div
      style={{
        width: '100%',
        display: 'flex',
        flexDirection,
        justifyContent,
        alignItems,
        gap:
          typeof gap === 'number'
            ? gap
            : gap === 'large'
              ? '24px'
              : gap === 'small'
                ? '8px'
                : '16px',
        ...others,
      }}
    >
      {children}
    </div>
  );
};


src\components\Loader\Loader.tsx:
import { Spin, theme } from 'antd';

import './styles.css';

export const Loader = () => {
  const {
    token: { borderRadius },
  } = theme.useToken();

  return (
    <div className="loader-container" style={{ borderRadius }}>
      <Spin tip="Loading">
        <div className="content" />
      </Spin>
    </div>
  );
};


src\components\Loader\styles.css:
.loader-container {
  text-align: center;
  background: rgba(0, 0, 0, 0.05);
}

.content {
  padding: 50px;
}


src\components\Logo\Logo.tsx:
import { Flex, FlexProps, theme, Typography } from 'antd';
import { Link } from 'react-router-dom';
import { CSSProperties } from 'react';

import './styles.css';

type LogoProps = {
  color: CSSProperties['color'];
  imgSize?: {
    h?: number | string;
    w?: number | string;
  };
  asLink?: boolean;
  href?: string;
  bgColor?: CSSProperties['backgroundColor'];
} & Partial<FlexProps>;

export const Logo = ({
  asLink,
  color,
  href,
  imgSize,
  bgColor,
  ...others
}: LogoProps) => {
  const {
    token: { borderRadius },
  } = theme.useToken();

  return asLink ? (
    <Link to={href || '#'} className="logo-link">
      <Flex gap={others.gap || 'small'} align="center" {...others}>
        <img
          src="/tdtu_logo.jpg"
          alt="design sparx logo"
          height={imgSize?.h || 48}
        />
        <Typography.Title
          level={5}
          type="secondary"
          style={{
            color,
            margin: 0,
            padding: `4px 8px`,
            backgroundColor: bgColor,
            borderRadius,
          }}
        >
          TDTTALK
        </Typography.Title>
      </Flex>
    </Link>
  ) : (
    <Flex gap={others.gap || 'small'} align="center" {...others}>
      <img
        src="/logo-no-background.png"
        alt="design sparx logo"
        height={imgSize?.h || 48}
      />
      <Typography.Title
        level={4}
        type="secondary"
        style={{
          color,
          margin: 0,
          padding: `4px 8px`,
          backgroundColor: bgColor,
          borderRadius,
        }}
      >
        TDTTALK
      </Typography.Title>
    </Flex>
  );
};


src\components\Logo\styles.css:
.logo-link {
  text-decoration: none;
}

.logo-link:hover,
.logo-link:focus {
  text-decoration: underline;
}


src\components\MoreMenu\MoreMenu.tsx:
import { Button, Dropdown, MenuProps } from 'antd';
import {
  DeleteOutlined,
  ExpandOutlined,
  MinusOutlined,
  MoreOutlined,
  SyncOutlined,
} from '@ant-design/icons';

const items: MenuProps['items'] = [
  {
    label: 'Expand',
    key: '1',
    icon: <ExpandOutlined />,
  },
  {
    label: 'Minimize',
    key: '2',
    icon: <MinusOutlined />,
  },
  {
    label: 'Reload',
    key: '3',
    icon: <SyncOutlined />,
  },
  {
    label: 'Remove',
    key: '4',
    icon: <DeleteOutlined />,
    danger: true,
  },
];

export const MoreMenu = () => {
  return (
    <Dropdown menu={{ items }} placement="bottomLeft">
      <Button>
        More <MoreOutlined />
      </Button>
    </Dropdown>
  );
};


src\components\NotificationsCard\NotificationsCard.tsx:
import { Alert, Button, CardProps, List } from 'antd';
import { Card, Loader, NotificationsItem } from '../index.ts';
import { Notifications } from '../../types';

import './styles.css';

type Props = {
  data?: Notifications[];
  loading?: boolean;
  error?: any;
} & CardProps;

export const NotificationsCard = ({
  data,
  loading,
  error,
  ...others
}: Props) => {
  return (
    <Card
      title="Notifications"
      extra={<Button>View all</Button>}
      className="card notifications-list-card"
      {...others}
    >
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <List
          itemLayout="vertical"
          size="large"
          pagination={{
            onChange: (page) => {
              console.log(page);
            },
            pageSize: 5,
            align: 'center',
          }}
          dataSource={data}
          renderItem={(item) => (
            <List.Item key={item.notification_id}>
              <NotificationsItem data={item} />
            </List.Item>
          )}
        />
      )}
    </Card>
  );
};


src\components\NotificationsCard\styles.css:
.notifications-list-card .ant-card-body {
  padding: 0 0 1rem 0;
}

.available-tucks-card .ant-list-item {
  /*padding: 0;*/
}


src\components\NotificationsItem\NotificationsItem.tsx:
import { Notifications } from '../../types';
import { Avatar, Flex, FlexProps, Tag, Typography } from 'antd';
import {
  ContainerOutlined,
  MailOutlined,
  PhoneOutlined,
} from '@ant-design/icons';

type Props = {
  data: Notifications;
} & Omit<FlexProps, 'children'>;

export const NotificationsItem = ({ data, ...others }: Props) => {
  const {
    notification_type,
    notification_category,
    notification_image,
    notification_date,
    notification_message,
    color,
  } = data;

  return (
    <Flex gap="small" {...others}>
      <Avatar src={notification_image} />
      <Flex vertical gap="small" style={{ flexGrow: 1 }}>
        <Flex align="center" justify="space-between">
          <Typography.Text>
            {notification_message.slice(0, 30)}...
          </Typography.Text>
          <Tag
            bordered={true}
            icon={
              notification_type === 'voice' ? (
                <PhoneOutlined />
              ) : notification_type === 'email' ? (
                <MailOutlined />
              ) : (
                <ContainerOutlined />
              )
            }
            style={{ textTransform: 'capitalize' }}
          >
            {notification_type}
          </Tag>
        </Flex>
        <Flex justify="space-between" align="center">
          <Tag bordered={true} color={color}>
            {notification_category}
          </Tag>
          <Typography.Text>{notification_date}</Typography.Text>
        </Flex>
      </Flex>
    </Flex>
  );
};


src\components\Nprogress\Bar.tsx:
type Props = {
  animationDuration: number;
  progress: number;
};

export const Bar = ({ animationDuration, progress }: Props) => (
  <div
    style={{
      background: '#29d',
      height: 2,
      left: 0,
      marginLeft: `${(-1 + progress) * 100}%`,
      position: 'fixed',
      top: 0,
      transition: `margin-left ${animationDuration}ms linear`,
      width: '100%',
      zIndex: 1031,
    }}
  >
    <div
      style={{
        boxShadow: '0 0 10px #29d, 0 0 5px #29d',
        display: 'block',
        height: '100%',
        opacity: 1,
        position: 'absolute',
        right: 0,
        transform: 'rotate(3deg) translate(0px, -4px)',
        width: 100,
      }}
    />
  </div>
);


src\components\Nprogress\Container.tsx:
import { ReactNode } from 'react';

type Props = {
  animationDuration: number;
  isFinished: boolean;
  children: ReactNode;
};

export const NContainer = ({
  animationDuration,
  children,
  isFinished,
}: Props) => (
  <div
    style={{
      opacity: isFinished ? 0 : 1,
      pointerEvents: 'none',
      transition: `opacity ${animationDuration}ms linear`,
    }}
  >
    {children}
  </div>
);


src\components\Nprogress\index.ts:
export { Bar } from './Bar.tsx';
export { NContainer } from './Container.tsx';
export { NProgress } from './Progress.tsx';
export { NSpinner } from './Spinner.tsx';


src\components\Nprogress\Progress.tsx:
import { useNProgress } from '@tanem/react-nprogress';
import { NContainer } from './Container.tsx';
import { Bar } from './Bar.tsx';
import { NSpinner } from './Spinner.tsx';

type Props = {
  isAnimating?: boolean;
};

export const NProgress = ({ isAnimating }: Props) => {
  const { animationDuration, isFinished, progress } = useNProgress({
    isAnimating,
  });

  return (
    <NContainer animationDuration={animationDuration} isFinished={isFinished}>
      <Bar animationDuration={animationDuration} progress={progress} />
      <NSpinner />
      {/*
              This example doesn't use a spinner component so the UI stays
              tidy. You're free to render whatever is appropriate for your
              use-case.
              */}
    </NContainer>
  );
};


src\components\Nprogress\spinner.css:
@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}


src\components\Nprogress\Spinner.tsx:
import './spinner.css';

export const NSpinner = () => (
  <div
    style={{
      display: 'block',
      position: 'fixed',
      right: 15,
      top: 15,
      zIndex: 1031,
    }}
  >
    <div
      style={{
        animation: '400ms linear infinite spinner',
        borderBottom: '2px solid transparent',
        borderLeft: '2px solid #29d',
        borderRadius: '50%',
        borderRight: '2px solid transparent',
        borderTop: '2px solid #29d',
        boxSizing: 'border-box',
        height: 36,
        width: 36,
      }}
    />
  </div>
);


src\components\PageHeader\PageHeader.tsx:
import React from 'react';
import { Breadcrumb, BreadcrumbProps, Divider, Space, Typography } from 'antd';

import './styles.css';

type Props = {
  title: string;
  breadcrumbs: BreadcrumbProps['items'];
} & React.HTMLAttributes<HTMLDivElement>;

export const PageHeader = ({ breadcrumbs, title, ...others }: Props) => {
  return (
    <div {...others}>
      <Space direction="vertical" size="small">
        <Typography.Title
          level={4}
          style={{ padding: 0, margin: 0, textTransform: 'capitalize' }}
        >
          {title}
        </Typography.Title>
        <Breadcrumb items={breadcrumbs} className="page-header-breadcrumbs" />
      </Space>
      <Divider orientation="right" plain>
        <span style={{ textTransform: 'capitalize' }}>{title}</span>
      </Divider>
    </div>
  );
};


src\components\PageHeader\styles.css:
.page-header-breadcrumbs .ant-breadcrumb-link {
  text-transform: capitalize !important;
}

.ant-dropdown .ant-dropdown-menu-item .ant-dropdown-menu-title-content {
  text-transform: capitalize !important;
}


src\components\PricingTable\PricingTable.tsx:
import { Pricing } from '../../types';
import {
  Alert,
  Card as AntdCard,
  CardProps,
  Col,
  List,
  Row,
  Segmented,
  Space,
  theme,
  Typography,
} from 'antd';
import { CheckCircleOutlined } from '@ant-design/icons';
import { Card, Loader } from '../index.ts';
import { ReactNode, useState } from 'react';
import { useStylesContext } from '../../context';
import CountUp from 'react-countup';

const textStyles = (
  preferred?: boolean,
  primary?: string
): React.CSSProperties => {
  return {
    color: preferred ? 'white' : primary ? primary : 'initial',
    textTransform: 'capitalize',
    textAlign: 'center',
  };
};

type Props = {
  data?: Pricing[];
  error?: ReactNode;
  loading?: boolean;
} & CardProps;

export const PricingTable = ({ data, error, loading, ...others }: Props) => {
  const {
    token: { colorPrimary, colorFillSecondary },
  } = theme.useToken();
  const [value, setValue] = useState<'monthly' | 'annually' | string | number>(
    'monthly'
  );
  const stylesContext = useStylesContext();

  return (
    <Card
      title="Pricing"
      actions={[
        <Typography.Text italic>
          Note: All plans come with a 30-day money-back guarantee.
        </Typography.Text>,
      ]}
      {...others}
    >
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <>
          <div
            className="text-capitalize text-center"
            style={{ marginBottom: '1rem' }}
          >
            <Segmented
              size="large"
              options={['monthly', 'annually']}
              value={value}
              onChange={setValue}
            />
          </div>
          <Row {...stylesContext?.rowProps}>
            {data?.map((d, i) => (
              <Col sm={24} lg={8} key={`${d.color}-${i}`}>
                <AntdCard
                  style={{
                    background: d.preferred ? colorPrimary : colorFillSecondary,
                    border: `1px solid ${
                      d.preferred ? colorPrimary : colorFillSecondary
                    }`,
                  }}
                >
                  <Typography.Text
                    strong
                    style={{
                      ...textStyles(d.preferred, colorPrimary),
                      fontSize: 16,
                    }}
                  >
                    {d.plan}
                  </Typography.Text>
                  <Typography.Title
                    style={{ margin: '1rem 0', ...textStyles(d.preferred) }}
                  >
                    ${' '}
                    <CountUp
                      decimals={2}
                      end={value === 'monthly' ? d.monthly : d.annually}
                    />
                    /
                    <small
                      style={{
                        fontSize: 16,
                        fontWeight: 400,
                        textTransform: 'lowercase',
                      }}
                    >
                      per {value === 'monthly' ? 'month' : 'year'}
                    </small>
                  </Typography.Title>
                  <List
                    header={
                      <Typography.Text style={textStyles(d.preferred)}>
                        Features
                      </Typography.Text>
                    }
                    dataSource={d.features}
                    renderItem={(item) => (
                      <List.Item>
                        <Space>
                          <CheckCircleOutlined
                            style={textStyles(d.preferred)}
                          />
                          <Typography.Text style={textStyles(d.preferred)}>
                            {item}
                          </Typography.Text>
                        </Space>
                      </List.Item>
                    )}
                  />
                </AntdCard>
              </Col>
            ))}
          </Row>
        </>
      )}
    </Card>
  );
};


src\components\RefreshBtn\RefreshBtn.tsx:
import { Button, ButtonProps } from 'antd';
import { SyncOutlined } from '@ant-design/icons';

type Props = {
  icon?: boolean;
} & ButtonProps;

export const RefreshBtn = ({ icon, ...others }: Props) => {
  return (
    <Button
      icon={icon ? <SyncOutlined /> : null}
      onClick={() => window.location.reload()}
      {...others}
    >
      Refresh page
    </Button>
  );
};


src\components\SitemapCard\SitemapCard.tsx:
import { CardProps, Flex, Typography } from 'antd';
import { Card } from '../index.ts';

import './styles.css';
import { Link } from 'react-router-dom';

type Props = {
  data: {
    title: string;
    links: { title: string; path: string }[];
  };
} & CardProps;

export const SitemapCard = ({ data, ...others }: Props) => {
  return (
    <Card {...others}>
      <Flex vertical gap="middle">
        <Typography.Title level={5} className="m-0 text-capitalize">
          {data.title}
        </Typography.Title>
        <Flex gap="middle" wrap="wrap">
          {data.links.map((d) => (
            <Link to={d.path} className="text-capitalize">
              {d.title}
            </Link>
          ))}
        </Flex>
      </Flex>
    </Card>
  );
};


src\components\SitemapCard\styles.css:
.sitemap-card .ant-card-body {
  padding: 0;
}

.sitemap-card .ant-list-item {
  text-transform: capitalize;
}


src\components\SocialMediaCard\SocialMediaCard.tsx:
import { Button, ButtonProps, CardProps, Flex } from 'antd';
import { Card } from '../index.ts';
import {
  FacebookFilled,
  GithubFilled,
  InstagramFilled,
  LinkedinFilled,
  TwitterCircleFilled,
} from '@ant-design/icons';

const BUTTON_PROPS: ButtonProps = {
  type: 'link',
  style: {
    textAlign: 'start',
  },
};

type Props = CardProps;

export const SocialMediaCard = ({ ...others }: Props) => {
  return (
    <Card title="Social Media" {...others}>
      <Flex vertical gap="small">
        <Button icon={<FacebookFilled />} {...BUTTON_PROPS}>
          Facebook
        </Button>
        <Button icon={<InstagramFilled />} {...BUTTON_PROPS}>
          Instagram
        </Button>
        <Button icon={<TwitterCircleFilled />} {...BUTTON_PROPS}>
          Facebook
        </Button>
        <Button icon={<LinkedinFilled />} {...BUTTON_PROPS}>
          Facebook
        </Button>
        <Button icon={<GithubFilled />} {...BUTTON_PROPS}>
          Facebook
        </Button>
      </Flex>
    </Card>
  );
};


src\components\TimelineCard\TimelineCard.tsx:
import { Alert, CardProps, Flex, Timeline, Typography } from 'antd';
import {
  LaptopOutlined,
  MobileOutlined,
  TabletOutlined,
} from '@ant-design/icons';
import { ActivityTimeline } from '../../types';
import { Card, Loader } from '../index.ts';
import { ReactNode } from 'react';

type Props = {
  data?: ActivityTimeline[];
  loading?: boolean;
  error?: ReactNode;
} & CardProps;

export const TimelineCard = ({ data, error, loading, ...others }: Props) => {
  return (
    <Card title="Latest activities" {...others}>
      {error ? (
        <Alert
          message="Error"
          description={error.toString()}
          type="error"
          showIcon
        />
      ) : loading ? (
        <Loader />
      ) : (
        <Timeline
          mode="left"
          items={data?.map((_) => ({
            dot:
              _.device_type === 'desktop' ? (
                <LaptopOutlined />
              ) : _.device_type === 'tablet' ? (
                <TabletOutlined />
              ) : (
                <MobileOutlined />
              ),
            children: (
              <Flex gap="small" vertical>
                <Typography.Paragraph
                  ellipsis={{
                    rows: 2,
                  }}
                  title={`${_.post_content}--${_.timestamp}`}
                  style={{ marginBottom: 0 }}
                >
                  {_.post_content}
                </Typography.Paragraph>
                <Typography.Text type="secondary">
                  {_.timestamp}
                </Typography.Text>
              </Flex>
            ),
          }))}
        />
      )}
    </Card>
  );
};


src\components\UserAvatar\UserAvatar.tsx:
import { Avatar, AvatarProps, Flex, FlexProps, theme, Typography } from 'antd';
import { colourNameToHex, getNameInitials, isColorLight } from '../../utils';
import { CheckCircleFilled, UserOutlined } from '@ant-design/icons';
import { blue } from '@ant-design/colors';
import { CSSProperties } from 'react';

/**
 * mark - not a full name user, just a single user name
 */
type Props = {
  fullName: string;
  mark?: boolean;
  size?: 'small' | 'middle' | 'large';
  verified?: boolean;
  color?: CSSProperties['color'];
  textWidth?: CSSProperties['width'];
} & Omit<FlexProps, 'children'>;

export const UserAvatar = ({
  fullName,
  mark,
  size,
  verified,
  color,
  textWidth,
  ...others
}: Props) => {
  const {
    token: { colorPrimary },
  } = theme.useToken();

  const avatarProps: AvatarProps = {
    size: size === 'large' ? 36 : size === 'small' ? 18 : 24,
  };

  return (
    <Flex gap="small" align="center" {...others}>
      {mark ? (
        <Avatar
          style={{
            backgroundColor: color || colorPrimary,
            color: isColorLight(colourNameToHex(color || colorPrimary))
              ? 'black'
              : 'white',
          }}
          icon={<UserOutlined />}
          {...avatarProps}
        />
      ) : (
        <Avatar
          style={{
            backgroundColor: color || colorPrimary,
            color: isColorLight(colourNameToHex(color || colorPrimary))
              ? 'black'
              : 'white',
          }}
          {...avatarProps}
        >
          {getNameInitials(fullName)}
        </Avatar>
      )}
      <Typography.Text
        style={{
          fontSize: size === 'large' ? 18 : size === 'small' ? 14 : 16,
          width: textWidth || 160,
        }}
      >
        {fullName}
      </Typography.Text>
      {verified && (
        <CheckCircleFilled style={{ fontSize: 14, color: blue[6] }} />
      )}
    </Flex>
  );
};


src\constants\index.ts:
import {
  PATH_CALENDAR,
  PATH_INBOX,
  PATH_ACCOUNT,
  PATH_AUTH,
  PATH_BLOG,
  PATH_CAREERS,
  PATH_CHANGELOG,
  PATH_CONTACTS,
  PATH_CORPORATE,
  PATH_DASHBOARD,
  PATH_DOCS,
  PATH_ERROR,
  PATH_FILE,
  PATH_GITHUB,
  PATH_INVOICE,
  PATH_LAYOUT,
  PATH_PROJECTS,
  PATH_SOCIAL,
  PATH_START,
  PATH_SUBSCRIPTION,
  PATH_USER_MGMT,
  PATH_USER_PROFILE,
  PATH_LANDING,
  PATH_SITEMAP,
  PATH_SOCIALS,
  PATH_ABOUT,
} from './routes.ts';

const DASHBOARD_ITEMS = [
  { title: 'default', path: PATH_DASHBOARD.default },
  { title: 'projects', path: PATH_DASHBOARD.projects },
  { title: 'ecommerce', path: PATH_DASHBOARD.ecommerce },
  { title: 'marketing', path: PATH_DASHBOARD.marketing },
  { title: 'social', path: PATH_DASHBOARD.social },
  { title: 'bidding', path: PATH_DASHBOARD.bidding },
  { title: 'learning', path: PATH_DASHBOARD.learning },
  { title: 'logistics', path: PATH_DASHBOARD.logistics },
  { title: 'events', path: PATH_DASHBOARD.events },
  { title: 'my events', path: PATH_DASHBOARD.my_events },
  { title: 'users', path: PATH_DASHBOARD.users },
];

const CORPORATE_ITEMS = [
  { title: 'about', path: PATH_CORPORATE.about },
  { title: 'team', path: PATH_CORPORATE.team },
  { title: 'faq', path: PATH_CORPORATE.faqs },
  { title: 'contact us', path: PATH_CORPORATE.contact },
  { title: 'pricing', path: PATH_CORPORATE.pricing },
  { title: 'license', path: PATH_CORPORATE.license },
];

const USER_PROFILE_ITEMS = [
  { title: 'details', path: PATH_USER_PROFILE.details },
  { title: 'preferences', path: PATH_USER_PROFILE.preferences },
  { title: 'information', path: PATH_USER_PROFILE.personalInformation },
  { title: 'security', path: PATH_USER_PROFILE.security },
  { title: 'activity', path: PATH_USER_PROFILE.activity },
  { title: 'actions', path: PATH_USER_PROFILE.action },
  { title: 'help', path: PATH_USER_PROFILE.help },
  { title: 'feedback', path: PATH_USER_PROFILE.feedback },
];

const AUTHENTICATION_ITEMS = [
  { title: 'sign in', path: PATH_AUTH.signin },
  { title: 'sign up', path: PATH_AUTH.signup },
  { title: 'welcome', path: PATH_AUTH.welcome },
  { title: 'verify email', path: PATH_AUTH.verifyEmail },
  { title: 'password reset', path: PATH_AUTH.passwordReset },
  { title: 'account deleted', path: PATH_AUTH.accountDelete },
];

const ERROR_ITEMS = [
  { title: '400', path: PATH_ERROR.error400 },
  { title: '403', path: PATH_ERROR.error403 },
  { title: '404', path: PATH_ERROR.error404 },
  { title: '500', path: PATH_ERROR.error500 },
  { title: '503', path: PATH_ERROR.error503 },
];

export {
  PATH_CALENDAR,
  PATH_USER_MGMT,
  PATH_INBOX,
  PATH_PROJECTS,
  PATH_LAYOUT,
  PATH_CORPORATE,
  PATH_CONTACTS,
  PATH_DASHBOARD,
  PATH_CHANGELOG,
  PATH_CAREERS,
  PATH_ACCOUNT,
  PATH_GITHUB,
  PATH_AUTH,
  PATH_INVOICE,
  PATH_BLOG,
  PATH_ERROR,
  PATH_DOCS,
  PATH_SUBSCRIPTION,
  PATH_USER_PROFILE,
  PATH_FILE,
  PATH_SOCIAL,
  PATH_START,
  PATH_LANDING,
  PATH_SITEMAP,
  DASHBOARD_ITEMS,
  CORPORATE_ITEMS,
  USER_PROFILE_ITEMS,
  PATH_SOCIALS,
  AUTHENTICATION_ITEMS,
  ERROR_ITEMS,
  PATH_ABOUT,
};


src\constants\routes.ts:
function path(root: string, sublink: string) {
  return `${root}${sublink}`;
}

const ROOTS_LANDING = '/';
const ROOTS_DASHBOARD = '/dashboards';
const ROOTS_SITEMAP = '/sitemap';
const ROOTS_LAYOUT = '/layouts';
const ROOTS_CORPORATE = '/corporate';
const ROOTS_PROFILE = '/user-profile';
const ROOTS_SOCIAL = '/social';
const ROOTS_BLOG = '/blog';
const ROOTS_CAREERS = '/careers';
const ROOTS_ACCOUNT = '/account';
const ROOTS_AUTH = '/auth';
const ROOTS_PROJECTS = '/projects';
const ROOTS_CONTACTS = '/contacts';
const ROOTS_USER_MGMT = '/user-management';
const ROOTS_SUBSCRIPTION = '/subscription';
const ROOTS_INVOICE = '/invoice';
const ROOTS_FILE_MGMT = '/file-manager';
const ROOTS_INBOX = '/inbox';
const ROOTS_CALENDAR = '/calendar';
const ROOTS_ERRORS = '/errors';
const ROOTS_ABOUT = '/about';

export const PATH_LANDING = {
  root: ROOTS_LANDING,
  why: '/why-us',
  pricing: '/pricing',
  about: '/about',
  contact: '/contact',
};

export const PATH_DASHBOARD = {
  root: ROOTS_DASHBOARD,
  default: path(ROOTS_DASHBOARD, '/default'),
  projects: path(ROOTS_DASHBOARD, '/projects'),
  ecommerce: path(ROOTS_DASHBOARD, '/ecommerce'),
  marketing: path(ROOTS_DASHBOARD, '/marketing'),
  social: path(ROOTS_DASHBOARD, '/social'),
  bidding: path(ROOTS_DASHBOARD, '/bidding'),
  learning: path(ROOTS_DASHBOARD, '/learning'),
  logistics: path(ROOTS_DASHBOARD, '/logistics'),
  events : path(ROOTS_DASHBOARD, '/events-list'),
  my_events : path(ROOTS_DASHBOARD, '/my-events'),
  users : path(ROOTS_DASHBOARD, '/users'),
  participated_events: path(ROOTS_DASHBOARD, '/participated-events'),
};

export const PATH_SITEMAP = {
  root: ROOTS_SITEMAP,
};

export const PATH_LAYOUT = {
  root: ROOTS_LAYOUT,
  sidebar: {
    light: path(ROOTS_LAYOUT, '/sidebar/light'),
    dark: path(ROOTS_LAYOUT, '/sidebar/dark'),
    minimized: path(ROOTS_LAYOUT, '/sidebar/minimized'),
  },
  header: {
    light: path(ROOTS_LAYOUT, '/header/light'),
    dark: path(ROOTS_LAYOUT, '/header/dark'),
    overlay: path(ROOTS_LAYOUT, '/header/overlay'),
  },
};

export const PATH_CORPORATE = {
  root: ROOTS_CORPORATE,
  about: path(ROOTS_CORPORATE, '/about'),
  team: path(ROOTS_CORPORATE, '/team'),
  faqs: path(ROOTS_CORPORATE, '/faqs'),
  contact: path(ROOTS_CORPORATE, '/contact'),
  pricing: path(ROOTS_CORPORATE, '/pricing'),
  license: path(ROOTS_CORPORATE, '/license'),
};

export const PATH_USER_PROFILE = {
  root: ROOTS_PROFILE,
  details: path(ROOTS_PROFILE, '/details'),
  preferences: path(ROOTS_PROFILE, '/preferences'),
  personalInformation: path(ROOTS_PROFILE, '/personal-information'),
  security: path(ROOTS_PROFILE, '/security'),
  activity: path(ROOTS_PROFILE, '/activity'),
  action: path(ROOTS_PROFILE, '/actions'),
  help: path(ROOTS_PROFILE, '/help'),
  feedback: path(ROOTS_PROFILE, '/feedback'),
};

export const PATH_SOCIAL = {
  root: ROOTS_SOCIAL,
  feed: path(ROOTS_SOCIAL, '/feed'),
  activity: path(ROOTS_SOCIAL, '/activity'),
  followers: path(ROOTS_SOCIAL, '/followers'),
  settings: path(ROOTS_SOCIAL, '/settings'),
};

export const PATH_BLOG = {
  root: ROOTS_BLOG,
  details: (id: string | number): string => path(ROOTS_BLOG, `/view/${id}`),
};

export const PATH_CAREERS = {
  root: ROOTS_CAREERS,
  new: path(ROOTS_CAREERS, `/new`),
};

export const PATH_ACCOUNT = {
  root: ROOTS_ACCOUNT,
  settings: path(ROOTS_ACCOUNT, '/settings'),
  security: path(ROOTS_ACCOUNT, '/security'),
  activity: path(ROOTS_ACCOUNT, '/activity'),
  billing: path(ROOTS_ACCOUNT, '/billing'),
  statements: path(ROOTS_ACCOUNT, '/statements'),
  referral: path(ROOTS_ACCOUNT, '/referral'),
  api: path(ROOTS_ACCOUNT, '/api-keys'),
  logs: path(ROOTS_ACCOUNT, '/logs'),
};

export const PATH_AUTH = {
  root: ROOTS_AUTH,
  signin: path(ROOTS_AUTH, '/signin'),
  signup: path(ROOTS_AUTH, '/signup'),
  passwordReset: path(ROOTS_AUTH, '/password-reset'),
  passwordConfirm: path(ROOTS_AUTH, '/password-confirmation'),
  welcome: path(ROOTS_AUTH, '/welcome'),
  verifyEmail: path(ROOTS_AUTH, '/verify-email'),
  accountDelete: path(ROOTS_AUTH, '/account-delete'),
};

export const PATH_ERROR = {
  root: ROOTS_ERRORS,
  error400: path(ROOTS_ERRORS, '/400'),
  error403: path(ROOTS_ERRORS, '/403'),
  error404: path(ROOTS_ERRORS, '/404'),
  error500: path(ROOTS_ERRORS, '/500'),
  error503: path(ROOTS_ERRORS, '/503'),
};

export const PATH_PROJECTS = {
  root: ROOTS_PROJECTS,
  details: (id: string | number): string => path(ROOTS_PROJECTS, `/view/${id}`),
};

export const PATH_CONTACTS = {
  root: ROOTS_CONTACTS,
  details: (id: string | number): string => path(ROOTS_CONTACTS, `/view/${id}`),
  new: path(ROOTS_CONTACTS, '/new'),
  editDetails: (id: string | number): string =>
    path(ROOTS_CONTACTS, `/edit/${id}`),
};

export const PATH_USER_MGMT = {
  root: ROOTS_USER_MGMT,
  users: {
    all: path(ROOTS_USER_MGMT, '/users'),
    details: (id: string | number): string =>
      path(ROOTS_USER_MGMT, `/view/${id}`),
  },
  roles: {
    all: path(ROOTS_USER_MGMT, '/roles'),
    details: (id: string | number): string =>
      path(ROOTS_USER_MGMT, `/roles/view/${id}`),
  },
  permissions: path(ROOTS_USER_MGMT, '/permissions'),
};

export const PATH_INVOICE = {
  root: ROOTS_INVOICE,
  new: path(ROOTS_INVOICE, `/new`),
  details: (id: string | number): string =>
    path(ROOTS_USER_MGMT, `/view/${id}`),
};

export const PATH_FILE = {
  root: ROOTS_FILE_MGMT,
  files: path(ROOTS_FILE_MGMT, `/files`),
  blank: path(ROOTS_FILE_MGMT, `/blank`),
};

export const PATH_INBOX = {
  root: ROOTS_INBOX,
  new: path(ROOTS_INBOX, `/new`),
  details: (id: string | number): string => path(ROOTS_INBOX, `/view/${id}`),
  blank: path(ROOTS_INBOX, `/blank`),
};

export const PATH_CALENDAR = {
  root: ROOTS_CALENDAR,
};

export const PATH_SUBSCRIPTION = {
  root: ROOTS_SUBSCRIPTION,
  list: path(ROOTS_SUBSCRIPTION, `/list`),
  new: path(ROOTS_SUBSCRIPTION, `/new`),
  details: (id: string | number): string =>
    path(ROOTS_SUBSCRIPTION, `/view/${id}`),
};

export const PATH_START = {
  root: 'https://mantine-analytics-dashboard-docs.netlify.app/getting-started',
};

export const PATH_DOCS = {
  help: 'https://github.com/design-sparx/antd-multipurpose-dashboard/blob/main/README.md',
  components: 'https://6546507b657a74164abf2db6-oniqlpqtfs.chromatic.com/',
  productRoadmap:
    'https://kelvink96.notion.site/1af2c000eb4f4b1688684cb2d88d5ee4?v=eb14f3050b7d4357821dbcb4bb61b636&p=752cacbf390f4d1cbc0e625550391d9b&pm=s',
};

export const PATH_CHANGELOG = {
  root: '',
};

export const PATH_GITHUB = {
  org: 'https://github.com/design-sparx',
  personal: 'https://github.com/kelvink96',
  repo: 'https://github.com/design-sparx/antd-multipurpose-dashboard',
};

export const PATH_SOCIALS = {
  behance: 'https://www.behance.net/kelvink96',
  dribbble: 'https://dribbble.com/kelvink96',
  facebook: 'https://www.facebook.com/kelvinkk96',
  instagram: 'https://www.instagram.com/kelvink_96/',
  linkedin: 'https://www.linkedin.com/in/kelvink96/',
  youtube: 'https://twitter.com/kelvink_96',
};

export const PATH_ABOUT = {
  root: ROOTS_ABOUT,
};


src\context\index.ts:
import { StylesContext, useStylesContext } from './styles';

export { StylesContext, useStylesContext };


src\context\styles.tsx:
import { createContext, useContext } from 'react';
import { CarouselProps, RowProps } from 'antd';

export type StylesContentProps = {
  rowProps: RowProps;
  carouselProps: CarouselProps;
};

export const StylesContext = createContext<StylesContentProps | null>(null);

export const useStylesContext = () => useContext(StylesContext);


src\firebase\firebaseConfig.ts:
// Import the functions you need from the SDKs you need
import { initializeApp } from 'firebase/app';
import { getAnalytics } from 'firebase/analytics';
import { getMessaging } from 'firebase/messaging';

const {
  VITE_APP_API_KEY,
  VITE_APP_AUTH_DOMAIN,
  VITE_APP_PROJECT_ID,
  VITE_APP_STORAGE_BUCKET,
  VITE_APP_MESSENGER_SENDER_ID,
  VITE_APP_APP_ID,
  VITE_APP_MEASUREMENT_ID,
} = import.meta.env;

// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: VITE_APP_API_KEY,
  authDomain: VITE_APP_AUTH_DOMAIN,
  projectId: VITE_APP_PROJECT_ID,
  storageBucket: VITE_APP_STORAGE_BUCKET,
  messagingSenderId: VITE_APP_MESSENGER_SENDER_ID,
  appId: VITE_APP_APP_ID,
  measurementId: VITE_APP_MEASUREMENT_ID,
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);
const messaging = getMessaging(app);

export { analytics, messaging };


src\hooks\index.ts:
import { usePageContext } from './usePageContext.tsx';
import useFetchData from './useFetchData.tsx';

export { usePageContext, useFetchData };


src\hooks\useFetchData.tsx:
// src\hooks\useFetchData.tsx
import { useCallback, useEffect, useState } from 'react';

const useFetchData = (url: string, token?: string) => { // Thêm tham số token tùy chọn
    const [data, setData] = useState<any>([]);
    const [error, setError] = useState<any>(null);
    const [loading, setLoading] = useState(true);

    const fetchData = useCallback(async () => {
        setLoading(true);
        setError(null);
        try {
            const headers: HeadersInit = { // Khởi tạo headers
                'Content-Type': 'application/json',
            };
            if (token) { // Nếu có token, thêm vào headers
                headers['Authorization'] = `Bearer ${token}`;
            }

            const response = await fetch(url, { // Truyền headers vào fetch
                headers: new Headers(headers)
            });

            if (!response.ok) {
                const message = `This is an HTTP error: ${response.status}`;
                throw new Error(message);
            }

            const json = await response.json();
            setData(json);
        } catch (error: any) {
            setError(error);
        } finally {
            setLoading(false);
        }
    }, [url, token]); // Thêm token vào dependency array

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    return { data, error, loading };
};

export default useFetchData;

src\hooks\useFetchOrganizedEventsData.tsx:
// src\hooks\useFetchOrganizedEventsData.tsx
import { useCallback, useEffect, useState } from 'react';
import authService from '../services/authService';

const useFetchOrganizedEventsData = (status?: string) => { // status now is optional
    const [data, setData] = useState<any>([]);
    const [error, setError] = useState<any>(null);
    const [loading, setLoading] = useState(true);

    const fetchData = useCallback(async (statusParam?: string) => { // fetchData now accepts statusParam
        setLoading(true);
        setError(null);
        try {
            const accessToken = localStorage.getItem('accessToken');
            if (!accessToken) {
                throw new Error("No access token found. Please login again.");
            }

            const response = await authService.getOrganizedEvents(statusParam, accessToken); // Pass statusParam to API call
            if (response && typeof response === 'object' && 'data' in response && response.data && typeof response.data === 'object' && 'events' in response.data) {
                setData(response.data.events);
            } else {
                throw new Error("Unexpected response format");
            }
        } catch (error: any) {
            setError(error);
        } finally {
            setLoading(false);
        }
    }, []); // fetchData dependency array is now empty, status is handled in useCallback argument

    useEffect(() => {
        fetchData(status); // Call fetchData with status from hook argument
    }, [fetchData, status]); // fetchData and status are dependencies

    return { data, error, loading, fetchData }; // Return fetchData for refresh
};

export default useFetchOrganizedEventsData;

src\hooks\useFetchParticipatedEventsData.tsx:
// src\hooks\useFetchParticipatedEventsData.tsx
import { useCallback, useEffect, useState } from 'react';
import authService from '../services/authService';

const useFetchParticipatedEventsData = (status?: string) => {
    const [data, setData] = useState<any>([]);
    const [error, setError] = useState<any>(null);
    const [loading, setLoading] = useState(true);

    const fetchData = useCallback(async (statusParam?: string) => {
        setLoading(true);
        setError(null);
        try {
            const accessToken = localStorage.getItem('accessToken');
            if (!accessToken) {
                throw new Error("No access token found. Please login again.");
            }

            const response = await authService.getParticipatedEvents(statusParam, accessToken); // Call API for participated events
             if (response && typeof response === 'object' && 'data' in response && response.data && typeof response.data === 'object' && 'events' in response.data) {
                setData(response.data); // Set entire response data, including meta
            } else {
                throw new Error("Unexpected response format");
            }
        } catch (error: any) {
            setError(error);
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchData(status);
    }, [fetchData, status]);

    return { data, error, loading, fetchData };
};

export default useFetchParticipatedEventsData;

src\hooks\usePageContext.tsx:
import { useOutletContext } from 'react-router-dom';

export type ContextType = { title: string | null };

export function usePageContext() {
  return useOutletContext<ContextType>();
}


src\layouts\index.ts:
import { EventDetailLayout } from './eventDetails/index.tsx';

export { AppLayout } from './app';
export { DashboardLayout } from './dashboards';
// export { GuestLayout } from './guest/Guest.tsx';
export { CorporateLayout } from './corporate';
export { UserAccountLayout } from './userAccount';
export {EventDetailLayout} from './eventDetails';

src\layouts\app\App.tsx:
import {
  Button,
  Dropdown,
  Flex,
  FloatButton,
  Input,
  Layout,
  MenuProps,
  message,
  theme,
  Tooltip,
  Switch,
} from 'antd';
import { useLocation, useNavigate } from 'react-router-dom';
import { ReactNode, useEffect, useRef, useState } from 'react';
import {
  AppstoreOutlined,
  LogoutOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  MessageOutlined,
  QuestionOutlined,
  SettingOutlined,
  UserOutlined,
  MoonOutlined,
  SunOutlined,
} from '@ant-design/icons';
import {
  CSSTransition,
  SwitchTransition,
  TransitionGroup,
} from 'react-transition-group';
import { useMediaQuery } from 'react-responsive';
import SideNav from './SideNav.tsx';
import HeaderNav from './HeaderNav.tsx';
import FooterNav from './FooterNav.tsx';
import { NProgress } from '../../components';
import { PATH_LANDING, PATH_AUTH } from '../../constants';
import { useSelector, useDispatch } from 'react-redux';
import { toggleTheme } from '../../redux/theme/themeSlice.ts';
import { RootState } from '../../redux/store.ts';
import authService from '../../services/authService'; // Import service
import { clearUser } from '../../redux/userSlice.tsx';
const { Content } = Layout;

type AppLayoutProps = {
  children: ReactNode;
};

export const AppLayout = ({ children }: AppLayoutProps) => {
  const {
    token: { borderRadius },
  } = theme.useToken();
  const isMobile = useMediaQuery({ maxWidth: 769 });
  const [collapsed, setCollapsed] = useState(true);
  const [navFill, setNavFill] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const nodeRef = useRef(null);
  const floatBtnRef = useRef(null);
  const dispatch = useDispatch();
  const { mytheme } = useSelector((state: RootState) => state.theme);
  const user = useSelector((state: RootState) => state.user);
//
    const handleLogout = async () => {
        message.open({
            type: 'loading',
            content: 'Signing you out',
        });
        try {
            const accessToken = localStorage.getItem('accessToken');
            if (!accessToken) return navigate(PATH_AUTH.signin);
            await authService.logout(accessToken);
            localStorage.removeItem('accessToken');
            localStorage.removeItem('user');
            dispatch(clearUser());
    
            setTimeout(() => {
              navigate(PATH_AUTH.signin);
              message.success('Logout successful');
            }, 1000);
          } catch (error: any) {
            setTimeout(() => {
              navigate(PATH_AUTH.signin);
              message.success('Logout successful');
            }, 1000);
          }
    };

  const items: MenuProps['items'] = [
    {
      key: 'user-profile-link',
      label: 'profile',
      icon: <UserOutlined />,
    },
    {
      key: 'user-settings-link',
      label: 'settings',
      icon: <SettingOutlined />,
    },
    {
      key: 'user-help-link',
      label: 'help center',
      icon: <QuestionOutlined />,
    },
    {
      type: 'divider',
    },
    {
      key: 'user-logout-link',
      label: 'logout',
      icon: <LogoutOutlined />,
      danger: true,
      onClick: handleLogout
    },
  ];

  useEffect(() => {
    setCollapsed(isMobile);
  }, [isMobile]);

  useEffect(() => {
    window.addEventListener('scroll', () => {
      if (window.scrollY > 5) {
        setNavFill(true);
      } else {
        setNavFill(false);
      }
    });
  }, []);

  return (
    <>
      <NProgress isAnimating={isLoading} key={location.key} />
      <Layout
        style={{
          minHeight: '100vh',
          // backgroundColor: 'white',
        }}
      >
        <SideNav
          trigger={null}
          collapsible
          collapsed={collapsed}
          onCollapse={(value) => setCollapsed(value)}
          style={{
            overflow: 'auto',
            position: 'fixed',
            left: 0,
            top: 0,
            bottom: 0,
            background: 'none',
            border: 'none',
            transition: 'all .2s',
          }}
        />
        <Layout
          style={
            {
              // background: 'none',
            }
          }
        >
          <HeaderNav
            style={{
              marginLeft: collapsed ? 0 : '200px',
              padding: '0 2rem 0 0',
              background: navFill ? 'rgba(255, 255, 255, .5)' : 'none',
              backdropFilter: navFill ? 'blur(8px)' : 'none',
              boxShadow: navFill ? '0 0 8px 2px rgba(0, 0, 0, 0.05)' : 'none',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              position: 'sticky',
              top: 0,
              zIndex: 1,
              gap: 8,
              transition: 'all .25s',
            }}
          >
            <Flex align="center">
              <Tooltip title={`${collapsed ? 'Expand' : 'Collapse'} Sidebar`}>
                <Button
                  type="text"
                  icon={
                    collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />
                  }
                  onClick={() => setCollapsed(!collapsed)}
                  style={{
                    fontSize: '16px',
                    width: 64,
                    height: 64,
                  }}
                />
              </Tooltip>
              <Input.Search
                placeholder="search"
                style={{
                  width: isMobile ? '100%' : '400px',
                  marginLeft: isMobile ? 0 : '.5rem',
                }}
                size="middle"
              />
            </Flex>
            <Flex align="center" gap="small">
              <Tooltip title="Apps">
                <Button icon={<AppstoreOutlined />} type="text" size="large" />
              </Tooltip>
              <Tooltip title="Messages">
                <Button icon={<MessageOutlined />} type="text" size="large" />
              </Tooltip>
              <Tooltip title="Theme">
                <Switch
                  className=" hidden sm:inline py-1"
                  checkedChildren={<MoonOutlined />}
                  unCheckedChildren={<SunOutlined />}
                  checked={mytheme === 'light' ? true : false}
                  onClick={() => dispatch(toggleTheme())}
                />
              </Tooltip>
              <Dropdown menu={{ items }} trigger={['click']}>
                <Flex>
                  <img
                    src={user?.avatar || "/me.jpg"}
                    alt="user profile photo"
                    height={36}
                    width={36}
                    style={{ borderRadius, objectFit: 'cover' }}
                  />
                </Flex>
              </Dropdown>
            </Flex>
          </HeaderNav>
          <Content
            style={{
              margin: `0 0 0 ${collapsed ? 0 : '200px'}`,
              // background: 'none',
              borderRadius: collapsed ? 0 : borderRadius,
              transition: 'all .25s',
              padding: '24px 32px',
              minHeight: 360,
            }}
          >
            <TransitionGroup>
              <SwitchTransition>
                <CSSTransition
                  key={`css-transition-${location.key}`}
                  nodeRef={nodeRef}
                  onEnter={() => {
                    setIsLoading(true);
                  }}
                  onEntered={() => {
                    setIsLoading(false);
                  }}
                  timeout={300}
                  classNames="bottom-to-top"
                  unmountOnExit
                >
                  {() => (
                    <div ref={nodeRef} style={{ background: 'none' }}>
                      {children}
                    </div>
                  )}
                </CSSTransition>
              </SwitchTransition>
            </TransitionGroup>
            <div ref={floatBtnRef}>
              <FloatButton.BackTop />
            </div>
          </Content>
          <FooterNav
            style={{
              textAlign: 'center',
              marginLeft: collapsed ? 0 : '200px',
              background: 'none',
            }}
          />
        </Layout>
      </Layout>
    </>
  );
};

src\layouts\app\FooterNav.tsx:
import { Layout } from 'antd';

const { Footer } = Layout;

type FooterNavProps = React.HTMLAttributes<HTMLDivElement>;

const FooterNav = ({ ...others }: FooterNavProps) => {
  return (
    <Footer {...others}></Footer>
  );
};

export default FooterNav;


src\layouts\app\HeaderNav.tsx:
import { Layout } from 'antd';
import { useRef } from 'react';

const { Header } = Layout;

type HeaderNavProps = {
  navFill?: boolean;
} & React.HTMLAttributes<HTMLDivElement>;

const HeaderNav = ({ navFill, ...others }: HeaderNavProps) => {
  const nodeRef = useRef(null);

  return <Header ref={nodeRef} {...others} />;
};

export default HeaderNav;


src\layouts\app\index.ts:
export { AppLayout } from './App.tsx';


src\layouts\app\SideNav.tsx:
import React, { useEffect, useRef, useState } from 'react';
import { ConfigProvider, Layout, Menu, MenuProps, SiderProps } from 'antd';
import {
  AppstoreAddOutlined,
  BranchesOutlined,
  BugOutlined,
  GithubOutlined,
  IdcardOutlined,
  InfoCircleOutlined,
  PieChartOutlined,
  ProductOutlined,
  SecurityScanOutlined,
  SnippetsOutlined,
  UserOutlined,
} from '@ant-design/icons';
import { Logo } from '../../components';
import { Link, useLocation } from 'react-router-dom';
import {
  PATH_ABOUT,
  PATH_AUTH,
  PATH_CORPORATE,
  PATH_DASHBOARD,
  PATH_DOCS,
  PATH_ERROR,
  PATH_GITHUB,
  PATH_LANDING,
  PATH_SITEMAP,
  PATH_USER_PROFILE,
} from '../../constants';
import { COLOR } from '../../App.tsx';

const { Sider } = Layout;

type MenuItem = Required<MenuProps>['items'][number];

const getItem = (
  label: React.ReactNode,
  key: React.Key,
  icon?: React.ReactNode,
  children?: MenuItem[],
  type?: 'group'
): MenuItem => {
  return {
    key,
    icon,
    children,
    label,
    type,
  } as MenuItem;
};

const items: MenuProps['items'] = [
  getItem('Dashboards', 'dashboards', <PieChartOutlined />, [
    getItem(<Link to={PATH_DASHBOARD.default}>Default</Link>, 'default', null),
    getItem(
      <Link to={PATH_DASHBOARD.projects}>Projects</Link>,
      'projects',
      null
    ),
    getItem(
      <Link to={PATH_DASHBOARD.ecommerce}>eCommerce</Link>,
      'ecommerce',
      null
    ),
    getItem(
      <Link to={PATH_DASHBOARD.events}>Events</Link>,
      'events',
      null
    ),
    getItem(
      <Link to={PATH_DASHBOARD.my_events}>My Events</Link>,
      'my events',
      null
    ),
    getItem(
      <Link to={PATH_DASHBOARD.participated_events}>Participated Events</Link>, // Add participated events item
      'participated-events',
      null
    ),
    getItem(
      <Link to={PATH_DASHBOARD.users}>Users</Link>,
      'users',
      null
    ),
    getItem(
      <Link to={PATH_DASHBOARD.marketing}>Marketing</Link>,
      'marketing',
      null
    ),
    getItem(<Link to={PATH_DASHBOARD.social}>Social</Link>, 'social', null),
    getItem(<Link to={PATH_DASHBOARD.bidding}>Bidding</Link>, 'bidding', null),
    getItem(
      <Link to={PATH_DASHBOARD.learning}>Learning</Link>,
      'learning',
      null
    ),
    getItem(
      <Link to={PATH_DASHBOARD.logistics}>Logistics</Link>,
      'logistics',
      null
    ),
  ]),
  // getItem(
  //   <Link to={PATH_ABOUT.root}>About</Link>,
  //   'about',
  //   <InfoCircleOutlined />
  // ),
  // getItem(
  //   <Link to={PATH_SITEMAP.root}>Sitemap</Link>,
  //   'sitemap',
  //   <BranchesOutlined />
  // ),

  getItem('Pages', 'pages', null, [], 'group'),

  getItem('Corporate', 'corporate', <IdcardOutlined />, [
    getItem(<Link to={PATH_CORPORATE.about}>About</Link>, 'about', null),
    getItem(<Link to={PATH_CORPORATE.team}>Team</Link>, 'team', null),
    getItem(<Link to={PATH_CORPORATE.faqs}>FAQ</Link>, 'faqs', null),
    getItem(
      <Link to={PATH_CORPORATE.contact}>Contact us</Link>,
      'contact us',
      null
    ),
    getItem(<Link to={PATH_CORPORATE.pricing}>Pricing</Link>, 'pricing', null),
    getItem(<Link to={PATH_CORPORATE.license}>License</Link>, 'license', null),
  ]),

  getItem('User profile', 'user-profile', <UserOutlined />, [
    getItem(
      <Link to={PATH_USER_PROFILE.details}>Details</Link>,
      'details',
      null
    ),
    getItem(
      <Link to={PATH_USER_PROFILE.preferences}>Preferences</Link>,
      'preferences',
      null
    ),
    getItem(
      <Link to={PATH_USER_PROFILE.personalInformation}>Information</Link>,
      'personal-information',
      null
    ),
    getItem(
      <Link to={PATH_USER_PROFILE.security}>Security</Link>,
      'security',
      null
    ),
    getItem(
      <Link to={PATH_USER_PROFILE.activity}>Activity</Link>,
      'activity',
      null
    ),
    getItem(
      <Link to={PATH_USER_PROFILE.action}>Actions</Link>,
      'actions',
      null
    ),
    getItem(<Link to={PATH_USER_PROFILE.help}>Help</Link>, 'help', null),
    getItem(
      <Link to={PATH_USER_PROFILE.feedback}>Feedback</Link>,
      'feedback',
      null
    ),
  ]),

  // getItem('Authentication', 'authentication', <SecurityScanOutlined />, [
  //   getItem(<Link to={PATH_AUTH.signin}>Sign In</Link>, 'auth-signin', null),
  //   getItem(<Link to={PATH_AUTH.signup}>Sign Up</Link>, 'auth-signup', null),
  //   getItem(<Link to={PATH_AUTH.welcome}>Welcome</Link>, 'auth-welcome', null),
  //   getItem(
  //     <Link to={PATH_AUTH.verifyEmail}>Verify email</Link>,
  //     'auth-verify',
  //     null
  //   ),
  //   getItem(
  //     <Link to={PATH_AUTH.passwordReset}>Password reset</Link>,
  //     'auth-password-reset',
  //     null
  //   ),
  //   // getItem(<Link to={PATH_AUTH.passwordConfirm}>Passsword confirmation</Link>, 'auth-password-confirmation', null),
  //   getItem(
  //     <Link to={PATH_AUTH.accountDelete}>Account deleted</Link>,
  //     'auth-account-deactivation',
  //     null
  //   ),
  // ]),

  // getItem('Errors', 'errors', <BugOutlined />, [
  //   getItem(<Link to={PATH_ERROR.error400}>400</Link>, '400', null),
  //   getItem(<Link to={PATH_ERROR.error403}>403</Link>, '403', null),
  //   getItem(<Link to={PATH_ERROR.error404}>404</Link>, '404', null),
  //   getItem(<Link to={PATH_ERROR.error500}>500</Link>, '500', null),
  //   getItem(<Link to={PATH_ERROR.error503}>503</Link>, '503', null),
  // ]),

  // getItem('Help', 'help', null, [], 'group'),
  // getItem(
  //   <Link to={PATH_DOCS.productRoadmap} target="_blank">
  //     Roadmap
  //   </Link>,
  //   'product-roadmap',
  //   <ProductOutlined />
  // ),
  // getItem(
  //   <Link to={PATH_DOCS.components} target="_blank">
  //     Components
  //   </Link>,
  //   'components',
  //   <AppstoreAddOutlined />
  // ),
  // getItem(
  //   <Link to={PATH_DOCS.help} target="_blank">
  //     Documentation
  //   </Link>,
  //   'documentation',
  //   <SnippetsOutlined />
  // ),
  // getItem(
  //   <Link to={PATH_GITHUB.repo} target="_blank">
  //     Give us a star
  //   </Link>,
  //   'give-us-a-star',
  //   <GithubOutlined />
  // ),
];

const rootSubmenuKeys = ['dashboards', 'corporate', 'user-profile'];

type SideNavProps = SiderProps;

const SideNav = ({ ...others }: SideNavProps) => {
  const nodeRef = useRef(null);
  const { pathname } = useLocation();
  const [openKeys, setOpenKeys] = useState(['']);
  const [current, setCurrent] = useState('');

  const onClick: MenuProps['onClick'] = (e) => {
    console.log('click ', e);
  };

  const onOpenChange: MenuProps['onOpenChange'] = (keys) => {
    const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1);
    if (latestOpenKey && rootSubmenuKeys.indexOf(latestOpenKey!) === -1) {
      setOpenKeys(keys);
    } else {
      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);
    }
  };

  useEffect(() => {
    const paths = pathname.split('/');
    setOpenKeys(paths);
    setCurrent(paths[paths.length - 1]);
  }, [pathname]);

  return (
    <Sider ref={nodeRef} breakpoint="lg" collapsedWidth="0" {...others}>
      <Logo
        color="blue"
        asLink
        href={PATH_LANDING.root}
        justify="center"
        gap="small"
        imgSize={{ h: 28, w: 28 }}
        style={{ padding: '1rem 0' }}
      />
      <ConfigProvider
        theme={{
          components: {
            Menu: {
              itemBg: 'none',
              itemSelectedBg: COLOR['100'],
              itemHoverBg: COLOR['50'],
              itemSelectedColor: COLOR['600'],
            },
          },
        }}
      >
        <Menu
          mode="inline"
          items={items}
          onClick={onClick}
          openKeys={openKeys}
          onOpenChange={onOpenChange}
          selectedKeys={[current]}
          style={{ border: 'none' }}
        />
      </ConfigProvider>
    </Sider>
  );
};

export default SideNav;


src\layouts\corporate\index.tsx:
import { AppLayout } from '../index.ts';
import { Button, Col, Row, Typography } from 'antd';
import { Link, Outlet, useLocation } from 'react-router-dom';
import {
  BlogsListCard,
  Card,
  PageHeader,
  SocialMediaCard,
} from '../../components';
import { HomeOutlined, IdcardOutlined } from '@ant-design/icons';
import { CORPORATE_ITEMS } from '../../constants';
import { useStylesContext } from '../../context';

const { Text, Title } = Typography;

const BLOGS_DATA = Array.from({ length: 23 }).map((_, i) => ({
  href: 'https://ant.design',
  title: `Lorem ipsum ${i}`,
  avatar: `https://xsgames.co/randomusers/avatar.php?g=pixel&key=${i}`,
  description:
    'Ant Design, a design language for background applications, is refined by Ant UED Team.',
  content:
    'We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.',
}));

export const CorporateLayout = () => {
  const { pathname } = useLocation();
  const stylesContext = useStylesContext();

  return (
    <>
      {/*@ts-ignore*/}
      <AppLayout>
        <PageHeader
          title="corporate"
          breadcrumbs={[
            {
              title: (
                <>
                  <HomeOutlined />
                  <span>home</span>
                </>
              ),
              path: '/',
            },
            {
              title: (
                <>
                  <IdcardOutlined />
                  <span>corporate</span>
                </>
              ),
              menu: {
                items: CORPORATE_ITEMS.map((d) => ({
                  key: d.title,
                  title: <Link to={d.path}>{d.title}</Link>,
                })),
              },
            },
            {
              title: pathname.split('/')[pathname.split('/').length - 1] || '',
            },
          ]}
        />
        <Row {...stylesContext?.rowProps}>
          <Col xs={24} md={16} xl={18}>
            <Outlet />
          </Col>
          <Col xs={24} md={8} xl={6}>
            <Row {...stylesContext?.rowProps}>
              <Col span={24}>
                <Card title="Careers" actions={[<Button>Explore more</Button>]}>
                  <Text>
                    Tortor id aliquet lectus proin nibh nisl condimentum. Semper
                    quis lectus nulla at volutpat. Faucibus nisl tincidunt eget
                    nullam non. Malesuada nunc vel risus commodo viverra. Lectus
                    vestibulum mattis ullamcorper velit sed ullamcorper morbi
                    tincidunt ornare.
                  </Text>
                  <Title level={5}>Requirements</Title>
                  <ul>
                    <li>Experience with JavaScript</li>
                    <li>Good time-management skills</li>
                    <li>Experience with React & Nextjs</li>
                    <li>Experience with HTML / CSS</li>
                  </ul>
                  <Title level={5}>Our Achievements</Title>
                  <ul>
                    <li>ISO Certified</li>
                    <li>Atlassian Partner</li>
                    <li>Amazon Partner</li>
                    <li>Google Partner</li>
                    <li>Microsoft Partner</li>
                  </ul>
                </Card>
              </Col>
              <Col span={24}>
                <BlogsListCard data={BLOGS_DATA} />
              </Col>
              <Col span={24}>
                <SocialMediaCard />
              </Col>
            </Row>
          </Col>
        </Row>
      </AppLayout>
    </>
  );
};


src\layouts\dashboards\index.tsx:
import { AppLayout } from '../app';
import { Outlet } from 'react-router-dom';

export const DashboardLayout = () => {
  return (
    <AppLayout>
      <Outlet />
    </AppLayout>
  );
};


src\layouts\eventDetails\index.tsx:
import { AppLayout } from '../index.ts';
import { Col, Row, Typography } from 'antd';
import { Link, Outlet, useLocation } from 'react-router-dom';
import { CiLocationOn, CiUser } from "react-icons/ci";
import {
  Card,
  PageHeader,
} from '../../components';
import { HomeOutlined, IdcardOutlined } from '@ant-design/icons';
import { CORPORATE_ITEMS } from '../../constants';
import { useStylesContext } from '../../context';

const { Text, Title } = Typography;
export const EventDetailLayout = () => {
  const { pathname } = useLocation();
  const stylesContext = useStylesContext();

  return (
    <>
      {/*@ts-ignore*/}
      <AppLayout>
        <PageHeader
          title="Event Details"
          breadcrumbs={[
            {
              title: (
                <>
                  <HomeOutlined />
                  <span>home</span>
                </>
              ),
              path: '/',
            },
            {
              title: (
                <>
                  <IdcardOutlined />
                  <span>event</span>
                </>
              ),
              menu: {
                items: CORPORATE_ITEMS.map((d) => ({
                  key: d.title,
                  title: <Link to={d.path}>{d.title}</Link>,
                })),
              },
            },
            {
              title: pathname.split('/')[pathname.split('/').length - 1] || '',
            },
          ]}
        />
        <Row {...stylesContext?.rowProps}>
          <Col xs={24} md={16} xl={18}>
            <Outlet />
          </Col>
          <Col xs={24} md={8} xl={6}>
            <Row {...stylesContext?.rowProps}>
              <Col span={24}>
                <Card title="Event info">
                  {/* <Title level={5}>status</Title> */}
                  <ul style={{listStyle : 'none'}} >
                    <li><CiLocationOn /> District 7, Ho Chi Minh City</li>
                    <li><CiUser /> 500 attendes</li>
                    {/* <li>Experience with React & Nextjs</li>
                    <li>Experience with HTML / CSS</li> */}
                  </ul>
                </Card>
              </Col>
            </Row>
          </Col>
        </Row>
      </AppLayout>
    </>
  );
};


src\layouts\guest\Guest.tsx:


src\layouts\userAccount\index.tsx:
import { AppLayout } from '../app';
import {
  Col,
  ConfigProvider,
  Descriptions,
  DescriptionsProps,
  Image,
  Row,
  Tabs,
  TabsProps,
  theme,
  Typography,
} from 'antd';
import { Card } from '../../components';
import { Outlet, useLocation, useNavigate } from 'react-router-dom';
import { USER_PROFILE_ITEMS } from '../../constants';
import { useStylesContext } from '../../context';

const { Link } = Typography;

import './styles.css';
import { useEffect, useState } from 'react';

const DESCRIPTION_ITEMS: DescriptionsProps['items'] = [
  {
    key: 'full-name',
    label: 'Name',
    children: <span>Kelvin Kiptum Kiprop</span>,
  },
  {
    key: 'job-title',
    label: 'Job title',
    children: <span>Software Engineer</span>,
  },
  {
    key: 'email',
    label: 'Email',
    children: (
      <Link href="mailto:kelvin.kiprop96@gmail.com">
        kelvin.kiprop96@gmail.com
      </Link>
    ),
  },
  {
    key: 'telephone',
    label: 'Phone',
    children: <Link href="tel:+254706094433">+254 706 094 4433</Link>,
  },
  {
    key: 'github',
    label: 'Github',
    children: (
      <Link href="https://github.com/kelvink96" target="_blank">
        kelvink96
      </Link>
    ),
  },
  {
    key: 'twitter',
    label: 'Twitter',
    children: (
      <Link href="https://twitter.com/kelvink_96" target="_blank">
        @kelvink_96
      </Link>
    ),
  },
];

const TAB_ITEMS: TabsProps['items'] = USER_PROFILE_ITEMS.map((u) => ({
  key: u.title,
  label: u.title,
}));

export const UserAccountLayout = () => {
  const {
    token: { borderRadius },
  } = theme.useToken();
  const navigate = useNavigate();
  const stylesContext = useStylesContext();
  const location = useLocation();
  const [activeKey, setActiveKey] = useState(TAB_ITEMS[0].key);

  const onChange = (key: string) => {
    navigate(key);
  };

  useEffect(() => {
    console.log(location);
    const k =
      TAB_ITEMS.find((d) => location.pathname.includes(d.key))?.key || '';

    console.log(k);
    setActiveKey(k);
  }, [location]);

  return (
    <>
      <AppLayout>
        <Card
          className="user-profile-card-nav card"
          actions={[
            <ConfigProvider
              theme={{
                components: {
                  Tabs: {
                    colorBorderSecondary: 'none',
                  },
                },
              }}
            >
              <Tabs
                defaultActiveKey={activeKey}
                activeKey={activeKey}
                items={TAB_ITEMS}
                onChange={onChange}
                style={{ textTransform: 'capitalize' }}
              />
            </ConfigProvider>,
          ]}
        >
          <Row {...stylesContext?.rowProps}>
            <Col xs={24} sm={8} lg={4}>
              <Image
                src="https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHx8MA%3D%3D&auto=format&fit=crop&w=500&q=60"
                alt="user profile image"
                height="100%"
                width="100%"
                style={{ borderRadius }}
              />
            </Col>
            <Col xs={24} sm={16} lg={20}>
              <Descriptions
                title="User Info"
                items={DESCRIPTION_ITEMS}
                column={{ xs: 1, sm: 2, md: 2, lg: 3, xl: 3, xxl: 4 }}
              />
            </Col>
          </Row>
        </Card>
        <div style={{ marginTop: '1.5rem' }}>
          <Outlet />
        </div>
      </AppLayout>
    </>
  );
};


src\layouts\userAccount\styles.css:
.user-profile-card-nav .ant-tabs-nav {
  margin: 0 0 0 1rem;
}

.user-profile-card-nav .ant-card-actions li:first-of-type {
  margin: 0;
}


src\pages\About.tsx:
import { Col, Flex, Row, Typography } from 'antd';
import { useStylesContext } from '../context';
import {
  BugOutlined,
  BulbOutlined,
  CodeOutlined,
  GithubOutlined,
  HomeOutlined,
  PieChartOutlined,
} from '@ant-design/icons';
import { Card, PageHeader } from '../components';
import { createElement } from 'react';
import { DASHBOARD_ITEMS, PATH_GITHUB } from '../constants';
import { Link } from 'react-router-dom';

const { Title, Text } = Typography;

const SITES = [
  {
    title: 'GitHub',
    description: 'Source code of the website.',
    icon: GithubOutlined,
    link: PATH_GITHUB.repo,
  },
  {
    title: 'Report Bug',
    description: 'Something not working? Report a bug',
    icon: BugOutlined,
    link: PATH_GITHUB.repo + '/issues/new/choose',
  },
  {
    title: 'Request Feature',
    description: 'Need something? Request a new feature.',
    icon: BulbOutlined,
    link: PATH_GITHUB.repo + '/issues/new/choose',
  },
  {
    title: 'Contribute',
    description: 'Contribute to this project.',
    icon: CodeOutlined,
    link: PATH_GITHUB.repo + '/blob/main/CONTRIBUTING.md',
  },
];

export const AboutPage = () => {
  const context = useStylesContext();

  return (
    <div>
      <Flex vertical gap="middle">
        <PageHeader
          title="About"
          breadcrumbs={[
            {
              title: (
                <>
                  <HomeOutlined />
                  <span>home</span>
                </>
              ),
              path: '/',
            },
            {
              title: (
                <>
                  <PieChartOutlined />
                  <span>dashboards</span>
                </>
              ),
              menu: {
                items: DASHBOARD_ITEMS.map((d) => ({
                  key: d.title,
                  title: <Link to={d.path}>{d.title}</Link>,
                })),
              },
            },
            {
              title: 'about',
            },
          ]}
        />
        <Card>
          <Flex vertical gap="small">
            <Title level={3} className="m-0">
              Antd Admin
            </Title>
            <Text>
              A dynamic and versatile multipurpose dashboard template built
              using React, Vite, Ant Design, and Storybook
            </Text>
          </Flex>
        </Card>
        <Row {...context?.rowProps}>
          {SITES.map((s) => (
            <Col xs={24} sm={12} key={`col-${s.title}`}>
              <a href={s.link} target="_blank" rel="noopener noreferrer">
                <Card hoverable>
                  <Flex vertical gap="small">
                    {createElement(s.icon, { style: { fontSize: 24 } })}
                    <Title level={5} className="m-0">
                      {s.title}
                    </Title>
                    <Text>{s.description}</Text>
                  </Flex>
                </Card>
              </a>
            </Col>
          ))}
        </Row>
      </Flex>
    </div>
  );
};


src\pages\Home.tsx:
import { Button, Col, Flex, Image, Row, theme, Typography } from 'antd';
import { useMediaQuery } from 'react-responsive';
import {
  PATH_AUTH,
  PATH_CORPORATE,
  PATH_DASHBOARD,
  PATH_ERROR,
  PATH_GITHUB,
  PATH_USER_PROFILE,
} from '../constants';
import { Link } from 'react-router-dom';
import {
  AntDesignOutlined,
  AppstoreOutlined,
  BorderOutlined,
  CalendarOutlined,
  EditOutlined,
  FileOutlined,
  FormatPainterOutlined,
  GithubOutlined,
  LoginOutlined,
  MergeCellsOutlined,
  PieChartOutlined,
  RocketFilled,
  TableOutlined,
} from '@ant-design/icons';
import { Card, Container } from '../components';
import { createElement, CSSProperties } from 'react';

const { Title, Text } = Typography;

const DASHBOARDS = [
  {
    title: 'bidding',
    link: PATH_DASHBOARD.bidding,
    image: '/showcase/dashboard/bidding.png',
  },
  {
    title: 'default',
    link: PATH_DASHBOARD.default,
    image: '/showcase/dashboard/default.png',
  },
  {
    title: 'ecommerce',
    link: PATH_DASHBOARD.ecommerce,
    image: '/showcase/dashboard/ecommerce.png',
  },
  {
    title: 'learning',
    link: PATH_DASHBOARD.learning,
    image: '/showcase/dashboard/learning.png',
  },
  {
    title: 'logistics',
    link: PATH_DASHBOARD.logistics,
    image: '/showcase/dashboard/logistics.png',
  },
  {
    title: 'marketing',
    link: PATH_DASHBOARD.marketing,
    image: '/showcase/dashboard/marketing.png',
  },
  {
    title: 'projects',
    link: PATH_DASHBOARD.projects,
    image: '/showcase/dashboard/projects.png',
  },
  {
    title: 'social',
    link: PATH_DASHBOARD.social,
    image: '/showcase/dashboard/social.png',
  },
];

const APPS = [
  {
    title: 'corporate',
    link: PATH_CORPORATE.team,
    image: '/showcase/corporate/team.png',
  },
  {
    title: 'user profile',
    link: PATH_USER_PROFILE.details,
    image: '/showcase/profile/details.png',
  },
  {
    title: 'auth',
    link: PATH_AUTH.signin,
    image: '/showcase/auth/login.png',
  },
  {
    title: 'errors',
    link: PATH_ERROR.error400,
    image: '/showcase/errors/400.png',
  },
];

const FEATURES = [
  {
    title: 'customizable theme',
    description:
      'We have included a configurable theme provider to customize your elegant admin.',
    icon: FormatPainterOutlined,
  },
  {
    title: '50+ Page Templates',
    description: 'We have 50+ pages to make your development easier.',
    icon: FileOutlined,
  },
  {
    title: '60+ UI components',
    description: 'Almost 60+ UI Components being given with Antd Admin Pack.',
    icon: AppstoreOutlined,
  },
  {
    title: 'Ant Design',
    description: 'Its been made with Ant Design and full responsive layout.',
    icon: AntDesignOutlined,
  },
  {
    title: '500+ font icons',
    description:
      'Lots of Icon Fonts are included here in the package of Antd Admin.',
    icon: BorderOutlined,
  },
  {
    title: 'Slick Carousel',
    description: 'The Last React Carousel You will Ever Need!.',
    icon: MergeCellsOutlined,
  },
  {
    title: 'Easy to Customize',
    description: 'Customization will be easy as we understand your pain.',
    icon: EditOutlined,
  },
  {
    title: 'Lots of Chart Options',
    description:
      'You name it and we have it, Yes lots of variations for Charts.',
    icon: PieChartOutlined,
  },
  {
    title: 'Lots of Table Examples',
    description: 'Data Tables are initial requirement and we added them.',
    icon: TableOutlined,
  },
  {
    title: 'Calendar Design',
    description: 'Calendar is available with our package & in nice design.',
    icon: CalendarOutlined,
  },
];

export const HomePage = () => {
  const {
    token: { colorPrimary },
  } = theme.useToken();
  const isMobile = useMediaQuery({ maxWidth: 769 });
  const isTablet = useMediaQuery({ maxWidth: 992 });

  const sectionStyles: CSSProperties = {
    paddingTop: isMobile ? 40 : 80,
    paddingBottom: isMobile ? 40 : 80,
    paddingRight: isMobile ? '1rem' : 0,
    paddingLeft: isMobile ? '1rem' : 0,
  };

  return (
    <div
      style={{
        // backgroundImage: "radial-gradient(rgba(255, 255, 255, 0.35) 40%, rgba(255, 255, 255, 1) 40%), url('/grid-3d.jpg')",
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        minHeight: '100vh',
      }}
    >
      <Flex
        vertical
        align="center"
        justify="center"
        style={{
          height: isTablet ? 600 : 800,
          width: '100%',
          padding: isMobile ? '2rem 1rem' : '5rem 0',
          // backgroundColor: 'rgba(255, 255, 255, 0.85)',
        }}
      >
        <Container>
          <Row style={{ alignItems: 'center' }}>
            <Col lg={12}>
              <Text
                style={{
                  color: colorPrimary,
                  fontSize: 16,
                  fontWeight: 700,
                }}
              >
                <RocketFilled /> Kick start your project with
              </Text>
              <Title
                style={{
                  fontSize: isMobile ? 36 : 40,
                  fontWeight: 900,
                  margin: '1.5rem 0',
                }}
              >
                A dynamic and versatile multipurpose{' '}
                <span className="text-highlight">dashboard</span> template built
                using <span className="text-highlight">React</span>,{' '}
                <span className="text-highlight">Vite</span>,{' '}
                <span className="text-highlight">Ant Design</span>, and{' '}
                <span className="text-highlight">Storybook</span>{' '}
              </Title>
              <Text style={{ fontSize: 20, marginBottom: '1.5rem' }}>
                <span className="text-highlight fw-bolder">60+</span> ready made
                components to use.
              </Text>
              <Flex
                gap="middle"
                vertical={isMobile}
                style={{ marginTop: '1.5rem' }}
              >
                <Link to={PATH_AUTH.signin}>
                  <Button
                    icon={<LoginOutlined />}
                    type="primary"
                    size="large"
                    block={isMobile}
                  >
                    Live preview
                  </Button>
                </Link>
                <Link to={PATH_GITHUB.repo}>
                  <Button
                    icon={<GithubOutlined />}
                    type="default"
                    size="large"
                    block={isMobile}
                  >
                    Give us a star
                  </Button>
                </Link>
              </Flex>
            </Col>
            {!isTablet && (
              <Col lg={12}>
                <Image src="/landing-frame.png" alt="dashboard image snippet" />
              </Col>
            )}
          </Row>
        </Container>
      </Flex>
      <Container style={sectionStyles}>
        <Title
          level={2}
          className="text-center"
          style={{ marginBottom: '2rem' }}
        >
          8 dashboard pages available
        </Title>
        <Row
          gutter={[
            { xs: 8, sm: 16, md: 24, lg: 32 },
            { xs: 8, sm: 16, md: 24, lg: 32 },
          ]}
        >
          {DASHBOARDS.map((dashboard) => (
            <Col key={dashboard.title} xs={24} lg={8} xl={6}>
              <Link to={dashboard.link}>
                <Card
                  hoverable
                  cover={<img src={dashboard.image} alt={dashboard.title} />}
                >
                  <Text className="m-0 text-capitalize">{dashboard.title}</Text>
                </Card>
              </Link>
            </Col>
          ))}
        </Row>
      </Container>
      <Container style={sectionStyles}>
        <Title
          level={2}
          className="text-center"
          style={{ marginBottom: '2rem' }}
        >
          3+ pages available
        </Title>
        <Row
          gutter={[
            { xs: 8, sm: 16, md: 24, lg: 32 },
            { xs: 8, sm: 16, md: 24, lg: 32 },
          ]}
        >
          {APPS.map((app) => (
            <Col key={app.title} xs={24} sm={12} lg={8} xl={6}>
              <Link to={app.link}>
                <Card hoverable cover={<img src={app.image} alt={app.title} />}>
                  <Text className="m-0 text-capitalize">{app.title}</Text>
                </Card>
              </Link>
            </Col>
          ))}
        </Row>
      </Container>
      <Container style={sectionStyles}>
        <Title
          level={2}
          className="text-center"
          style={{ marginBottom: '2rem' }}
        >
          Other Amazing Features & Flexibility Provided
        </Title>
        <Row
          gutter={[
            { xs: 8, sm: 16, md: 24, lg: 32 },
            { xs: 8, sm: 16, md: 24, lg: 32 },
          ]}
        >
          {FEATURES.map((feature) => (
            <Col key={feature.title} xs={24} md={12} lg={8}>
              <Card style={{ height: '100%' }}>
                <Flex vertical>
                  {createElement(feature.icon, {
                    style: { fontSize: 32, color: colorPrimary },
                  })}
                  <Title level={5} className="text-capitalize">
                    {feature.title}
                  </Title>
                  <Text>{feature.description}</Text>
                </Flex>
              </Card>
            </Col>
          ))}
        </Row>
      </Container>
      <Card
        style={{
          width: isMobile ? '95%' : 500,
          margin: '0 auto',
          textAlign: 'center',
        }}
      >
        <Title level={4} style={{ marginTop: 0 }}>
          Haven't found an answer to your question?
        </Title>
        <Text style={{ marginTop: '1rem' }}>
          Connect with us either on discord or email us
        </Text>
        <Flex gap="middle" justify="center" style={{ marginTop: '1rem' }}>
          <Button href="mailto:kelvin.kiprop96@gmail.com" type="primary">
            Email
          </Button>
          <Button target="_blank" href={`${PATH_GITHUB.repo}/issues`}>
            Submit an issue
          </Button>
        </Flex>
      </Card>
    </div>
  );
};


src\pages\index.ts:
export { HomePage } from './Home.tsx';
export { SitemapPage } from './Sitemap.tsx';
export * from './dashboards';
export * from './corporate';
export * from './userAccount';
export * from './authentication';
export * from './errors';
export * from './create';
export * from './details';

src\pages\Sitemap.tsx:
import { SitemapCard } from '../components';
import { Col, Flex, Row, Typography } from 'antd';
import {
  AUTHENTICATION_ITEMS,
  CORPORATE_ITEMS,
  DASHBOARD_ITEMS,
  ERROR_ITEMS,
  USER_PROFILE_ITEMS,
} from '../constants';
import { useStylesContext } from '../context';
import { BranchesOutlined } from '@ant-design/icons';

const SITES = [
  {
    title: 'dashboard',
    links: DASHBOARD_ITEMS,
  },
  {
    title: 'corporate',
    links: CORPORATE_ITEMS,
  },
  {
    title: 'user profile',
    links: USER_PROFILE_ITEMS,
  },
  {
    title: 'authentication',
    links: AUTHENTICATION_ITEMS,
  },
  {
    title: 'errors',
    links: ERROR_ITEMS,
  },
];

export const SitemapPage = () => {
  const context = useStylesContext();

  return (
    <div>
      <Flex vertical gap="middle">
        <Typography.Title level={3}>
          <BranchesOutlined /> Sitemap
        </Typography.Title>
        <Row {...context?.rowProps}>
          {SITES.map((s) => (
            <Col xs={24} sm={12} md={8} xl={6} key={`col-${s.title}`}>
              <SitemapCard data={s} style={{ height: '100%' }} />
            </Col>
          ))}
        </Row>
      </Flex>
    </div>
  );
};


src\pages\authentication\AccountDeactivate.tsx:
// src/pages/authentication/AccountDeactivate.tsx
import { Button, Flex, Typography, message } from 'antd';
import { Logo } from '../../components';
import { Link, useNavigate } from 'react-router-dom';
import { PATH_DASHBOARD } from '../../constants';
import { useState } from 'react';

const { Title, Text } = Typography;

export const AccountDeactivePage = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);

  const handleDeactivate = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${import.meta.env.VITE_APP_API_URL}/auth/account-delete`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      if (!response.ok) {
        throw new Error("Account deactivation failed");
      }
      message.success("Account deactivated successfully");
      navigate(PATH_DASHBOARD.default);
    } catch (error: any) {
      message.error(error.message || "Deactivation error");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Flex vertical gap="large" align="center" justify="center" style={{ height: '80vh' }}>
      <Logo color="blue" />
      <Title level={2} className="m-0">Deactivated Account</Title>
      <Text style={{ fontSize: 18 }}>
        Your account has been deactivated.
      </Text>
      <Button type="primary" onClick={handleDeactivate} loading={loading}>
        Reactivate Account
      </Button>
      <Link to={PATH_DASHBOARD.default}>
        <Button type="default">Go to Homepage</Button>
      </Link>
    </Flex>
  );
};


src\pages\authentication\ChangePassword.tsx:


src\pages\authentication\ForgotPassword.tsx:


src\pages\authentication\GoogleLogin.tsx:


src\pages\authentication\index.ts:
// src/pages/authentication/index.ts
export { SignUpPage } from './SignUp';
export { SignInPage } from './SignIn';
export { WelcomePage } from './Welcome';
export { VerifyEmailPage } from './VerifyEmail';
export { PasswordResetPage } from './PasswordReset';
export { AccountDeactivePage } from './AccountDeactivate';


src\pages\authentication\PasswordReset.tsx:
// src/pages/authentication/PasswordReset.tsx
import {
  Button,
  Col,
  Flex,
  Form,
  Input,
  message,
  Row,
  theme,
  Typography,
} from 'antd';
import { Logo } from '../../components';
import { useMediaQuery } from 'react-responsive';
import { PATH_DASHBOARD } from '../../constants';
import { useNavigate } from 'react-router-dom';
import { useState } from 'react';
import axios from 'axios';

const { Title, Text } = Typography;

type FieldType = {
  email?: string;
};

export const PasswordResetPage = () => {
  const {
    token: { colorPrimary },
  } = theme.useToken();
  const isMobile = useMediaQuery({ maxWidth: 769 });
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);

  const onFinish = async (values: any) => {
    setLoading(true);
    try {
      const response = await axios.post('/api/v1/auth/forgot-password', values);
      const data = response.data as { message: string };
      message.success(data.message);
      setTimeout(() => {
        navigate(PATH_DASHBOARD.default);
      }, 5000);

    } catch (error) {
      // message.error(error.response.data.message);
      message.error("Password reset failed!");
    }
    finally {
      setLoading(false);
    }
  };

  return (
    <Row style={{ minHeight: isMobile ? 'auto' : '100vh', overflow: 'hidden' }}>
      <Col xs={24} lg={12}>
        <Flex
          vertical
          align="center"
          justify="center"
          className="text-center"
          style={{ background: colorPrimary, height: '100%', padding: '1rem' }}
        >
          <Logo color="white" />
          <Title level={2} className="text-white">
            Welcome back to Antd Admin
          </Title>
          <Text className="text-white" style={{ fontSize: 18 }}>
            A dynamic and versatile multipurpose dashboard utilizing Ant Design,
            React, TypeScript, and Vite.
          </Text>
        </Flex>
      </Col>
      <Col xs={24} lg={12}>
        <Flex
          vertical
          align={isMobile ? 'center' : 'flex-start'}
          justify="center"
          gap="middle"
          style={{ height: '100%', width: '100%', padding: '2rem' }}
        >
          <Title className="m-0">Forgot password</Title>
          <Text>Enter your email to rest your password.</Text>
          <Form
            name="sign-up-form"
            layout="vertical"
            labelCol={{ span: 24 }}
            wrapperCol={{ span: 24 }}
            initialValues={{ remember: true }}
            onFinish={onFinish}
            autoComplete="off"
            requiredMark={false}
            style={{ width: '100%' }}
          >
            <Form.Item<FieldType>
              label="Email"
              name="email"
              rules={[{ required: true, message: 'Please input your email' },
              { type: 'email', message: 'Please enter a valid email' },
              ]}
            >
              <Input />
            </Form.Item>
            <Form.Item>
              <Flex align="center" gap="small">
                <Button
                  type="primary"
                  htmlType="submit"
                  size="middle"
                  loading={loading}
                >
                  Submit
                </Button>
                <Button type="text" size="middle" loading={loading}>
                  Cancel
                </Button>
              </Flex>
            </Form.Item>
          </Form>
        </Flex>
      </Col>
    </Row>
  );
};

src\pages\authentication\ResetPassword.tsx:


src\pages\authentication\SignIn.tsx:
// src\pages\authentication\SignIn.tsx
import React, { useState } from 'react';
import {
  Button,
  Col,
  Divider,
  Flex,
  Form,
  Input,
  message,
  Row,
  theme,
  Typography,
} from 'antd';
import {
  FacebookFilled,
  GoogleOutlined,
  TwitterOutlined,
} from '@ant-design/icons';
import { useMediaQuery } from 'react-responsive';
import { PATH_AUTH, PATH_DASHBOARD } from '../../constants';
import { useNavigate } from 'react-router-dom';
import authService from '../../services/authService';
import { useDispatch } from 'react-redux';
import { setUser } from '../../redux/userSlice';

const { Title, Text, Link } = Typography;

type FieldType = {
  email?: string;
  password?: string;
};

export const SignInPage = () => {
  const {
    token: { colorPrimary },
  } = theme.useToken();
  const isMobile = useMediaQuery({ maxWidth: 769 });
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const dispatch = useDispatch();

  const onFinish = async (values: FieldType) => {
    setLoading(true);
    try {
      const response = await authService.login(values) as unknown as {
        statusCode: number,
        message: string,
        data: {
          accessToken: string,
          user: any
        }
      };

      if (response.statusCode === 200) {
        message.success(response.message);

        localStorage.setItem('accessToken', response.data.accessToken);
        localStorage.setItem('user', JSON.stringify(response.data.user));
        dispatch(setUser(response.data.user));

        setTimeout(() => {
          navigate(PATH_DASHBOARD.default);
        }, 1000);
      } else {
        message.error(response.message || 'Login failed');
      }
    } catch (error: any) {
      console.error('Login failed:', error);
      message.error(error.message || 'Login failed');
    } finally {
      setLoading(false);
    }
  };

  const onFinishFailed = (errorInfo: any) => {
    console.log('Failed:', errorInfo);
  };

  const handleGoogleLogin = async () => {
    setLoading(true);
    try {
      const response = await authService.googleLogin() as unknown as {
        statusCode: number,
        message: string,
        data: { url: string }
      };

      if (response.statusCode === 200) {
        window.location.href = response.data.url;
      } else {
        message.error(response.message || 'Google Login failed');
      }
    } catch (error: any) {
      console.error('Google Login failed:', error);
      message.error(error.message || 'Google Login failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Row style={{ minHeight: isMobile ? 'auto' : '100vh', overflow: 'hidden' }}>
      <Col xs={24} lg={12}>
        <Flex
          vertical
          align="center"
          justify="center"
          className="text-center"
          style={{ background: colorPrimary, height: '100%', padding: '1rem' }}
        >
          <Title level={2} className="text-white">
            Welcome back to Event Management
          </Title>
          <Text className="text-white" style={{ fontSize: 18 }}>
            A Solution For Managing Your Event
          </Text>
        </Flex>
      </Col>
      <Col xs={24} lg={12}>
        <Flex
          vertical
          align={isMobile ? 'center' : 'flex-start'}
          justify="center"
          gap="middle"
          style={{ height: '100%', padding: '2rem' }}
        >
          <Title className="m-0">Login</Title>
          <Flex gap={4}>
            <Text>Don't have an account?</Text>
            <Link href={PATH_AUTH.signup}>Create an account here</Link>
          </Flex>
          <Form
            name="sign-in-form"
            layout="vertical"
            labelCol={{ span: 24 }}
            wrapperCol={{ span: 24 }}
            initialValues={{}}
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}
            autoComplete="off"
            requiredMark={false}
          >
            <Row gutter={[8, 0]}>
              <Col xs={24}>
                <Form.Item<FieldType>
                  label="Email"
                  name="email"
                  rules={[
                    { required: true, message: 'Please input your email' },
                  ]}
                >
                  <Input />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item<FieldType>
                  label="Password"
                  name="password"
                  rules={[
                    { required: true, message: 'Please input your password!' },
                  ]}
                >
                  <Input.Password autoComplete="current-password" />
                </Form.Item>
              </Col>
            </Row>
            <Form.Item>
              <Flex align="center" justify="space-between">
                <Button
                  type="primary"
                  htmlType="submit"
                  size="middle"
                  loading={loading}
                >
                  Continue
                </Button>
                <Link href={PATH_AUTH.passwordReset}>Forgot password?</Link>
              </Flex>
            </Form.Item>
          </Form>
          <Divider className="m-0">or</Divider>
          <Flex
            vertical={isMobile}
            gap="small"
            wrap="wrap"
            style={{ width: '100%' }}
          >
            <Button
              icon={<GoogleOutlined />}
              onClick={handleGoogleLogin}
              loading={loading}
            >
              Sign in with Google
            </Button>
            {/* You can add Facebook, Twitter login buttons here if needed */}
          </Flex>
        </Flex>
      </Col>
    </Row>
  );
};

src\pages\authentication\SignUp.tsx:
import React, { useState } from 'react';
import {
  Button,
  Col,
  Divider,
  Flex,
  Form,
  Input,
  message,
  Row,
  theme,
  Typography,
} from 'antd';
import {
  FacebookFilled,
  GoogleOutlined,
  TwitterOutlined,
} from '@ant-design/icons';
import { Logo } from '../../components';
import { useMediaQuery } from 'react-responsive';
import { PATH_AUTH, PATH_DASHBOARD } from '../../constants';
import { useNavigate } from 'react-router-dom';
import authService from '../../services/authService'; // Import service

const { Title, Text, Link } = Typography;

type FieldType = {
  name?: string;
  email?: string;
  password?: string;
  remember?: boolean;
};

export const SignUpPage = () => {
  const {
    token: { colorPrimary },
  } = theme.useToken();
  const isMobile = useMediaQuery({ maxWidth: 769 });
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);

  const onFinish = async (values: FieldType) => {
    setLoading(true);
    try {
      const response = await authService.register(values);
      console.log('Registration successful:', response);

      message.success('Registration successful, please login.');
      setTimeout(() => {
        navigate(PATH_AUTH.signin);
      }, 1000); // chuyển hướng đến trang đăng nhập sau 1s
    } catch (error: any) {
      console.error('Registration failed:', error);
      message.error(error.message || 'Registration failed');
    } finally {
      setLoading(false);
    }
  };

  const onFinishFailed = (errorInfo: any) => {
    console.log('Failed:', errorInfo);
  };

  return (
    <Row style={{ minHeight: isMobile ? 'auto' : '100vh', overflow: 'hidden' }}>
      <Col xs={24} lg={12}>
        <Flex
          vertical
          align="center"
          justify="center"
          className="text-center"
          style={{ background: colorPrimary, height: '100%', padding: '1rem' }}
        >
          <Logo color="white" />
          <Title level={2} className="text-white">
            Welcome to Antd Admin
          </Title>
          <Text className="text-white" style={{ fontSize: 18 }}>
            A dynamic and versatile multipurpose dashboard utilizing Ant Design,
            React, TypeScript, and Vite.
          </Text>
        </Flex>
      </Col>
      <Col xs={24} lg={12}>
        <Flex
          vertical
          align={isMobile ? 'center' : 'flex-start'}
          justify="center"
          gap="middle"
          style={{ height: '100%', padding: '2rem' }}
        >
          <Title className="m-0">Create an account</Title>
          <Flex gap={4}>
            <Text>Already have an account?</Text>
            <Link href={PATH_AUTH.signin}>Sign in here</Link>
          </Flex>
          <Flex
            vertical={isMobile}
            gap="small"
            wrap="wrap"
            style={{ width: '100%' }}
          >
            <Button icon={<GoogleOutlined />}>Sign up with Google</Button>
            <Button icon={<FacebookFilled />}>Sign up with Facebook</Button>
            <Button icon={<TwitterOutlined />}>Sign up with Twitter</Button>
          </Flex>
          <Divider className="m-0">or</Divider>
          <Form
            name="sign-up-form"
            layout="vertical"
            labelCol={{ span: 24 }}
            wrapperCol={{ span: 24 }}
            initialValues={{ remember: true }}
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}
            autoComplete="off"
            requiredMark={false}
          >
            <Row gutter={[8, 0]}>
              <Col xs={24}>
                <Form.Item<FieldType>
                  label="User name"
                  name="name"
                  rules={[
                    {
                      required: true,
                      message: 'Please input your name!',
                    },
                  ]}
                >
                  <Input />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item<FieldType>
                  label="Email"
                  name="email"
                  rules={[
                    { required: true, message: 'Please input your email' },
                  ]}
                >
                  <Input />
                </Form.Item>
              </Col>
              <Col xs={24}>
                <Form.Item<FieldType>
                  label="Password"
                  name="password"
                  rules={[
                    { required: true, message: 'Please input your password!' },
                  ]}
                >
                  <Input.Password />
                </Form.Item>
              </Col>
            </Row>
            <Form.Item>
              <Button
                type="primary"
                htmlType="submit"
                size="middle"
                loading={loading}
              >
                Submit
              </Button>
            </Form.Item>
          </Form>
        </Flex>
      </Col>
    </Row>
  );
};


src\pages\authentication\VerifyEmail.tsx:
// src/pages/authentication/VerifyEmail.tsx
import { Button, Flex, Typography, message } from 'antd';
import { Logo } from '../../components';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import { PATH_DASHBOARD } from '../../constants';
import { useState, useEffect } from 'react';

const { Title, Text } = Typography;

export const VerifyEmailPage = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [searchParams] = useSearchParams();
  const token = searchParams.get('token');

  const handleVerify = async () => {
    if (!token) {
      message.error("Missing verification token");
      return;
    }
    setLoading(true);
    try {
      const response = await fetch(`${import.meta.env.VITE_APP_API_URL}/auth/verify-email`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token }),
      });
      if (!response.ok) {
        throw new Error("Email verification failed");
      }
      message.success("Email verified successfully");
      navigate(PATH_DASHBOARD.default);
    } catch (error: any) {
      message.error(error.message || "Verification error");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    // Optionally auto-trigger verification on load
    // handleVerify();
  }, [token]);

  return (
    <Flex vertical gap="large" align="center" justify="center" style={{ height: '80vh' }}>
      <Logo color="blue" />
      <Title level={2} className="m-0">Verify Your Email</Title>
      <Text style={{ fontSize: 18 }}>
        Click the button below to verify your email.
      </Text>
      <Button type="primary" onClick={handleVerify} loading={loading}>
        Verify Email
      </Button>
      <Flex gap={2}>
        <Text>Didn't receive an email?</Text>
        <Link onClick={handleVerify} to={''}>Resend</Link>
      </Flex>
    </Flex>
  );
};


src\pages\authentication\Welcome.tsx:
// src/pages/authentication/Welcome.tsx
import { Button, Flex, Typography } from 'antd';
import { Logo } from '../../components';
import { Link } from 'react-router-dom';
import { PATH_DASHBOARD } from '../../constants';

const { Title, Text } = Typography;

export const WelcomePage = () => {
  return (
    <Flex vertical gap="large" align="center" justify="center" style={{ height: '80vh' }}>
      <Logo color="blue" />
      <Title level={2} className="m-0">Welcome to Our App</Title>
      <Text style={{ fontSize: 18 }}>
        Your account has been created successfully.
      </Text>
      <Link to={PATH_DASHBOARD.default}>
        <Button type="primary" size="middle">
          Go to Homepage
        </Button>
      </Link>
    </Flex>
  );
};


src\pages\corporate\About.tsx:
import {
  Alert,
  Card as AntdCard,
  Col,
  Flex,
  Image,
  List,
  Row,
  Typography,
} from 'antd';
import { Card, EmployeeCard } from '../../components';
import { Employee } from '../../types';
import { useStylesContext } from '../../context';
import CountUp from 'react-countup';
import { useFetchData } from '../../hooks';

const { Title, Text, Paragraph } = Typography;

export const CorporateAboutPage = () => {
  const stylesContext = useStylesContext();
  const {
    data: employeesData,
    loading: employeesDataLoading,
    error: employeesDataError,
  } = useFetchData('../mocks/Employees.json');

  return (
    <div>
      <Row {...stylesContext?.rowProps}>
        <Col span={24}>
          <Card title={<Title level={3}>About Design Sparx</Title>}>
            <Flex gap="small" vertical>
              <Text>Save time and resources by using our templates.</Text>
              <Image
                src="https://images.unsplash.com/photo-1483058712412-4245e9b90334?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTR8fGJyYW5kfGVufDB8MHwwfHx8MA%3D%3D&auto=format&fit=crop&w=400&q=60"
                alt="about us hero image"
                width="100%"
              />
              <Paragraph>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
                eiusmod tempor incididunt ut labore et dolore magna aliqua. Non
                tellus orci ac auctor augue mauris augue. Id diam vel quam
                elementum pulvinar. Nunc scelerisque viverra mauris in. Tortor
                aliquam nulla facilisi cras fermentum odio eu. Eleifend mi in
                nulla posuere sollicitudin aliquam ultrices. Quis commodo odio
                aenean sed adipiscing diam donec adipiscing tristique. Pharetra
                magna ac placerat vestibulum lectus mauris ultrices. Viverra
                accumsan in nisl nisi scelerisque eu ultrices vitae. Etiam
                tempor orci eu lobortis elementum nibh tellus molestie nunc.
                Iaculis eu non diam phasellus vestibulum lorem sed risus
                ultricies. Vestibulum lectus mauris ultrices eros in cursus
                turpis. Risus nec feugiat in fermentum posuere urna nec. Nam at
                lectus urna duis.
              </Paragraph>
              <Paragraph>
                Sit amet purus gravida quis blandit turpis cursus. Vulputate eu
                scelerisque felis imperdiet proin fermentum leo vel orci. Fusce
                id velit ut tortor pretium viverra suspendisse potenti.
              </Paragraph>
            </Flex>
          </Card>
        </Col>
        <Col span={24}>
          <Card title="Our great team">
            {employeesDataError ? (
              <Alert
                message="Error"
                description={employeesDataError.toString()}
                type="error"
                showIcon
              />
            ) : (
              <List
                grid={{
                  gutter: 16,
                  xs: 1,
                  sm: 2,
                  md: 3,
                  lg: 3,
                  xl: 4,
                  xxl: 4,
                }}
                pagination={{
                  onChange: (page) => {
                    console.log(page);
                  },
                  pageSize: 4,
                  align: 'center',
                }}
                dataSource={employeesData}
                loading={employeesDataLoading}
                renderItem={(item: Employee) => (
                  <List.Item key={item.employee_id}>
                    <EmployeeCard data={item} />
                  </List.Item>
                )}
              />
            )}
          </Card>
        </Col>
        <Col span={24}>
          <Card title="Our statistics">
            <Row gutter={[8, 8]}>
              <Col lg={8}>
                <AntdCard hoverable={false} className="text-center">
                  <Title className="m-0">
                    <CountUp end={100} /> %
                  </Title>
                  <Text>Satisfaction</Text>
                </AntdCard>
              </Col>
              <Col lg={8}>
                <AntdCard hoverable={false} className="text-center">
                  <Title className="m-0">
                    <CountUp end={124} /> K
                  </Title>
                  <Text>Customers</Text>
                </AntdCard>
              </Col>
              <Col lg={8}>
                <AntdCard hoverable={false} className="text-center">
                  <Title className="m-0">
                    $<CountUp end={24} /> K
                  </Title>
                  <Text>Worth in transactions</Text>
                </AntdCard>
              </Col>
            </Row>
          </Card>
        </Col>
      </Row>
    </div>
  );
};


src\pages\corporate\Contact.tsx:
import { Col, Row, RowProps, Space, Typography } from 'antd';
import { Card, ContactForm } from '../../components';
import { MailFilled, PhoneFilled } from '@ant-design/icons';

const { Link, Text, Paragraph } = Typography;

const ROW_PROPS: RowProps = {
  gutter: [
    { xs: 8, sm: 16, md: 24, lg: 32 },
    { xs: 8, sm: 16, md: 24, lg: 32 },
  ],
};

const textStyles: React.CSSProperties = {
  display: 'flex',
  justifyContent: 'space-between',
};

const cardStyles: React.CSSProperties = {
  height: '100%',
};

export const CorporateContactPage = () => {
  return (
    <div>
      <Row {...ROW_PROPS}>
        <Col sm={24} lg={12}>
          <Card title="Phone" extra={<PhoneFilled />} style={cardStyles}>
            <Space direction="vertical" style={{ width: '100%' }}>
              <Text style={textStyles}>
                Nairobi: <Link strong>(254) 000-0000</Link>
              </Text>
              <Text style={textStyles}>
                Kampala: <Link strong>(255) 000-0000</Link>
              </Text>
              <Text style={textStyles}>
                Dodoma: <Link strong>(256) 000-0000</Link>
              </Text>
            </Space>
            <Paragraph style={{ textAlign: 'center', margin: '1rem 0 0 0' }}>
              We are available during weekdays and office hours (8AM-5PM), feel
              free to leave us a call.
            </Paragraph>
          </Card>
        </Col>
        <Col sm={24} lg={12}>
          <Card title="Email" extra={<MailFilled />} style={cardStyles}>
            <Space direction="vertical" style={{ width: '100%' }}>
              <Text style={textStyles}>
                Sales: <Link strong>biz@sparx.com</Link>
              </Text>
              <Text style={textStyles}>
                Support: <Link strong>help@sparx.com</Link>
              </Text>
            </Space>
            <Paragraph style={{ textAlign: 'center', margin: '1rem 0 0 0' }}>
              We are available everyday, feel free to write to us.
            </Paragraph>
          </Card>
        </Col>
        <Col span={24}>
          <Card title="Contact form">
            <ContactForm />
          </Card>
        </Col>
      </Row>
    </div>
  );
};


src\pages\corporate\Faqs.tsx:
import { Alert, Col, Row, Space, Typography } from 'antd';
import { Card, FaqCollapse, Loader } from '../../components';
import * as _ from 'lodash';
import { useEffect, useState } from 'react';
import { Faq } from '../../types';
import { useStylesContext } from '../../context';
import { useFetchData } from '../../hooks';

export const CorporateFaqPage = () => {
  const {
    data: faqsData,
    loading: faqsDataLoading,
    error: faqsDataError,
  } = useFetchData('../mocks/Faqs.json');
  const [faqs, setFaqs] = useState<{ category: string; items: Faq[] }[]>([]);
  const stylesContext = useStylesContext();

  useEffect(() => {
    const data = _.chain(faqsData)
      .groupBy('category')
      .map((items, category) => {
        return {
          category,
          items: items.slice(0, 4).map((i) => ({
            ...i,
            label: i.question.slice(0, 50) + '...?',
            children: i.answer,
          })),
        };
      })
      .orderBy('category')
      .value();

    setFaqs(data);
  }, [faqsData]);

  return (
    <div>
      <Row {...stylesContext?.rowProps}>
        <Col span={24}>
          <Card title="Frequently askes questions (FAQs)">
            {faqsDataError ? (
              <Alert
                message="Error"
                description={faqsDataError.toString()}
                type="error"
                showIcon
              />
            ) : faqsDataLoading ? (
              <Loader />
            ) : (
              <Space
                direction="vertical"
                size="middle"
                style={{ width: '100%' }}
              >
                {faqs.map((f) => (
                  <>
                    <Typography.Text strong>{f.category}</Typography.Text>
                    <FaqCollapse items={f.items} accordion />
                  </>
                ))}
              </Space>
            )}
          </Card>
        </Col>
      </Row>
    </div>
  );
};


src\pages\corporate\index.ts:
export { CorporateAboutPage } from './About.tsx';
export { CorporateTeamPage } from './Team.tsx';
export { CorporateFaqPage } from './Faqs.tsx';
export { CorporateContactPage } from './Contact.tsx';
export { CorporatePricingPage } from './Pricing.tsx';
export { CorporateLicensePage } from './Licence.tsx';


src\pages\corporate\Licence.tsx:
import { Alert, Card as AntCard, Col, Row, Typography } from 'antd';
import { Card, Loader } from '../../components';
import { useStylesContext } from '../../context';
import { useFetchData } from '../../hooks';

export const CorporateLicensePage = () => {
  const stylesContext = useStylesContext();
  const {
    data: licenseData,
    error: licenseDataError,
    loading: licenseDataLoading,
  } = useFetchData('../mocks/License.json');

  return (
    <div>
      <Row {...stylesContext?.rowProps}>
        <Col span={24}>
          <Card title="licence comparisons">
            {licenseDataError ? (
              <Alert
                message="Error"
                description={licenseDataError.toString()}
                type="error"
                showIcon
              />
            ) : licenseDataLoading ? (
              <Loader />
            ) : (
              licenseData.map((l: any) => (
                <AntCard
                  title={`${l.title} plan license`}
                  bordered={true}
                  style={{ marginBottom: '1rem' }}
                >
                  <Typography.Text>{l.description}</Typography.Text>
                </AntCard>
              ))
            )}
          </Card>
        </Col>
        <Col span={24}>
          <Card title="general terms and conditions">
            <ul>
              <li>
                All licenses are subject to adherence to the terms of service
                and acceptable use policies outlined by the provider.
              </li>
              <li>
                Users must not remove or alter any copyright notices or branding
                present in the template.
              </li>
              <li>
                Users are responsible for the content and data they upload or
                display using the dashboard template.
              </li>
              <li>
                The provider reserves the right to terminate the license in case
                of violation of terms or misuse of the template.
              </li>
              <li>
                Refunds are subject to the refund policy of the provider and are
                applicable within the specified period after the purchase.
              </li>
            </ul>
          </Card>
        </Col>
      </Row>
    </div>
  );
};


src\pages\corporate\Pricing.tsx:
import { PricingTable } from '../../components';
import { useFetchData } from '../../hooks';

export const CorporatePricingPage = () => {
  const {
    data: pricingData,
    error: pricingDataError,
    loading: pricingDataLoading,
  } = useFetchData('../mocks/Pricing.json');

  return (
    <div>
      <PricingTable
        data={pricingData}
        error={pricingDataError}
        loading={pricingDataLoading}
      />
    </div>
  );
};


src\pages\corporate\Team.tsx:
import { Alert, Col, List, Row } from 'antd';
import { Card, EmployeeCard } from '../../components';
import { Employee } from '../../types';
import { useFetchData } from '../../hooks';
import { useStylesContext } from '../../context';

export const CorporateTeamPage = () => {
  const stylesContext = useStylesContext();
  const {
    data: employeesData,
    loading: employeesDataLoading,
    error: employeesDataError,
  } = useFetchData('../mocks/Employees.json');

  return (
    <div>
      <Row {...stylesContext?.rowProps}>
        <Col span={24}>
          <Card title="Our team">
            {employeesDataError ? (
              <Alert
                message="Error"
                description={employeesDataError.toString()}
                type="error"
                showIcon
              />
            ) : (
              <List
                grid={{
                  gutter: 16,
                  xs: 1,
                  sm: 2,
                  md: 3,
                  lg: 3,
                  xl: 4,
                  xxl: 4,
                }}
                pagination={{
                  onChange: (page) => {
                    console.log(page);
                  },
                  pageSize: 10,
                  align: 'center',
                }}
                loading={employeesDataLoading}
                dataSource={employeesData}
                renderItem={(item: Employee) => (
                  <List.Item key={item.employee_id}>
                    <EmployeeCard data={item} showInfo={true} />
                  </List.Item>
                )}
              />
            )}
          </Card>
        </Col>
      </Row>
    </div>
  );
};


src\pages\create\Events.tsx:
// src\pages\create\Events.tsx
import { Button, Col, DatePicker, Form, Input, InputNumber, message, Modal, Row, Select, Typography, Checkbox, Alert } from 'antd';
import { Card, Loader } from '../../components';
import { SaveOutlined } from '@ant-design/icons';
import { Events } from '../../types';
import { useState, useEffect } from 'react';
import { useFetchData } from '../../hooks';
import { useNavigate } from 'react-router-dom';
import { PATH_DASHBOARD } from '../../constants';
import authService from '../../services/authService'; // Import authService
import dayjs from 'dayjs';

type FieldType = {
    name: string;
    description?: string;
    startDate: any; // Date type from DatePicker is 'dayjs'
    endDate: any;   // Date type from DatePicker is 'dayjs'
    location: string;
    categoryId: string;
    maxParticipants?: number;
    isFree?: boolean;
    price?: number;
    banner?: string;
    videoIntro?: string;
};

export const CreateEventPage = () => {
    const { data: users } = useFetchData('../mocks/Users.json');

    const [loading, setLoading] = useState(false);
    // Modal State for create event type
    const [isCreateTypeModalOpen, setIsCreateTypeModalOpen] = useState<any>(false);
    const [types, setTypes] = useState<any>([]); // Initialize types as empty array
    const [categoriesLoading, setCategoriesLoading] = useState(false);
    const [categoriesError, setCategoriesError] = useState<string | null>(null);


    const [form] = Form.useForm();
    const navigate = useNavigate();

    useEffect(() => {
        const fetchEventCategories = async () => {
            setCategoriesLoading(true);
            try {
                const accessToken = localStorage.getItem('accessToken');
                if (!accessToken) {
                    message.error("No access token found. Please login again.");
                    navigate(PATH_DASHBOARD.default);
                    return;
                }
                const response = await authService.getCategories(accessToken) as { statusCode: number; data: { categories: any[] } };
                if (response.statusCode === 200 && response.data.categories) {
                    setTypes(response.data.categories.map((category: any) => ({
                        value: category.id,
                        label: category.name,
                    })));
                } else {
                    setCategoriesError("Failed to load event categories.");
                    message.error("Failed to load event categories.");
                }
            } catch (error: any) {
                console.error("Failed to load event categories:", error);
                setCategoriesError("Failed to load event categories.");
                message.error("Failed to load event categories.");
            } finally {
                setCategoriesLoading(false);
            }
        };

        fetchEventCategories();
    }, [navigate]);


    const showCreateTypeModal = () => {
        setIsCreateTypeModalOpen(true);
    };

    const handleOkCreateType = () => {
        setIsCreateTypeModalOpen(false);
        form.submit()
    };

    const handleCancelCreateType = () => {
        setIsCreateTypeModalOpen(false);
    };


    const onFinish = async (values: FieldType) => {
        setLoading(true);
        try {
            const accessToken = localStorage.getItem('accessToken');
            if (!accessToken) {
                message.error("No access token found. Please login again.");
                navigate(PATH_DASHBOARD.default);
                return;
            }

            const eventData = {
                name: values.name,
                description: values.description,
                startDate: values.startDate.toISOString(), // Convert to ISO string
                endDate: values.endDate.toISOString(),     // Convert to ISO string
                location: values.location,
                categoryId: values.categoryId,
                maxParticipants: values.maxParticipants,
                isFree: values.isFree || false, // Default to false if not checked
                price: values.price,
                banner: values.banner,
                videoIntro: values.videoIntro,
                schedule: [], // Empty schedule for now
                guestIds: [],   // Empty guestIds for now
            };


            const response = await authService.createEvent(eventData, accessToken) as { statusCode: number; message: string };
            if (response && response.statusCode === 201) {
                message.success(response.message);
                setTimeout(() => {
                    navigate(PATH_DASHBOARD.my_events);
                }, 1000);
            } else {
                if (response && 'message' in response) {
                    message.error(response.message);
                } else {
                    message.error('Failed to create event');
                }
            }
        } catch (error: any) {
            console.error('Error creating event:', error);
            message.error(error.message || 'Failed to create event');
        } finally {
            setLoading(false);
        }
    };

    // Modal State for create user
    const [isCreateUserModalOpen, setIsCreateUserModalOpen] = useState<any>(false);

    const showCreateUserModal = () => {
        setIsCreateUserModalOpen(true);
    };

    const handleOkCreateUser = () => {
        setIsCreateUserModalOpen(false);
    };

    const handleCancelCreateUser = () => {
        setIsCreateUserModalOpen(false);
    };

    const onFinishFailed = (errorInfo: any) => {
        console.log('Failed:', errorInfo);
    };

    const onFinishType = async (values: any) => {
        setCategoriesLoading(true);
        try {
            const accessToken = localStorage.getItem('accessToken');
            if (!accessToken) {
                message.error("No access token found. Please login again.");
                navigate(PATH_DASHBOARD.default);
                return;
            }
            const response = await authService.createCategory({ name: values.event_type, description: "" }, accessToken) as { statusCode: number; message: string; data: { category: { id: string; name: string } } };
            if (response && response.statusCode === 201) {
                message.success(response.message);
                // Update types with the new category
                setTypes([...types, { value: response.data.category.id, label: response.data.category.name }]);
                form.setFieldsValue({ categoryId: response.data.category.id }); // Optionally select the new category
                setIsCreateTypeModalOpen(false);
            } else {
                message.error(response?.message || 'Failed to create event type');
            }
        } catch (error: any) {
            console.error('Error creating event type:', error);
            message.error(error.message || 'Failed to create event type');
        } finally {
            setCategoriesLoading(false);
        }
    };

    return (
        <Card title="Create New Event">
             {categoriesError && (
                <Alert
                    message="Error"
                    description={categoriesError}
                    type="error"
                    showIcon
                    closable
                    onClose={() => setCategoriesError(null)}
                    style={{ marginBottom: 10 }}
                />
            )}
            <Modal title="Create Event Type" open={isCreateTypeModalOpen} onOk={handleOkCreateType} onCancel={handleCancelCreateType}>
                <Form layout='vertical'
                    onFinish={onFinishType}
                    form={form}
                >
                    <Form.Item label="Event Type" name="event_type" rules={[{ required: true, message: 'Please input event type!' }]}>
                        <Input placeholder="Enter Event Type" />
                    </Form.Item>
                    <Form.Item>
                        <Button type="primary" htmlType="submit" loading={categoriesLoading}>
                            Create Type
                        </Button>
                    </Form.Item>
                </Form>
            </Modal>
            <Modal title="Create Event User" open={isCreateUserModalOpen} onOk={handleOkCreateUser} onCancel={handleCancelCreateUser}>
                <Form layout='vertical'>
                    <Form.Item label="User's Email">
                        <Input placeholder="example@email.com" />
                    </Form.Item>
                    <Form.Item label="User's Full Name">
                        <Input placeholder="John Doe" />
                    </Form.Item>
                    <Form.Item label="User's Title">
                        <Input placeholder="Software Engineer" />
                    </Form.Item>
                </Form>
            </Modal>
            <Form
                name="create-event-form"
                layout="vertical"
                onFinish={onFinish}
                onFinishFailed={onFinishFailed}
                autoComplete="on"
                requiredMark={false}
            >
                <Row gutter={[16, 0]}>
                    <Col sm={24} lg={24}>
                        <Form.Item<FieldType>
                            label="Event's Name"
                            name="name"
                            rules={[{ required: true, message: 'Please input your event name!' }]}
                        >
                            <Input
                                placeholder='Tech Conference 2026'
                            />
                        </Form.Item>
                    </Col>
                    <Col sm={24} lg={24}>
                        <Form.Item<FieldType>
                            label="Event's Description"
                            name="description"
                            rules={[{ required: false }]}
                        >
                            <Input.TextArea
                                rows={3}
                                placeholder='A major event about technology and innovation (optional)'
                            />
                        </Form.Item>
                    </Col>
                    <Col sm={24} lg={8}>
                        <Form.Item<FieldType>
                            label="Event's Capacity"
                            name="maxParticipants"
                            rules={[{ required: false, message: 'Please input event capacity!' }]}
                        >
                            <InputNumber style={{ width: "100%" }} min={0} placeholder="Unlimited if empty" />
                        </Form.Item>
                    </Col>
                    <Col sm={24} lg={8}>
                        <Form.Item<FieldType>
                            label="Start At"
                            name="startDate"
                            rules={[
                                { required: true, message: 'Please input your start of event' },
                            ]}
                        >
                            <DatePicker style={{ width: "100%" }} showTime format="YYYY-MM-DD HH:mm:ss" />
                        </Form.Item>
                    </Col>
                    <Col sm={24} lg={8}>
                        <Form.Item<FieldType>
                            label="End At"
                            name="endDate"
                            rules={[
                                { required: true, message: 'Please input your end of event' },
                            ]}
                        >
                            <DatePicker style={{ width: "100%" }} showTime format="YYYY-MM-DD HH:mm:ss" />
                        </Form.Item>
                    </Col>
                    <Col sm={24} lg={12}>
                        <Form.Item<FieldType>
                            label="Location"
                            name="location"
                            rules={[{ required: true, message: 'Please input event location!' }]}
                        >
                            <Input placeholder="Hall A, University Campus" />
                        </Form.Item>
                    </Col>
                    <Col sm={24} lg={12}>
                        <Form.Item<FieldType>
                            label="Event Type"
                            name="categoryId" // Using categoryId to match API request
                            rules={[
                                { required: true, message: 'Please input your event type!' },
                            ]}
                        >
                            <Select
                                dropdownRender={(menu) => (
                                    <>
                                        {menu}
                                        <Button type="text" style={{ width: "100%" }} onClick={showCreateTypeModal} loading={categoriesLoading} >
                                            Create New Type
                                        </Button>
                                    </>
                                )}
                                options={types} // Use fetched categories here
                                placeholder="Select Event Type"
                                loading={categoriesLoading}
                            />
                        </Form.Item>
                    </Col>
                    <Col sm={24} lg={12}>
                        <Form.Item<FieldType>
                            label="Banner URL (Optional)"
                            name="banner"
                            rules={[{ required: false }]}
                        >
                            <Input placeholder="https://example.com/banner.jpg" />
                        </Form.Item>
                    </Col>
                    <Col sm={24} lg={12}>
                        <Form.Item<FieldType>
                            label="Video Intro URL (Optional)"
                            name="videoIntro"
                            rules={[{ required: false }]}
                        >
                            <Input placeholder="https://example.com/video.mp4" />
                        </Form.Item>
                    </Col>
                    

                </Row>

                <Form.Item>
                    <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={loading} disabled={categoriesLoading}>
                        Create Event
                    </Button>
                </Form.Item>
            </Form>
        </Card>
    );
};

src\pages\create\index.ts:
export {CreateEventPage} from './Events';

src\pages\dashboards\Bidding.tsx:
import {
  Button,
  Col,
  Flex,
  Popover,
  Row,
  RowProps,
  Select,
  Typography,
} from 'antd';
import {
  AuctionCarousel,
  BiddingCategoriesCard,
  Card,
  CreatorsCard,
  PageHeader,
  TopItemsCard,
  TransactionsCard,
} from '../../components';
import {
  HomeOutlined,
  PieChartOutlined,
  QuestionOutlined,
} from '@ant-design/icons';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { useFetchData } from '../../hooks';

const ROW_PROPS: RowProps = {
  gutter: [
    { xs: 8, sm: 16, md: 24, lg: 32 },
    { xs: 8, sm: 16, md: 24, lg: 32 },
  ],
};

export const BiddingDashboardPage = () => {
  const {
    data: auctionData,
    loading: auctionDataLoading,
    error: auctionDataError,
  } = useFetchData('../mocks/LiveAuction.json');
  const {
    data: auctionCreatorsData,
    loading: auctionCreatorsDataLoading,
    error: auctionCreatorsDataError,
  } = useFetchData('../mocks/AuctionCreators.json');
  const {
    data: topSellersData,
    loading: topSellersDataLoading,
    error: topSellersDataError,
  } = useFetchData('../mocks/BiddingTopSellers.json');
  const {
    data: transactionsData,
    loading: transactionsDataLoading,
    error: transactionsDataError,
  } = useFetchData('../mocks/BiddingTransactions.json');

  return (
    <div>
      <Helmet>
        <title>Bidding | Antd Dashboard</title>
      </Helmet>
      <PageHeader
        title="bidding dashboard"
        breadcrumbs={[
          {
            title: (
              <>
                <HomeOutlined />
                <span>home</span>
              </>
            ),
            path: '/',
          },
          {
            title: (
              <>
                <PieChartOutlined />
                <span>dashboards</span>
              </>
            ),
            menu: {
              items: DASHBOARD_ITEMS.map((d) => ({
                key: d.title,
                title: <Link to={d.path}>{d.title}</Link>,
              })),
            },
          },
          {
            title: 'bidding',
          },
        ]}
      />
      <Row {...ROW_PROPS}>
        <Col sm={24} md={24} xl={18}>
          <Flex align="center" justify="space-between">
            <Typography.Title level={4}>Live auctions</Typography.Title>
            <Select
              defaultValue="Popular"
              style={{ width: 120 }}
              options={[
                { value: 'Popular', label: 'Popular' },
                { value: 'Trending', label: 'Trending' },
                { value: 'Following', label: 'Following' },
                { value: 'Price', label: 'Price' },
              ]}
            />
          </Flex>
          <AuctionCarousel
            data={auctionData}
            loading={auctionDataLoading}
            error={auctionDataError}
          />
        </Col>
        <Col xs={24} md={24} xl={6}>
          <Typography.Title level={4}>Account status</Typography.Title>
          <Row {...ROW_PROPS}>
            <Col md={12} xl={24}>
              <Card
                title="Wallet"
                extra={
                  <Popover content="Your account balance">
                    <Button icon={<QuestionOutlined />} type="text" />
                  </Popover>
                }
              >
                <Flex vertical gap="middle">
                  <Typography.Title level={2} className="m-0">
                    $4892.00
                  </Typography.Title>
                  <Button>Check Transactions</Button>
                </Flex>
              </Card>
            </Col>
            <Col md={12} xl={24}>
              <Card
                title="Revenue"
                extra={
                  <Popover content="Revenue is retrieved by your staked.">
                    <Button icon={<QuestionOutlined />} type="text" />
                  </Popover>
                }
              >
                <Flex vertical gap="middle">
                  <Typography.Title level={2} className="m-0">
                    $210.00
                  </Typography.Title>
                  <Button>Read</Button>
                </Flex>
              </Card>
            </Col>
          </Row>
        </Col>
        <Col xs={24} xl={12}>
          <CreatorsCard
            data={auctionCreatorsData}
            loading={auctionCreatorsDataLoading}
            error={auctionCreatorsDataError}
          />
        </Col>
        <Col xs={24} xl={12}>
          <BiddingCategoriesCard style={{ height: '100%' }} />
        </Col>
        <Col xs={24} xl={12}>
          <TopItemsCard
            data={topSellersData}
            loading={topSellersDataLoading}
            error={topSellersDataError}
            style={{ height: '100%' }}
          />
        </Col>
        <Col xs={24} xl={12}>
          <TransactionsCard
            data={transactionsData}
            loading={transactionsDataLoading}
            error={transactionsDataError}
            style={{ height: '100%' }}
          />
        </Col>
      </Row>
    </div>
  );
};


src\pages\dashboards\Default.tsx:
import { useRef } from 'react';
import {
  Card,
  GetStartedCard,
  Loader,
  NotificationsCard,
  PageHeader,
  ProjectsCard,
  TasksChartCard,
  TasksListCard,
  WeeklyActivityCard,
} from '../../components';
import {
  Alert,
  Button,
  CardProps,
  Carousel,
  CarouselProps,
  Col,
  Flex,
  Row,
  Typography,
} from 'antd';
import { HomeOutlined, PieChartOutlined } from '@ant-design/icons';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { useStylesContext } from '../../context';
import { useFetchData } from '../../hooks';
import { Projects } from '../../types';
import CountUp from 'react-countup';

const ACTIVITY_DATA = [
  {
    day: 'Monday',
    value: 10,
  },
  {
    day: 'Tuesday',
    value: 22,
  },
  {
    day: 'Wednesday',
    value: 25,
  },
  {
    day: 'Thursday',
    value: 26,
  },
  {
    day: 'Friday',
    value: 15,
  },
  {
    day: 'Saturday',
    value: 12,
  },
  {
    day: 'Sunday',
    value: 3,
  },
];

const TASKS_DATA = [
  {
    day: 'Monday',
    value: 33,
    status: 'new',
  },
  {
    day: 'Tuesday',
    value: 44,
    status: 'new',
  },
  {
    day: 'Wednesday',
    value: 35,
    status: 'new',
  },
  {
    day: 'Thursday',
    value: 55,
    status: 'new',
  },
  {
    day: 'Friday',
    value: 49,
    status: 'new',
  },
  {
    day: 'Saturday',
    value: 63,
    status: 'new',
  },
  {
    day: 'Sunday',
    value: 72,
    status: 'new',
  },
  {
    day: 'Monday',
    value: 69,
    status: 'in progress',
  },
  {
    day: 'Tuesday',
    value: 81,
    status: 'in progress',
  },
  {
    day: 'Wednesday',
    value: 34,
    status: 'in progress',
  },
  {
    day: 'Thursday',
    value: 25,
    status: 'in progress',
  },
  {
    day: 'Friday',
    value: 39,
    status: 'in progress',
  },
  {
    day: 'Saturday',
    value: 45,
    status: 'in progress',
  },
  {
    day: 'Sunday',
    value: 60,
    status: 'in progress',
  },
];

const CAROUSEL_PROPS: CarouselProps = {
  slidesToShow: 1,
  slidesToScroll: 1,
};

const CARD_PROPS: CardProps = {
  style: {
    height: '100%',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    gap: 8,
  },
};

export const DefaultDashboardPage = () => {
  const stylesContext = useStylesContext();
  const sliderRef1 = useRef<any>(null);
  const sliderRef2 = useRef<any>(null);
  const {
    data: tasksListData = [],
    error: tasksListError,
    loading: tasksListLoading,
  } = useFetchData('../mocks/TasksList.json');
  const {
    data: projectsData = [],
    error: projectsError,
    loading: projectsLoading,
  } = useFetchData('../mocks/Projects.json');
  const {
    data: notificationsData = [],
    error: notificationsError,
    loading: notificationsLoading,
  } = useFetchData('../mocks/Notifications.json');

  return (
    <div>
      <Helmet>
        <title>Default | Antd Dashboard</title>
      </Helmet>
      <PageHeader
        title="default dashboard"
        breadcrumbs={[
          {
            title: (
              <>
                <HomeOutlined />
                <span>home</span>
              </>
            ),
            path: '/',
          },
          {
            title: (
              <>
                <PieChartOutlined />
                <span>dashboards</span>
              </>
            ),
            menu: {
              items: DASHBOARD_ITEMS.map((d) => ({
                key: d.title,
                title: <Link to={d.path}>{d.title}</Link>,
              })),
            },
          },
          {
            title: 'default',
          },
        ]}
      />
      <Row {...stylesContext?.rowProps}>
        <Col xs={24} lg={18}>
          <Row {...stylesContext?.rowProps}>
            <Col xs={24} md={24}>
              <Row {...stylesContext?.rowProps}>
                <Col xs={24} lg={18}>
                  <GetStartedCard {...CARD_PROPS} />
                </Col>
                <Col xs={24} lg={6}>
                  <Row {...stylesContext?.rowProps}>
                    <Col xs={12} lg={24}>
                      <Card>
                        <Flex vertical align="center" gap="middle">
                          <Typography.Title style={{ margin: 0 }}>
                            <CountUp end={10} />+
                          </Typography.Title>
                          <Typography.Text>Projects</Typography.Text>
                        </Flex>
                      </Card>
                    </Col>
                    <Col xs={12} lg={24}>
                      <Card>
                        <Flex vertical align="center" gap="middle">
                          <Typography.Title style={{ margin: 0 }}>
                            <CountUp end={60} />+
                          </Typography.Title>
                          <Typography.Text>Tasks</Typography.Text>
                        </Flex>
                      </Card>
                    </Col>
                  </Row>
                </Col>
              </Row>
            </Col>
            <Col xs={24} lg={12}>
              <WeeklyActivityCard data={ACTIVITY_DATA} />
            </Col>
            <Col xs={24} lg={12}>
              <TasksChartCard data={TASKS_DATA} />
            </Col>
            <Col span={24}>
              <TasksListCard
                data={tasksListData}
                error={tasksListError}
                loading={tasksListLoading}
              />
            </Col>
          </Row>
        </Col>
        <Col md={24} lg={6}>
          <Row {...stylesContext?.rowProps}>
            <Col span={24}>
              <Card
                title="Ongoing projects"
                extra={<Button>View all</Button>}
                bordered={false}
              >
                {projectsError ? (
                  <Alert
                    message="Error"
                    description={projectsError.toString()}
                    type="error"
                    showIcon
                  />
                ) : projectsLoading ? (
                  <Loader />
                ) : (
                  <Carousel
                    ref={sliderRef1}
                    {...stylesContext?.carouselProps}
                    {...CAROUSEL_PROPS}
                  >
                    {projectsData
                      .filter(
                        (o: Projects) =>
                          o.status.toLowerCase() === 'in progress'
                      )
                      .slice(0, 4)
                      .map((o: Projects) => (
                        <ProjectsCard
                          key={o.project_id}
                          project={o}
                          size="small"
                          style={{ margin: `0 8px` }}
                        />
                      ))}
                  </Carousel>
                )}
              </Card>
            </Col>
            <Col span={24}>
              <Card
                title="Queued projects"
                extra={<Button>View all</Button>}
                bordered={false}
              >
                {projectsError ? (
                  <Alert
                    message="Error"
                    description={projectsError.toString()}
                    type="error"
                    showIcon
                  />
                ) : projectsLoading ? (
                  <Loader />
                ) : (
                  <Carousel
                    ref={sliderRef2}
                    {...stylesContext?.carouselProps}
                    {...CAROUSEL_PROPS}
                  >
                    {projectsData
                      .filter(
                        (o: Projects) => o.status.toLowerCase() === 'on hold'
                      )
                      .slice(0, 4)
                      .map((o: Projects) => (
                        <ProjectsCard
                          key={o.project_id}
                          project={o}
                          size="small"
                          style={{ margin: `0 8px` }}
                        />
                      ))}
                  </Carousel>
                )}
              </Card>
            </Col>
            <Col span={24}>
              <NotificationsCard
                data={notificationsData}
                error={notificationsError}
                loading={notificationsLoading}
              />
            </Col>
          </Row>
        </Col>
      </Row>
    </div>
  );
};


src\pages\dashboards\Ecommerce.tsx:
import {
  Alert,
  Button,
  ButtonProps,
  Col,
  Flex,
  Image,
  Popover,
  Progress,
  Row,
  Space,
  Table,
  Tag,
  TagProps,
  Typography,
} from 'antd';
import {
  Card,
  CustomerReviewsCard,
  PageHeader,
  RevenueCard,
  UserAvatar,
} from '../../components';
import { Area, Bullet, Pie } from '@ant-design/charts';
import {
  ArrowDownOutlined,
  ArrowUpOutlined,
  CheckCircleOutlined,
  ClockCircleOutlined,
  ExclamationCircleOutlined,
  HomeOutlined,
  PieChartOutlined,
  QuestionOutlined,
  StarFilled,
  SyncOutlined,
} from '@ant-design/icons';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { useStylesContext } from '../../context';
import { createElement, CSSProperties } from 'react';
import { useFetchData } from '../../hooks';
import { blue, green, red, yellow } from '@ant-design/colors';
import CountUp from 'react-countup';
import { numberWithCommas } from '../../utils';

const { Text, Title } = Typography;

const SalesChart = () => {
  const data = [
    {
      country: 'Online Store',
      date: 'Jan',
      value: 1390.5,
    },
    {
      country: 'Online Store',
      date: 'Feb',
      value: 1469.5,
    },
    {
      country: 'Online Store',
      date: 'Mar',
      value: 1521.7,
    },
    {
      country: 'Online Store',
      date: 'Apr',
      value: 1615.9,
    },
    {
      country: 'Online Store',
      date: 'May',
      value: 1703.7,
    },
    {
      country: 'Online Store',
      date: 'Jun',
      value: 1767.8,
    },
    {
      country: 'Online Store',
      date: 'Jul',
      value: 1806.2,
    },
    {
      country: 'Online Store',
      date: 'Aug',
      value: 1903.5,
    },
    {
      country: 'Online Store',
      date: 'Sept',
      value: 1986.6,
    },
    {
      country: 'Online Store',
      date: 'Oct',
      value: 1952,
    },
    {
      country: 'Online Store',
      date: 'Nov',
      value: 1910.4,
    },
    {
      country: 'Online Store',
      date: 'Dec',
      value: 2015.8,
    },
    {
      country: 'Facebook',
      date: 'Jan',
      value: 109.2,
    },
    {
      country: 'Facebook',
      date: 'Feb',
      value: 115.7,
    },
    {
      country: 'Facebook',
      date: 'Mar',
      value: 120.5,
    },
    {
      country: 'Facebook',
      date: 'Apr',
      value: 128,
    },
    {
      country: 'Facebook',
      date: 'May',
      value: 134.4,
    },
    {
      country: 'Facebook',
      date: 'Jun',
      value: 142.2,
    },
    {
      country: 'Facebook',
      date: 'Jul',
      value: 157.5,
    },
    {
      country: 'Facebook',
      date: 'Aug',
      value: 169.5,
    },
    {
      country: 'Facebook',
      date: 'Sept',
      value: 186.3,
    },
    {
      country: 'Facebook',
      date: 'Oct',
      value: 195.5,
    },
    {
      country: 'Facebook',
      date: 'Nov',
      value: 198,
    },
    {
      country: 'Facebook',
      date: 'Dec',
      value: 211.7,
    },
  ];

  const config = {
    data,
    xField: 'date',
    yField: 'value',
    seriesField: 'country',
    slider: {
      start: 0.1,
      end: 0.9,
    },
  };

  return <Area {...config} />;
};

const CategoriesChart = () => {
  const data = [
    {
      type: 'Appliances',
      value: 27,
    },
    {
      type: 'Electronics',
      value: 25,
    },
    {
      type: 'Clothing',
      value: 18,
    },
    {
      type: 'Shoes',
      value: 15,
    },
    {
      type: 'Food',
      value: 10,
    },
    {
      type: 'Cosmetice',
      value: 5,
    },
  ];

  const config = {
    appendPadding: 10,
    data,
    angleField: 'value',
    colorField: 'type',
    radius: 1,
    innerRadius: 0.5,
    label: {
      type: 'inner',
      offset: '-50%',
      content: '{value}%',
      style: {
        textAlign: 'center',
        fontSize: 16,
      },
    },
    interactions: [
      {
        type: 'element-selected',
      },
      {
        type: 'element-active',
      },
    ],
    statistic: {
      title: false,
      content: {
        style: {
          whiteSpace: 'pre-wrap',
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          fontSize: 18,
        },
        content: '18,935\nsales',
      },
    },
  };

  // @ts-ignore
  return <Pie {...config} />;
};

const CustomerRateChart = () => {
  const data = [
    {
      title: '',
      ranges: [40, 70, 100],
      measures: [30, 70],
      target: 100,
    },
  ];
  const config = {
    data,
    measureField: 'measures',
    rangeField: 'ranges',
    targetField: 'target',
    xField: 'title',
    color: {
      range: ['#FFbcb8', '#FFe0b0', '#bfeec8'],
      measure: ['#5B8FF9', '#61DDAA'],
      target: '#39a3f4',
    },
    label: {
      measure: {
        position: 'middle',
        style: {
          fill: '#fff',
        },
      },
    },
    xAxis: {
      line: null,
    },
    yAxis: false,
    tooltip: {
      showMarkers: false,
      shared: true,
    },
    // customize legend
    legend: {
      custom: true,
      position: 'bottom',
      items: [
        {
          value: 'First time',
          name: 'First time buying',
          marker: {
            symbol: 'square',
            style: {
              fill: '#5B8FF9',
              r: 5,
            },
          },
        },
        {
          value: 'Returning',
          name: 'Returning',
          marker: {
            symbol: 'square',
            style: {
              fill: '#61DDAA',
              r: 5,
            },
          },
        },
      ],
    },
  };
  // @ts-ignore
  return <Bullet {...config} />;
};

const OrdersStatusChart = () => {
  const data = [
    {
      type: 'Success',
      value: 27,
    },
    {
      type: 'Pending',
      value: 55,
    },
    {
      type: 'Failed',
      value: 18,
    },
  ];
  const config = {
    appendPadding: 10,
    data,
    angleField: 'value',
    colorField: 'type',
    radius: 0.9,
    label: {
      type: 'inner',
      offset: '-30%',
      content: ({ percent }: any) => `${(percent * 100).toFixed(0)}%`,
      style: {
        fontSize: 14,
        textAlign: 'center',
      },
    },
    interactions: [
      {
        type: 'element-active',
      },
    ],
  };

  // @ts-ignore
  return <Pie {...config} />;
};

const PRODUCTS_COLUMNS = [
  {
    title: 'Name',
    dataIndex: 'product_name',
    key: 'product_name',
    render: (_: any, { product_name, brand }: any) => (
      <Flex gap="small" align="center">
        <Image src={brand} width={16} height={16} />
        <Text style={{ width: 160 }}>{product_name}</Text>
      </Flex>
    ),
  },
  {
    title: 'Category',
    dataIndex: 'category',
    key: 'category',
    render: (_: any) => <span className="text-capitalize">{_}</span>,
  },
  {
    title: 'Price',
    dataIndex: 'price',
    key: 'price',
    render: (_: any) => <span>$ {_}</span>,
  },
  {
    title: 'Avg rating',
    dataIndex: 'average_rating',
    key: 'average_rating',
    render: (_: any) => (
      <Flex align="center" gap="small">
        {_}
        <StarFilled style={{ fontSize: 12 }} />{' '}
      </Flex>
    ),
  },
];

const CATEGORIES_COLUMNS = [
  {
    title: 'Category',
    dataIndex: 'category',
    key: 'category',
  },
  {
    title: 'Price',
    dataIndex: 'price',
    key: 'price',
    render: (_: any) => <span>$ {_}</span>,
  },
  {
    title: 'Avg rating',
    dataIndex: 'rating',
    key: 'rating',
    render: (_: any) => (
      <Flex align="center" gap="small">
        {_}
        <StarFilled style={{ fontSize: 12 }} />{' '}
      </Flex>
    ),
  },
];

const SELLER_COLUMNS = [
  {
    title: 'Name',
    dataIndex: 'first_name',
    key: 'first_name',
    render: (_: any, { first_name, last_name }: any) => (
      <UserAvatar fullName={`${first_name} ${last_name}`} />
    ),
  },
  {
    title: 'Email',
    dataIndex: 'email',
    key: 'email',
    render: (_: any) => <Link to={`mailto:${_}`}>{_}</Link>,
  },
  {
    title: 'Region',
    dataIndex: 'sales_region',
    key: 'sales_region',
  },
  {
    title: 'Country',
    dataIndex: 'country',
    key: 'country',
  },
  {
    title: 'Volume',
    dataIndex: 'sales_volume',
    key: 'sales_volume',
    render: (_: any) => <span>{numberWithCommas(Number(_))}</span>,
  },
  {
    title: 'Amount',
    dataIndex: 'total_sales',
    key: 'total_sales',
    render: (_: any) => <span>${numberWithCommas(Number(_))}</span>,
  },
  {
    title: 'Satisfaction rate',
    dataIndex: 'customer_satisfaction',
    key: 'customer_satisfaction',
    render: (_: any) => {
      let color;

      if (_ < 20) {
        color = red[5];
      } else if (_ > 21 && _ < 50) {
        color = yellow[6];
      } else if (_ > 51 && _ < 70) {
        color = blue[5];
      } else {
        color = green[6];
      }

      return <Progress percent={_} strokeColor={color} />;
    },
  },
];

const ORDERS_COLUMNS = [
  {
    title: 'Tracking No.',
    dataIndex: 'tracking_number',
    key: 'tracking_number',
  },
  {
    title: 'Customer',
    dataIndex: 'customer_name',
    key: 'customer_name',
    render: (_: any) => <UserAvatar fullName={_} />,
  },
  {
    title: 'Date',
    dataIndex: 'order_date',
    key: 'order_date',
  },
  {
    title: 'Price',
    dataIndex: 'price',
    key: 'price',
    render: (_: any) => <span>$ {_}</span>,
  },
  {
    title: 'Quantity',
    dataIndex: 'quantity',
    key: 'quantity',
  },
  {
    title: 'Status',
    dataIndex: 'status',
    key: 'status',
    render: (_: any) => {
      let color: TagProps['color'], icon: any;

      if (_ === 'shipped') {
        color = 'magenta-inverse';
        icon = ClockCircleOutlined;
      } else if (_ === 'processing') {
        color = 'blue-inverse';
        icon = SyncOutlined;
      } else if (_ === 'delivered') {
        color = 'green-inverse';
        icon = CheckCircleOutlined;
      } else {
        color = 'volcano-inverse';
        icon = ExclamationCircleOutlined;
      }

      return (
        <Tag
          className="text-capitalize"
          color={color}
          icon={createElement(icon)}
        >
          {_}
        </Tag>
      );
    },
  },
  {
    title: 'Country',
    dataIndex: 'country',
    key: 'country',
  },
  {
    title: 'Address',
    dataIndex: 'shipping_address',
    key: 'shipping_address',
  },
];

const POPOVER_BUTTON_PROPS: ButtonProps = {
  type: 'text',
};

const cardStyles: CSSProperties = {
  height: '100%',
};

export const EcommerceDashboardPage = () => {
  const stylesContext = useStylesContext();
  const {
    data: topProducts,
    error: topProductsError,
    loading: topProductsLoading,
  } = useFetchData('../mocks/TopProducts.json');
  const {
    data: topCategories,
    error: topCategoriesError,
    loading: topCategoriesLoading,
  } = useFetchData('../mocks/TopCategories.json');
  const {
    data: topSellers,
    error: topSellersError,
    loading: topSellersLoading,
  } = useFetchData('../mocks/TopSeller.json');
  const {
    data: recentOrders,
    error: recentOrdersError,
    loading: recentOrdersLoading,
  } = useFetchData('../mocks/RecentOrders.json');

  return (
    <div>
      <Helmet>
        <title>Ecommerce | Antd Dashboard</title>
      </Helmet>
      <PageHeader
        title="ecommerce dashboard"
        breadcrumbs={[
          {
            title: (
              <>
                <HomeOutlined />
                <span>home</span>
              </>
            ),
            path: '/',
          },
          {
            title: (
              <>
                <PieChartOutlined />
                <span>dashboards</span>
              </>
            ),
            menu: {
              items: DASHBOARD_ITEMS.map((d) => ({
                key: d.title,
                title: <Link to={d.path}>{d.title}</Link>,
              })),
            },
          },
          {
            title: 'ecommerce',
          },
        ]}
      />
      <Row {...stylesContext?.rowProps}>
        <Col sm={24} lg={16}>
          <Row {...stylesContext?.rowProps}>
            <Col xs={24} sm={12}>
              <RevenueCard
                title="Visitors"
                value={20149}
                diff={5.54}
                height={180}
                justify="space-between"
              />
            </Col>
            <Col xs={24} sm={12}>
              <RevenueCard
                title="Customers"
                value={5834}
                diff={-12.3}
                height={180}
                justify="space-between"
              />
            </Col>
            <Col xs={24} sm={12}>
              <RevenueCard
                title="Orders"
                value={3270}
                diff={9.52}
                height={180}
                justify="space-between"
              />
            </Col>
            <Col xs={24} sm={12}>
              <RevenueCard
                title="Sales"
                value="$ 1.324K"
                diff={2.34}
                height={180}
                justify="space-between"
              />
            </Col>
          </Row>
        </Col>
        <Col sm={24} lg={8}>
          <CustomerReviewsCard />
        </Col>
        <Col xs={24} lg={12}>
          <Card
            title="Overall sales"
            extra={
              <Popover content="Total sales over period x" title="Total sales">
                <Button icon={<QuestionOutlined />} {...POPOVER_BUTTON_PROPS} />
              </Popover>
            }
            style={cardStyles}
          >
            <Flex vertical gap="middle">
              <Space>
                <Title level={3} style={{ margin: 0 }}>
                  $ <CountUp end={24485.67} />
                </Title>
                <Tag color="green-inverse" icon={<ArrowUpOutlined />}>
                  8.7%
                </Tag>
              </Space>
              <SalesChart />
            </Flex>
          </Card>
        </Col>
        <Col xs={24} lg={12}>
          <Card
            title="Categories"
            extra={
              <Popover content="Sales per categories" title="Categories sales">
                <Button icon={<QuestionOutlined />} {...POPOVER_BUTTON_PROPS} />
              </Popover>
            }
            style={cardStyles}
          >
            <CategoriesChart />
          </Card>
        </Col>
        <Col xs={24} lg={12}>
          <Card
            title="Orders by status"
            extra={
              <Popover content="Orders by status" title="Orders">
                <Button icon={<QuestionOutlined />} {...POPOVER_BUTTON_PROPS} />
              </Popover>
            }
            style={cardStyles}
          >
            <OrdersStatusChart />
          </Card>
        </Col>
        <Col xs={24} lg={12}>
          <Flex vertical gap="middle">
            <Card
              title="Conversion rate"
              extra={
                <Popover
                  content="Customer conversion rate"
                  title="Conversion rate"
                >
                  <Button
                    icon={<QuestionOutlined />}
                    {...POPOVER_BUTTON_PROPS}
                  />
                </Popover>
              }
            >
              <Flex vertical gap="middle" justify="center">
                <Typography.Title style={{ margin: 0 }}>8.48%</Typography.Title>
                <Row>
                  <Col sm={24} lg={8}>
                    <Space direction="vertical">
                      <Text>Added to cart</Text>
                      <Text type="secondary">5 visits</Text>
                    </Space>
                  </Col>
                  <Col sm={24} lg={8}>
                    <Text className="text-end" strong>
                      $ <CountUp end={27483.7} decimals={2} />
                    </Text>
                  </Col>
                  <Col sm={24} lg={8}>
                    <Tag color="green-inverse" icon={<ArrowUpOutlined />}>
                      16.8%
                    </Tag>
                  </Col>
                </Row>
                <Row>
                  <Col sm={24} lg={8}>
                    <Space direction="vertical">
                      <Text>Reached to Checkout</Text>
                      <Text type="secondary">23 visits</Text>
                    </Space>
                  </Col>
                  <Col sm={24} lg={8}>
                    <Text className="text-end" strong>
                      $ <CountUp end={145483.7} decimals={2} />
                    </Text>
                  </Col>
                  <Col sm={24} lg={8}>
                    <Tag color="red-inverse" icon={<ArrowDownOutlined />}>
                      -46.8%
                    </Tag>
                  </Col>
                </Row>
              </Flex>
            </Card>
            <Card title="Customer rate">
              <div style={{ height: 80, textAlign: 'center' }}>
                <CustomerRateChart />
              </div>
            </Card>
          </Flex>
        </Col>
        <Col xs={24} lg={12}>
          <Card title="Popular products" style={cardStyles}>
            {topProductsError ? (
              <Alert
                message="Error"
                description={topProductsError.toString()}
                type="error"
                showIcon
              />
            ) : (
              <Table
                columns={PRODUCTS_COLUMNS}
                dataSource={topProducts}
                loading={topProductsLoading}
                className="overflow-scroll"
              />
            )}
          </Card>
        </Col>
        <Col xs={24} lg={12}>
          <Card title="Popular categories" style={cardStyles}>
            {topCategoriesError ? (
              <Alert
                message="Error"
                description={topCategoriesError.toString()}
                type="error"
                showIcon
              />
            ) : (
              <Table
                columns={CATEGORIES_COLUMNS}
                dataSource={topCategories}
                loading={topCategoriesLoading}
                className="overflow-scroll"
              />
            )}
          </Card>
        </Col>
        <Col span={24}>
          <Card title="Top sellers">
            {topSellersError ? (
              <Alert
                message="Error"
                description={topSellersError.toString()}
                type="error"
                showIcon
              />
            ) : (
              <Table
                columns={SELLER_COLUMNS}
                dataSource={topSellers}
                loading={topSellersLoading}
                className="overflow-scroll"
              />
            )}
          </Card>
        </Col>
        <Col span={24}>
          <Card title="Recent orders">
            {recentOrdersError ? (
              <Alert
                message="Error"
                description={recentOrdersError.toString()}
                type="error"
                showIcon
              />
            ) : (
              <Table
                columns={ORDERS_COLUMNS}
                dataSource={recentOrders}
                loading={recentOrdersLoading}
                className="overflow-scroll"
              />
            )}
          </Card>
        </Col>
      </Row>
    </div>
  );
};


src\pages\dashboards\EventParticipantsTable.tsx:
// src\components\dashboard\events\EventParticipantsTable.tsx
import React from 'react';
import { Table, TableProps, Alert } from 'antd';

import dayjs from 'dayjs';
import { Loader } from '../../components';
import { useFetchData } from '../../hooks';
import { Participants } from '../../types';

interface EventParticipantsTableProps extends TableProps<Participants> {
    eventId: string;
}

const PARTICIPANTS_COLUMNS = [
    {
        title: 'ID',
        dataIndex: 'id',
        key: 'id',
    },
    {
        title: 'Name',
        dataIndex: 'name',
        key: 'name',
    },
    {
        title: 'Email',
        dataIndex: 'email',
        key: 'email',
    },
    {
        title: 'Check-in Time',
        dataIndex: 'checkInAt',
        key: 'checkInAt',
        render: (text: string) => text ? dayjs(text).format('YYYY-MM-DD HH:mm:ss') : 'N/A',
    },
    {
        title: 'Check-out Time',
        dataIndex: 'checkOutAt',
        key: 'checkOutAt',
        render: (text: string) => text ? dayjs(text).format('YYYY-MM-DD HH:mm:ss') : 'N/A',
    },
];

const EventParticipantsTable: React.FC<EventParticipantsTableProps> = ({ eventId }) => {
    const { data: participantsData, error: participantsError, loading: participantsLoading } = useFetchData(
        eventId ? `/events/${eventId}/participants` : "",
        localStorage.getItem('accessToken') || undefined
    );
    if (!eventId) {
        return <Alert message="Event ID is missing." type="warning" showIcon />;
    }

    if (participantsLoading) {
        return <Loader />;
    }

    // Kiểm tra nếu không có dữ liệu người tham gia
    if (!participantsData?.data || participantsData.data.length === 0) {
        return <Alert message="No participants found for this event." type="info" showIcon />;
    }

    // Kiểm tra cụ thể nếu participantsData.data là undefined hoặc mảng rỗng
    if (participantsError) {
        return <Alert message="Error loading participants" description={participantsError.toString()} type="error" showIcon />;
    }

    return (
        <div>
            <Table
                dataSource={participantsData.data} // Dùng participantsData.data thay vì participantsData?.data || []
                columns={PARTICIPANTS_COLUMNS}
                loading={participantsLoading}
                pagination={{ pageSize: 5 }}
                rowKey="id"
            />
        </div>
    );
};

export { EventParticipantsTable };

src\pages\dashboards\Events.tsx:
import { HomeOutlined, PieChartOutlined } from '@ant-design/icons';
import { useStylesContext } from '../../context';
import { Helmet } from 'react-helmet-async';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import {
    Col,
    Row,
} from 'antd';
  import {
    PageHeader,
} from '../../components';
import {
  EventTable
} from '../../components/dashboard';
import { useFetchData } from '../../hooks';


const EventsDashboardPage = () => {
    const stylesContext = useStylesContext();
    const {
        data: events,
        error: eventsError,
        loading: eventsLoading,
      } = useFetchData('../mocks/Events.json');
  return (
    <div>
      <Helmet>
        <title>Incomming Events | Antd Dashboard</title>
      </Helmet>
      <PageHeader
        title="incomming events dashboard"
        breadcrumbs={[
          {
            title: (
              <>
                <HomeOutlined />
                <span>home</span>
              </>
            ),
            path: '/',
          },
          {
            title: (
              <>
                <PieChartOutlined />
                <span>dashboards</span>
              </>
            ),
            menu: {
              items: DASHBOARD_ITEMS.map((d) => ({
                key: d.title,
                title: <Link to={d.path}>{d.title}</Link>,
              })),
            },
          },
          {
            title: 'events',
          },
        ]}
      />
      <Row {...stylesContext?.rowProps}>
      <Col span={24}>
          <EventTable data={events} loading={eventsLoading} error={eventsError} />
        </Col>
      </Row>
    </div>
  )
}

export default EventsDashboardPage

src\pages\dashboards\EventsList.tsx:
// src\pages\dashboards\EventsList.tsx
import { Alert, Button, Card, Space, Table, Tag, Select } from 'antd';
import { HomeOutlined, PieChartOutlined } from '@ant-design/icons';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { PageHeader, Loader } from '../../components';
import { useFetchData } from '../../hooks';
import { ColumnsType } from 'antd/es/table';
import { Events } from '../../types';
import dayjs from 'dayjs';
import React, { useState } from 'react';

const EVENT_COLUMNS: ColumnsType<Events> = [
    {
        title: 'Name',
        dataIndex: 'name',
        key: 'name',
        render: (text, record) => <Link to={`/details/events/${record.id}`}> {text}</Link>,
    },
    {
        title: 'Location',
        dataIndex: 'location',
        key: 'location',
    },
    {
        title: 'Start Date',
        dataIndex: 'startDate',
        key: 'startDate',
        render: (date) => dayjs(date).format('YYYY-MM-DD HH:mm:ss'),
    },
    {
        title: 'End Date',
        dataIndex: 'endDate',
        key: 'endDate',
        render: (date) => dayjs(date).format('YYYY-MM-DD HH:mm:ss'),
    },
    {
        title: 'Category',
        dataIndex: 'categoryId',
        key: 'categoryId',
    },
    {
        title: 'Status',
        dataIndex: 'status',
        key: 'status',
        render: (status) => (
            <Tag color={status === 'SCHEDULED' ? 'blue' : status === 'CANCELED' ? 'red' : 'green'}>
                {status}
            </Tag>
        ),
    },
    {
        title: 'Actions',
        key: 'actions',
        render: (_, record) => (
            <Space size="middle">
                <Button type="primary" size="small">
                    <Link to={`/details/events/${record.id}`}>Details</Link>
                </Button>
            </Space>
        ),
    },
];

const EVENT_STATUS_OPTIONS = [
    { value: 'all', label: 'All Statuses' },
    { value: 'SCHEDULED', label: 'Scheduled' },
    { value: 'CANCELED', label: 'Canceled' },
    { value: 'FINISHED', label: 'Finished' },
];

const EventsListPage = () => {
    const [statusFilter, setStatusFilter] = useState<string>('all');
    const { data: eventsData, error: eventsError, loading: eventsLoading } = useFetchData(
        `http://localhost:8080/api/v1/events${statusFilter !== 'all' ? `?status=${statusFilter}` : ''}`,
        localStorage.getItem('accessToken') || undefined
    );


    const onStatusFilterChange = (value: string) => {
        setStatusFilter(value);
    };

    return (
        <div>
            <Helmet>
                <title>Events List | Antd Dashboard</title>
            </Helmet>
            <PageHeader
                title="Events List"
                breadcrumbs={[
                    {
                        title: (
                            <>
                                <HomeOutlined />
                                <span>Home</span>
                            </>
                        ),
                        path: '/',
                    },
                    {
                        title: (
                            <>
                                <PieChartOutlined />
                                <span>Dashboards</span>
                            </>
                        ),
                        menu: {
                            items: DASHBOARD_ITEMS.map((d) => ({
                                key: d.title,
                                title: <Link to={d.path}>{d.title}</Link>,
                            })),
                        },
                    },
                    {
                        title: 'Events List',
                    },
                ]}
            />

            <Card
                title="Events"
                extra={
                    <Select
                        defaultValue="all"
                        style={{ width: 200 }}
                        onChange={onStatusFilterChange}
                        options={EVENT_STATUS_OPTIONS}
                    />
                }
            >
                {eventsError && (
                    <Alert
                        message="Error"
                        description={eventsError.toString()}
                        type="error"
                        showIcon
                        closable
                    />
                )}

                <Table
                    columns={EVENT_COLUMNS}
                    dataSource={eventsData?.data?.events || []}
                    loading={eventsLoading}
                    pagination={{
                        total: eventsData?.data?.meta?.totalItems,
                        showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,
                        pageSize: 10,
                        showSizeChanger: true,
                        pageSizeOptions: ['10', '20', '50', '100'],
                    }}
                />
            </Card>
        </div>
    );
};

export default EventsListPage;

src\pages\dashboards\index.ts:
export { DefaultDashboardPage } from './Default.tsx';
export { ProjectsDashboardPage } from './Projects.tsx';
export { EcommerceDashboardPage } from './Ecommerce.tsx';
export { MarketingDashboardPage } from './Marketing.tsx';
export { SocialDashboardPage } from './Social.tsx';
export { BiddingDashboardPage } from './Bidding.tsx';
export { LearningDashboardPage } from './Learning.tsx';
export { LogisticsDashboardPage } from './Logistics.tsx';
export {MyEventDashboardPage} from './MyEvents.tsx';
export {UserDashboardPage} from './Users.tsx';

src\pages\dashboards\Learning.tsx:
import { Col, Row } from 'antd';
import {
  FileProtectOutlined,
  FileSyncOutlined,
  HomeOutlined,
  PieChartOutlined,
  SafetyCertificateOutlined,
  UsergroupAddOutlined,
} from '@ant-design/icons';
import {
  CommunityGroupCard,
  CoursesCard,
  CoursesCarousel,
  ExamsCard,
  LearningStatsCard,
  PageHeader,
  ProgressCard,
  StudyStatisticsCard,
} from '../../components';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { useFetchData } from '../../hooks';
import { useStylesContext } from '../../context';

export const LearningDashboardPage = () => {
  const stylesContext = useStylesContext();
  const {
    data: coursesData,
    loading: coursesDataLoading,
    error: coursesDataError,
  } = useFetchData('../mocks/Courses.json');
  const {
    data: studyData,
    loading: studyDataLoading,
    error: studyDataError,
  } = useFetchData('../mocks/StudyStatistics.json');
  const {
    data: recommendedCoursesData,
    loading: recommendedCoursesDataLoading,
    error: recommendedCoursesDataError,
  } = useFetchData('../mocks/RecommendedCourses.json');
  const {
    data: examsData,
    loading: examsDataLoading,
    error: examsDataError,
  } = useFetchData('../mocks/Exams.json');
  const {
    data: communitiesData,
    loading: communitiesDataLoading,
    error: communitiesDataError,
  } = useFetchData('../mocks/CommunityGroups.json');

  return (
    <div>
      <Helmet>
        <title>Learning | Antd Dashboard</title>
      </Helmet>
      <PageHeader
        title="learning dashboard"
        breadcrumbs={[
          {
            title: (
              <>
                <HomeOutlined />
                <span>home</span>
              </>
            ),
            path: '/',
          },
          {
            title: (
              <>
                <PieChartOutlined />
                <span>dashboards</span>
              </>
            ),
            menu: {
              items: DASHBOARD_ITEMS.map((d) => ({
                key: d.title,
                title: <Link to={d.path}>{d.title}</Link>,
              })),
            },
          },
          {
            title: 'learning',
          },
        ]}
      />
      <Row {...stylesContext?.rowProps}>
        <Col xs={24} xl={18}>
          <Row {...stylesContext?.rowProps}>
            <Col xs={24} sm={12} xl={6}>
              <LearningStatsCard
                title="Courses in Progress"
                value={18}
                icon={FileSyncOutlined}
                color="teal"
                progress={30}
                style={{ height: '100%' }}
              />
            </Col>
            <Col xs={24} sm={12} xl={6}>
              <LearningStatsCard
                title="Courses completed"
                value={97}
                icon={FileProtectOutlined}
                color="green"
                progress={90}
                style={{ height: '100%' }}
              />
            </Col>
            <Col xs={24} sm={12} xl={6}>
              <LearningStatsCard
                title="Certificates earned"
                value={62}
                icon={SafetyCertificateOutlined}
                color="blue"
                progress={76}
                style={{ height: '100%' }}
              />
            </Col>
            <Col xs={24} sm={12} xl={6}>
              <LearningStatsCard
                title="Community support"
                value={245}
                icon={UsergroupAddOutlined}
                color="purple"
                progress={78}
                style={{ height: '100%' }}
              />
            </Col>
            <Col xs={24} xl={12}>
              <ProgressCard style={{ height: '100%' }} />
            </Col>
            <Col xs={24} xl={12}>
              <StudyStatisticsCard
                data={studyData}
                loading={studyDataLoading}
                error={studyDataError}
              />
            </Col>
            <Col span={24}>
              <CoursesCard
                data={coursesData}
                loading={coursesDataLoading}
                error={coursesDataError}
              />
            </Col>
          </Row>
        </Col>
        <Col xs={24} xl={6}>
          <Row {...stylesContext?.rowProps}>
            <Col span={24}>
              <ExamsCard
                data={examsData}
                loading={examsDataLoading}
                error={examsDataError}
              />
            </Col>
            <Col span={24}>
              <CommunityGroupCard
                data={communitiesData}
                loading={communitiesDataLoading}
                error={communitiesDataError}
              />
            </Col>
            <Col span={24}>
              <CoursesCarousel
                data={recommendedCoursesData}
                loading={recommendedCoursesDataLoading}
                error={recommendedCoursesDataError}
              />
            </Col>
          </Row>
        </Col>
      </Row>
    </div>
  );
};


src\pages\dashboards\Logistics.tsx:
import { Col, Row } from 'antd';
import {
  BlockOutlined,
  CarOutlined,
  GroupOutlined,
  HomeOutlined,
  PieChartOutlined,
  ShoppingOutlined,
} from '@ant-design/icons';
import {
  DailyPlanCard,
  DeliveryAnalyticsCard,
  DeliveryRequestCard,
  DeliveryTableCard,
  LogisticsStatsCard,
  PageHeader,
  TruckListCard,
} from '../../components';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { useFetchData } from '../../hooks';
import { useStylesContext } from '../../context';

const STATS = [
  {
    icon: BlockOutlined,
    value: 1245,
    title: 'new packages',
    diff: 16,
  },
  {
    icon: ShoppingOutlined,
    value: 8482,
    title: 'ready for shipping',
    diff: 18,
  },
  {
    icon: CarOutlined,
    value: 747,
    title: 'in transit',
    diff: -20,
  },
  {
    icon: GroupOutlined,
    value: 10747,
    title: 'delivered',
    diff: -4.1,
  },
];

const PLAN_DATA = [
  {
    type: 'Shipment processed',
    value: 38,
  },
  {
    type: 'Orders processed',
    value: 52,
  },
  {
    type: 'Requests queue',
    value: 61,
  },
];

export const LogisticsDashboardPage = () => {
  const stylesContext = useStylesContext();
  const {
    data: trucksDeliveryData,
    loading: trucksDeliveryDataLoading,
    error: trucksDeliveryDataError,
  } = useFetchData('../mocks/TruckDeliveries.json');
  const {
    data: deliveryAnalyticsData,
    loading: deliveryAnalyticsDataLoading,
    error: deliveryAnalyticsDataError,
  } = useFetchData('../mocks/DeliveryAnalytics.json');
  const {
    data: trucksData,
    loading: trucksDataLoading,
    error: trucksDataError,
  } = useFetchData('../mocks/Trucks.json');
  const {
    data: trucksDeliveryRequestData,
    loading: trucksDeliveryRequestDataLoading,
    error: trucksDeliveryRequestDataError,
  } = useFetchData('../mocks/TruckDeliveryRequest.json');

  return (
    <div>
      <Helmet>
        <title>Logistics | Antd Dashboard</title>
      </Helmet>
      <PageHeader
        title="logistics dashboard"
        breadcrumbs={[
          {
            title: (
              <>
                <HomeOutlined />
                <span>home</span>
              </>
            ),
            path: '/',
          },
          {
            title: (
              <>
                <PieChartOutlined />
                <span>dashboards</span>
              </>
            ),
            menu: {
              items: DASHBOARD_ITEMS.map((d) => ({
                key: d.title,
                title: <Link to={d.path}>{d.title}</Link>,
              })),
            },
          },
          {
            title: 'logistics',
          },
        ]}
      />
      <Row {...stylesContext?.rowProps}>
        {STATS.map((s) => (
          <Col xs={24} sm={12} xl={6} key={s.title}>
            <LogisticsStatsCard {...s} />
          </Col>
        ))}
        <Col xs={24} xl={12}>
          <DeliveryAnalyticsCard
            data={deliveryAnalyticsData}
            loading={deliveryAnalyticsDataLoading}
            error={deliveryAnalyticsDataError}
          />
        </Col>
        <Col xs={24} xl={12}>
          <DailyPlanCard data={PLAN_DATA} />
        </Col>
        <Col span={24}>
          <DeliveryTableCard
            data={trucksDeliveryData}
            error={trucksDeliveryDataError}
            loading={trucksDeliveryDataLoading}
          />
        </Col>
        <Col xs={24} xl={12}>
          <TruckListCard
            data={trucksData}
            loading={trucksDataLoading}
            error={trucksDataError}
          />
        </Col>
        <Col xs={24} xl={12}>
          <DeliveryRequestCard
            data={trucksDeliveryRequestData}
            loading={trucksDeliveryRequestDataLoading}
            error={trucksDeliveryRequestDataError}
          />
        </Col>
      </Row>
    </div>
  );
};


src\pages\dashboards\Marketing.tsx:
import { Col, Row } from 'antd';
import {
  AudienceLocationChart,
  CampaignsActivity,
  CampaignsAdsCard,
  MarketingSocialStatsCard,
  MarketingStatsCard,
  PageHeader,
  VisitorsChartCard,
} from '../../components';
import { HomeOutlined, PieChartOutlined } from '@ant-design/icons';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { useStylesContext } from '../../context';
import { useFetchData } from '../../hooks';

export const MarketingDashboardPage = () => {
  const stylesContext = useStylesContext();
  const {
    data: campaignAds,
    error: campaignAdsError,
    loading: campaignAdsLoading,
  } = useFetchData('../mocks/CampaignAds.json');

  return (
    <div>
      <Helmet>
        <title>Marketing | Antd Dashboard</title>
      </Helmet>
      <PageHeader
        title="marketing dashboard"
        breadcrumbs={[
          {
            title: (
              <>
                <HomeOutlined />
                <span>home</span>
              </>
            ),
            path: '/',
          },
          {
            title: (
              <>
                <PieChartOutlined />
                <span>dashboards</span>
              </>
            ),
            menu: {
              items: DASHBOARD_ITEMS.map((d) => ({
                key: d.title,
                title: <Link to={d.path}>{d.title}</Link>,
              })),
            },
          },
          {
            title: 'marketing',
          },
        ]}
      />
      <Row {...stylesContext?.rowProps}>
        <Col xs={24} sm={12} lg={6}>
          <MarketingStatsCard
            data={[274, 337, 81, 497]}
            title="impressions"
            diff={12.5}
            value={16826}
            style={{ height: '100%' }}
          />
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <MarketingStatsCard
            data={[20, 40, 80, 50]}
            title="clicks"
            diff={-2.1}
            value={2216869}
            style={{ height: '100%' }}
          />
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <MarketingStatsCard
            data={[497, 81, 274, 337]}
            title="revenue"
            diff={34.6}
            value={9321.92}
            asCurrency
            style={{ height: '100%' }}
          />
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <MarketingStatsCard
            data={[337, 274, 497, 81]}
            title="cost"
            diff={6.3}
            value={5550.0}
            asCurrency
            style={{ height: '100%' }}
          />
        </Col>
        <Col xs={24} lg={12}>
          <VisitorsChartCard />
        </Col>
        <Col xs={24} lg={12}>
          <MarketingSocialStatsCard style={{ height: '100%' }} />
        </Col>
        <Col xs={24} lg={12}>
          <AudienceLocationChart />
        </Col>
        <Col xs={24} lg={12}>
          <CampaignsActivity />
        </Col>
        <Col span={24}>
          <CampaignsAdsCard
            data={campaignAds}
            loading={campaignAdsLoading}
            error={campaignAdsError}
          />
        </Col>
      </Row>
    </div>
  );
};


src\pages\dashboards\MyEvents.tsx:
// src\pages\dashboards\MyEvents.tsx
import { Alert, Button, Col, Row, Space, Spin } from 'antd';
import {
    Card,
    Loader,
    PageHeader,
} from '../../components';
import { Events } from '../../types';
import { useState } from 'react';
import {
    CloudUploadOutlined,
    HomeOutlined,
    PieChartOutlined,
    PlusOutlined,
} from '@ant-design/icons';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link, useNavigate } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import useFetchOrganizedEventsData from '../../hooks/useFetchOrganizedEventsData';
import { EventsCard } from '../../components/dashboard/shared';
import { MyEventsTable } from '../../components/dashboard/events/MyEventTable'; // Corrected import here (Named import)

const EVENT_TABS = [
    {
        key: 'all',
        label: 'All events',
    },
    {
        key: 'SCHEDULED',
        label: 'Scheduled',
    },
    {
        key: 'CANCELED',
        label: 'Canceled',
    },
    {
        key: 'FINISHED',
        label: 'Finished',
    },
];

export const MyEventDashboardPage = () => {

    const { data: eventsData, error: eventsError, loading: eventsLoading, fetchData } = useFetchOrganizedEventsData();
    const [eventTabKey, setEventTabKey] = useState<string>('all');
    const navigate = useNavigate();

    const getFilteredEvents = (status?: string) => {
        return (eventsData || []).filter((event: Events) => status ? event.status === status : true);
    };

    const EVENT_TABS_CONTENT: Record<string, React.ReactNode> = {
        all: <MyEventsTable key="all-events-table" data={getFilteredEvents()} loading={eventsLoading} fetchData={fetchData} activeTabKey={eventTabKey} />,
        SCHEDULED: (
            <MyEventsTable
                key="scheduled-events-table"
                data={getFilteredEvents('SCHEDULED')}
                loading={eventsLoading}
                fetchData={() => fetchData('SCHEDULED')}
                activeTabKey={eventTabKey}
            />
        ),
        CANCELED: (
            <MyEventsTable
                key="canceled-events-table"
                data={getFilteredEvents('CANCELED')}
                loading={eventsLoading}
                fetchData={() => fetchData('CANCELED')}
                activeTabKey={eventTabKey}
            />
        ),
        FINISHED: (
            <MyEventsTable
                key="finished-events-table"
                data={getFilteredEvents('FINISHED')}
                loading={eventsLoading}
                fetchData={() => fetchData('FINISHED')}
                activeTabKey={eventTabKey}
            />
        ),
    };


    const onEventTabChange = (key: string) => {
        setEventTabKey(key);
        fetchData(key === 'all' ? undefined : key);
    };


    return (
        <div>
            <Helmet>
                <title>My Events | Antd Dashboard</title>
            </Helmet>
            <PageHeader
                title="your event dashboard"
                breadcrumbs={[
                    {
                        title: (
                            <>
                                <HomeOutlined />
                                <span>home</span>
                            </>
                        ),
                        path: '/',
                    },
                    {
                        title: (
                            <>
                                <PieChartOutlined />
                                <span>dashboards</span>
                            </>
                        ),
                        menu: {
                            items: DASHBOARD_ITEMS.map((d) => ({
                                key: d.title,
                                title: <Link to={d.path}>{d.title}</Link>,
                            })),
                        },
                    },
                    {
                        title: 'my events',
                    },
                ]}
            />
            <Row
                gutter={[
                    { xs: 8, sm: 16, md: 24, lg: 32 },
                    { xs: 8, sm: 16, md: 24, lg: 32 },
                ]}
            >
                <Col span={24}>
                    <Card
                        title="Recently added events"
                    >
                        {eventsError && (
                            <Alert
                                message="Error"
                                description={eventsError.toString()}
                                type="error"
                                showIcon
                            />
                        )}
                        {eventsLoading ? (
                            <Loader />
                        ) : (
                            <Row gutter={[16, 16]}>
                                {getFilteredEvents().slice(0, 4).map((o: Events) => {
                                    return (
                                        <Col xs={24} sm={12} xl={6} key={o.id}>
                                            <EventsCard
                                                event={o}
                                                type="inner"
                                                style={{ height: '100%' }}
                                            />
                                        </Col>
                                    );
                                })}
                            </Row>
                        )}
                    </Card>
                </Col>
                <Col span={24}>
                    <Card
                        title="Your Events"
                        extra={
                            <Space>
                                <Button onClick={() => navigate("/create/events")} icon={<PlusOutlined />}>New Event</Button>
                            </Space>
                        }
                        tabList={EVENT_TABS}
                        activeTabKey={eventTabKey}
                        onTabChange={onEventTabChange}
                    >
                        {eventsLoading ? <Loader /> : EVENT_TABS_CONTENT[eventTabKey]}
                    </Card>
                </Col>
            </Row>
        </div>
    );
};

export default MyEventDashboardPage

src\pages\dashboards\ParticipatedEvents.tsx:
// src\pages\dashboards\ParticipatedEvents.tsx
import React, { useState } from 'react';
import { Alert, Button, Card, Space, Table, Tag, Select, MenuProps } from 'antd';
import { HomeOutlined, PieChartOutlined } from '@ant-design/icons';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { PageHeader, Loader } from '../../components';
import { ColumnsType } from 'antd/es/table';
import { Events } from '../../types';
import dayjs from 'dayjs';
import useFetchParticipatedEventsData from '../../hooks/useFetchParticipatedEventsData';

const EVENT_COLUMNS: ColumnsType<Events> = [
    {
        title: 'Name',
        dataIndex: 'name',
        key: 'name',
        render: (text, record) => <Link to={`/details/events/${record.id}`}> {text}</Link>,
    },
    {
        title: 'Location',
        dataIndex: 'location',
        key: 'location',
    },
    {
        title: 'Start Date',
        dataIndex: 'startDate',
        key: 'startDate',
        render: (date) => dayjs(date).format('YYYY-MM-DD HH:mm:ss'),
    },
    {
        title: 'End Date',
        dataIndex: 'endDate',
        key: 'endDate',
        render: (date) => dayjs(date).format('YYYY-MM-DD HH:mm:ss'),
    },
    {
        title: 'Category',
        dataIndex: 'categoryId',
        key: 'categoryId',
    },
    {
        title: 'Status',
        dataIndex: 'status',
        key: 'status',
        render: (status) => (
            <Tag color={status === 'SCHEDULED' ? 'blue' : status === 'CANCELED' ? 'red' : 'green'}>
                {status}
            </Tag>
        ),
    },
    {
        title: 'Actions',
        key: 'actions',
        render: (_, record) => (
            <Space size="middle">
                <Button type="primary" size="small">
                    <Link to={`/details/events/${record.id}`}>Details</Link>
                </Button>
            </Space>
        ),
    },
];

const EVENT_STATUS_OPTIONS = [
    { value: 'all', label: 'All Statuses' },
    { value: 'SCHEDULED', label: 'Scheduled' },
    { value: 'CANCELED', label: 'Canceled' },
    { value: 'FINISHED', label: 'Finished' },
];

const ParticipatedEventsPage = () => {
    const [statusFilter, setStatusFilter] = useState<string>('all');
    const { data: eventsData, error: eventsError, loading: eventsLoading, fetchData } = useFetchParticipatedEventsData(statusFilter === 'all' ? undefined : statusFilter); // Use new hook

    const onStatusFilterChange = (value: string) => {
        setStatusFilter(value);
        fetchData(value === 'all' ? undefined : value);
    };

    return (
        <div>
            <Helmet>
                <title>Participated Events | Antd Dashboard</title>
            </Helmet>
            <PageHeader
                title="Participated Events"
                breadcrumbs={[
                    {
                        title: (
                            <>
                                <HomeOutlined />
                                <span>Home</span>
                            </>
                        ),
                        path: '/',
                    },
                    {
                        title: (
                            <>
                                <PieChartOutlined />
                                <span>Dashboards</span>
                            </>
                        ),
                        // menu: {
                        //     items: DASHBOARD_ITEMS.map((d) => ({
                        //         key: d.title,
                        //         label: <Link to={d.path}>{d.title}</Link>, // Sử dụng label thay vì title
                        //     }) as MenuProps['items'][number]), // Type cast menu items
                        // },
                    },
                    {
                        title: 'Participated Events',
                    },
                ]}
            />

            <Card
                title="List of Participated Events"
                extra={
                    <Select
                        defaultValue="all"
                        style={{ width: 200 }}
                        onChange={onStatusFilterChange}
                        options={EVENT_STATUS_OPTIONS}
                    />
                }
            >
                {eventsError && (
                    <Alert
                        message="Error"
                        description={eventsError.toString()}
                        type="error"
                        showIcon
                        closable
                    />
                )}

                <Table
                    columns={EVENT_COLUMNS}
                    dataSource={eventsData || []} // Use eventsData directly (data is already extracted in hook)
                    loading={eventsLoading}
                    pagination={{
                        total: eventsData?.meta?.totalItems,
                        showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,
                        pageSize: 10,
                        showSizeChanger: true,
                        pageSizeOptions: ['10', '20', '50', '100'],
                    }}
                />
            </Card>
        </div>
    );
};

export default ParticipatedEventsPage;

src\pages\dashboards\Projects.tsx:
import { Alert, Button, Col, Row, Segmented, Space } from 'antd';
import {
  Card,
  ClientsTable,
  Loader,
  PageHeader,
  ProjectsCard,
  ProjectsTable,
  RevenueCard,
} from '../../components';
import { Column } from '@ant-design/charts';
import { Projects } from '../../types';
import { useState } from 'react';
import {
  CloudUploadOutlined,
  HomeOutlined,
  PieChartOutlined,
  PlusOutlined,
} from '@ant-design/icons';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import { Helmet } from 'react-helmet-async';
import { useFetchData } from '../../hooks';

const RevenueColumnChart = () => {
  const data = [
    {
      name: 'Income',
      period: 'Mon',
      value: 18.9,
    },
    {
      name: 'Income',
      period: 'Tue',
      value: 28.8,
    },
    {
      name: 'Income',
      period: 'Wed',
      value: 39.3,
    },
    {
      name: 'Income',
      period: 'Thur',
      value: 81.4,
    },
    {
      name: 'Income',
      period: 'Fri',
      value: 47,
    },
    {
      name: 'Income',
      period: 'Sat',
      value: 20.3,
    },
    {
      name: 'Income',
      period: 'Sun',
      value: 24,
    },
    {
      name: 'Spent',
      period: 'Mon',
      value: 12.4,
    },
    {
      name: 'Spent',
      period: 'Tue',
      value: 23.2,
    },
    {
      name: 'Spent',
      period: 'Wed',
      value: 34.5,
    },
    {
      name: 'Spent',
      period: 'Thur',
      value: 99.7,
    },
    {
      name: 'Spent',
      period: 'Fri',
      value: 52.6,
    },
    {
      name: 'Spent',
      period: 'Sat',
      value: 35.5,
    },
    {
      name: 'Spent',
      period: 'Sun',
      value: 37.4,
    },
  ];
  const config = {
    data,
    isGroup: true,
    xField: 'period',
    yField: 'value',
    seriesField: 'name',

    /** set color */
    // color: ['#1ca9e6', '#f88c24'],

    /** Set spacing */
    // marginRatio: 0.1,
    label: {
      // Label data label position can be manually configured
      position: 'middle',
      // 'top', 'middle', 'bottom'
      // Configurable additional layout method
      layout: [
        // Column chart data label position automatically adjusted
        {
          type: 'interval-adjust-position',
        }, // Data label anti-obstruction
        {
          type: 'interval-hide-overlap',
        }, // Data label text color automatically adjusted
        {
          type: 'adjust-color',
        },
      ],
    },
  };
  // @ts-ignore
  return <Column {...config} />;
};

const PROJECT_TABS = [
  {
    key: 'all',
    label: 'All projects',
  },
  {
    key: 'inProgress',
    label: 'Active',
  },
  {
    key: 'onHold',
    label: 'On Hold',
  },
];

export const ProjectsDashboardPage = () => {
  const {
    data: projectsData,
    error: projectsDataError,
    loading: projectsDataLoading,
  } = useFetchData('../mocks/Projects.json');
  const {
    data: clientsData,
    error: clientsDataError,
    loading: clientsDataLoading,
  } = useFetchData('../mocks/Clients.json');
  const [projectTabsKey, setProjectsTabKey] = useState<string>('all');

  const PROJECT_TABS_CONTENT: Record<string, React.ReactNode> = {
    all: <ProjectsTable key="all-projects-table" data={projectsData} />,
    inProgress: (
      <ProjectsTable
        key="in-progress-projects-table"
        data={projectsData.filter((_: Projects) => _.status === 'in progress')}
      />
    ),
    onHold: (
      <ProjectsTable
        key="on-hold-projects-table"
        data={projectsData.filter((_: Projects) => _.status === 'on hold')}
      />
    ),
  };

  const onProjectsTabChange = (key: string) => {
    setProjectsTabKey(key);
  };

  return (
    <div>
      <Helmet>
        <title>Projects | Antd Dashboard</title>
      </Helmet>
      <PageHeader
        title="projects dashboard"
        breadcrumbs={[
          {
            title: (
              <>
                <HomeOutlined />
                <span>home</span>
              </>
            ),
            path: '/',
          },
          {
            title: (
              <>
                <PieChartOutlined />
                <span>dashboards</span>
              </>
            ),
            menu: {
              items: DASHBOARD_ITEMS.map((d) => ({
                key: d.title,
                title: <Link to={d.path}>{d.title}</Link>,
              })),
            },
          },
          {
            title: 'projects',
          },
        ]}
      />
      <Row
        gutter={[
          { xs: 8, sm: 16, md: 24, lg: 32 },
          { xs: 8, sm: 16, md: 24, lg: 32 },
        ]}
      >
        <Col xs={24} sm={12} lg={6}>
          <RevenueCard title="Total revenue" value={1556.3} diff={280} />
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <RevenueCard title="Spent this week" value={1806.3} diff={180} />
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <RevenueCard title="Worked this week" value="35:12" diff={-10.0} />
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <RevenueCard title="Worked today" value="05:30:00" diff={-20.1} />
        </Col>
        <Col span={24}>
          <Card
            title="Recently added projects"
            extra={<Button>View all projects</Button>}
          >
            {projectsDataError ? (
              <Alert
                message="Error"
                description={projectsDataError.toString()}
                type="error"
                showIcon
              />
            ) : projectsDataLoading ? (
              <Loader />
            ) : (
              <Row gutter={[16, 16]}>
                {projectsData.slice(0, 4).map((o: Projects) => {
                  return (
                    <Col xs={24} sm={12} xl={6} key={o.project_id}>
                      <ProjectsCard
                        project={o}
                        type="inner"
                        style={{ height: '100%' }}
                      />
                    </Col>
                  );
                })}
              </Row>
            )}
          </Card>
        </Col>
        <Col xs={24} sm={12} xl={16}>
          <Card
            title="Project stats"
            extra={
              <Segmented
                options={['Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly']}
              />
            }
          >
            <RevenueColumnChart />
          </Card>
        </Col>
        <Col xs={24} sm={12} xl={8}>
          <Card title="Top clients">
            {clientsDataError ? (
              <Alert
                message="Error"
                description={clientsDataError.toString()}
                type="error"
                showIcon
              />
            ) : clientsDataLoading ? (
              <Loader />
            ) : (
              <ClientsTable data={clientsData.slice(0, 5)} />
            )}
          </Card>
        </Col>
        <Col span={24}>
          <Card
            title="Projects"
            extra={
              <Space>
                <Button icon={<CloudUploadOutlined />}>Import</Button>
                <Button icon={<PlusOutlined />}>New project</Button>
              </Space>
            }
            tabList={PROJECT_TABS}
            activeTabKey={projectTabsKey}
            onTabChange={onProjectsTabChange}
          >
            {PROJECT_TABS_CONTENT[projectTabsKey]}
          </Card>
        </Col>
      </Row>
    </div>
  );
};


src\pages\dashboards\Social.tsx:
import { useEffect, useState } from 'react';
import { Col, ConfigProvider, Row, Tabs, TabsProps } from 'antd';
import {
  FacebookFilled,
  FacebookOutlined,
  HomeOutlined,
  InstagramFilled,
  InstagramOutlined,
  LinkedinFilled,
  LinkedinOutlined,
  PieChartOutlined,
  TwitterCircleFilled,
  TwitterOutlined,
  YoutubeFilled,
  YoutubeOutlined,
} from '@ant-design/icons';
import {
  CommentsCard,
  DevicesCardChart,
  FollowersChart,
  LikesChart,
  MilestonesCard,
  PageHeader,
  PostsCard,
  SocialStatsCard,
} from '../../components';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import { useMediaQuery } from 'react-responsive';
import { COLOR } from '../../App.tsx';
import { useFetchData } from '../../hooks';
import { Comments, Posts } from '../../types';
import { useStylesContext } from '../../context';

type TabKeys =
  | 'social-facebook-tab'
  | 'social-twitter-tab'
  | 'social-instagram-tab'
  | 'social-linkedin-tab'
  | 'social-youtube-tab'
  | string;

type SectionProps = {
  tab: TabKeys;
};

const Section = ({ tab }: SectionProps) => {
  const stylesContext = useStylesContext();
  const [title, setTitle] = useState<string>('');
  const {
    data: socialsData,
    loading: socialsDataLoading,
    error: socialsDataError,
  } = useFetchData('../mocks/SocialMedia.json');
  const {
    data: socialCommentsData,
    loading: socialsCommentsDataLoading,
    error: socialsCommentsDataError,
  } = useFetchData('../mocks/SocialComments.json');
  const {
    data: scheduledPostsData,
    loading: scheduledPostsDataLoading,
    error: scheduledPostsDataError,
  } = useFetchData('../mocks/ScheduledPosts.json');

  useEffect(() => {
    switch (tab) {
      case 'social-facebook-tab':
        setTitle('facebook');
        break;
      case 'social-twitter-tab':
        setTitle('twitter');
        break;
      case 'social-instagram-tab':
        setTitle('instagram');
        break;
      case 'social-linkedin-tab':
        setTitle('linkedin');
        break;
      case 'social-youtube-tab':
        setTitle('youtube');
        break;
      default:
        setTitle('');
    }
  }, [tab]);

  return (
    <>
      <Col xs={24} xl={16}>
        <Row {...stylesContext?.rowProps}>
          <Col xs={24} md={12} lg={6}>
            <SocialStatsCard
              key="followers-card"
              title="followers"
              value={
                socialsData?.find((_: any) => _.title === title)?.followers || 0
              }
              error={socialsDataError}
              loading={socialsDataLoading}
              style={{ height: '100%' }}
            />
          </Col>
          <Col xs={24} md={12} lg={6}>
            <SocialStatsCard
              key="following-card"
              title="following"
              value={
                socialsData?.find((_: any) => _.title === title)?.following || 0
              }
              error={socialsDataError}
              loading={socialsDataLoading}
              style={{ height: '100%' }}
            />
          </Col>
          <Col xs={24} md={12} lg={6}>
            <SocialStatsCard
              key="likes-card"
              title="likes"
              value={
                socialsData?.find((_: any) => _.title === title)?.likes || 0
              }
              error={socialsDataError}
              loading={socialsDataLoading}
              style={{ height: '100%' }}
            />
          </Col>
          <Col xs={24} md={12} lg={6}>
            <SocialStatsCard
              key="comments-card"
              title="comments"
              value={
                socialsData?.find((_: any) => _.title === title)?.comments || 0
              }
              error={socialsDataError}
              loading={socialsDataLoading}
              style={{ height: '100%' }}
            />
          </Col>
          <Col xs={24} xl={12}>
            <FollowersChart />
          </Col>
          <Col xs={24} xl={12}>
            <LikesChart style={{ height: '100%' }} />
          </Col>
          <Col xs={24} sm={24} xl={12}>
            <PostsCard
              title="Scheduled Posts"
              as="scheduled"
              data={scheduledPostsData?.filter(
                (_: Posts) => _.platform.toLowerCase() === title
              )}
              loading={scheduledPostsDataLoading}
              error={scheduledPostsDataError}
            />
          </Col>
          <Col xs={24} sm={24} xl={12}>
            <Row
              gutter={[
                { xs: 8, sm: 12, md: 20, lg: 24 },
                { xs: 4, sm: 8, md: 12, lg: 16 },
              ]}
            >
              <Col span={24}>
                <DevicesCardChart />
              </Col>
              <Col span={24}>
                <MilestonesCard />
              </Col>
            </Row>
          </Col>
        </Row>
      </Col>
      <Col xs={24} xl={8}>
        <CommentsCard
          data={socialCommentsData
            .filter((_: Comments) => _.platform.toLowerCase() === title)
            ?.slice(0, 7)}
          loading={socialsCommentsDataLoading}
          error={socialsCommentsDataError}
        />
      </Col>
    </>
  );
};

export const SocialDashboardPage = () => {
  const stylesContext = useStylesContext();
  const isMobile = useMediaQuery({ maxWidth: 769 });
  const [activeTabKey, setActiveTabKey] = useState<TabKeys>(
    'social-facebook-tab'
  );

  const TAB_LIST: TabsProps['items'] = [
    {
      key: 'social-facebook-tab',
      label: (
        <span>
          {activeTabKey === 'social-facebook-tab' ? (
            <FacebookFilled />
          ) : (
            <FacebookOutlined />
          )}
          Facebook
        </span>
      ),
    },
    {
      key: 'social-twitter-tab',
      label: (
        <span>
          {activeTabKey === 'social-twitter-tab' ? (
            <TwitterCircleFilled />
          ) : (
            <TwitterOutlined />
          )}
          Twitter
        </span>
      ),
    },
    {
      key: 'social-instagram-tab',
      label: (
        <span>
          {activeTabKey === 'social-instagram-tab' ? (
            <InstagramFilled />
          ) : (
            <InstagramOutlined />
          )}
          Instagram
        </span>
      ),
    },
    {
      key: 'social-linkedin-tab',
      label: (
        <span>
          {activeTabKey === 'social-linkedin-tab' ? (
            <LinkedinFilled />
          ) : (
            <LinkedinOutlined />
          )}
          LinkedIn
        </span>
      ),
    },
    {
      key: 'social-youtube-tab',
      label: (
        <span>
          {activeTabKey === 'social-youtube-tab' ? (
            <YoutubeFilled />
          ) : (
            <YoutubeOutlined />
          )}
          YouTube
        </span>
      ),
    },
  ];

  const TAB_CONTENT: Record<TabKeys, React.ReactNode> = {
    'social-facebook-tab': <Section tab={activeTabKey} />,
    'social-twitter-tab': <Section tab={activeTabKey} />,
    'social-instagram-tab': <Section tab={activeTabKey} />,
    'social-linkedin-tab': <Section tab={activeTabKey} />,
    'social-youtube-tab': <Section tab={activeTabKey} />,
  };

  const onTabChange = (key: TabKeys) => {
    setActiveTabKey(key);
  };

  return (
    <div>
      <PageHeader
        title="social dashboard"
        breadcrumbs={[
          {
            title: (
              <>
                <HomeOutlined />
                <span>home</span>
              </>
            ),
            path: '/',
          },
          {
            title: (
              <>
                <PieChartOutlined />
                <span>dashboards</span>
              </>
            ),
            menu: {
              items: DASHBOARD_ITEMS.map((d) => ({
                key: d.title,
                title: <Link to={d.path}>{d.title}</Link>,
              })),
            },
          },
          {
            title: 'social',
          },
        ]}
      />
      <ConfigProvider
        theme={{
          components: {
            Tabs: {
              cardBg: COLOR['50'],
              colorBgContainer: COLOR['500'],
              itemSelectedColor: '#FFFFFF',
              itemHoverColor: COLOR['500'],
            },
          },
        }}
      >
        <Tabs
          centered={isMobile}
          items={TAB_LIST}
          activeKey={activeTabKey}
          onChange={onTabChange}
          type="card"
          size="middle"
        />
      </ConfigProvider>
      <Row {...stylesContext?.rowProps}>{TAB_CONTENT[activeTabKey]}</Row>
    </div>
  );
};


src\pages\dashboards\Users.tsx:
import { HomeOutlined, PieChartOutlined } from '@ant-design/icons';
import { useStylesContext } from '../../context';
import { Helmet } from 'react-helmet-async';
import { DASHBOARD_ITEMS } from '../../constants';
import { Link } from 'react-router-dom';
import {
    Col,
    Row,
} from 'antd';
  import {
    PageHeader,
} from '../../components';
import {
  UserTable
} from '../../components/dashboard';
import { useFetchData } from '../../hooks';

export const UserDashboardPage = () => {
    const stylesContext = useStylesContext();
    const {
        data: users,
        error: usersError,
        loading: usersLoading,
      } = useFetchData('../mocks/MyUsers.json');
  return (
    <div>
      <Helmet>
        <title>Incomming Events | Antd Dashboard</title>
      </Helmet>
      <PageHeader
        title="incomming events dashboard"
        breadcrumbs={[
          {
            title: (
              <>
                <HomeOutlined />
                <span>home</span>
              </>
            ),
            path: '/',
          },
          {
            title: (
              <>
                <PieChartOutlined />
                <span>dashboards</span>
              </>
            ),
            menu: {
              items: DASHBOARD_ITEMS.map((d) => ({
                key: d.title,
                title: <Link to={d.path}>{d.title}</Link>,
              })),
            },
          },
          {
            title: 'users',
          },
        ]}
      />
      <Row {...stylesContext?.rowProps}>
      <Col span={24}>
          <UserTable data={users} loading={usersLoading} error={usersError} />
        </Col>
      </Row>
    </div>
  )
}

src\pages\details\EventDetailsPage.tsx:
// src\pages\details\EventDetailsPage.tsx
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import {
    Alert,
    Button,
    Card,
    Col,
    Descriptions,
    Flex,
    Image,
    List,
    message,
    Row,
    Space,
    Table,
    Tag,
    Typography,
} from 'antd';
import { HomeOutlined, PieChartOutlined, UserAddOutlined, DownloadOutlined } from '@ant-design/icons';
import { DASHBOARD_ITEMS } from '../../constants';
import { PageHeader, Loader } from '../../components';
import { useFetchData } from '../../hooks';
import dayjs from 'dayjs';
import authService from '../../services/authService';
import { Events } from '../../types';
import { EventParticipantsTable } from '../dashboards/EventParticipantsTable'; // Import EventParticipantsTable
import jsPDF from 'jspdf'; // Import jsPDF
import { Helmet } from 'react-helmet-async';

const { Title, Text, Paragraph } = Typography;

export const EventDetailsPage: React.FC = () => {
    const { id } = useParams<{ id: string }>();
    const [eventDetails, setEventDetails] = useState<Events | null>(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const navigate = useNavigate();

    useEffect(() => {
        const fetchEventDetails = async () => {
            setLoading(true);
            setError(null);
            try {
                const accessToken = localStorage.getItem('accessToken');
                const response = await authService.getEventDetails(id) as { statusCode: number; data: { event: Events }; message: string };
                if (response && response.statusCode === 200) {
                    setEventDetails(response.data.event);
                } else {
                    setError(response?.message || 'Failed to load event details');
                    message.error(response?.message || 'Failed to load event details');
                }
            } catch (error: any) {
                console.error('Error fetching event details:', error);
                setError(error.message || 'Failed to load event details');
                message.error(error.message || 'Failed to load event details');
            } finally {
                setLoading(false);
            }
        };

        fetchEventDetails();
    }, [id, navigate]);

    const handleRegisterEvent = async () => {
        setLoading(true);
        try {
            const accessToken = localStorage.getItem('accessToken');
            if (!accessToken) {
                message.error("No access token found. Please login again.");
                navigate('/auth/signin');
                return;
            }

            if (!eventDetails?.id) {
                message.error("Event ID is missing.");
                return;
            }

            const response = await authService.registerEvent(eventDetails.id, [], accessToken) as { statusCode: number; message: string };
            if (response && response.statusCode === 201) {
                message.success(response.message);
                // Optionally redirect or update UI after successful registration
            } else {
                message.error(response?.message || 'Failed to register for event');
            }
        } catch (error: any) {
            console.error('Error registering for event:', error);
            message.error(error.message || 'Failed to register for event');
        } finally {
            setLoading(false);
        }
    };

    const handleDownloadPdf = async () => {
        message.info("Download PDF function is not implemented yet for general events."); // Updated message
    };


    if (loading) {
        return <Loader />;
    }

    if (error) {
        return <Alert message="Error" description={error} type="error" showIcon />;
    }

    if (!eventDetails) {
        return <Alert message="Event not found" description="Could not load event details" type="warning" showIcon />;
    }


    return (
        <div>
            <Helmet>
                <title>{eventDetails.name} | Event Details</title>
            </Helmet>
            <PageHeader
                title="Event Details"
                breadcrumbs={[
                    {
                        title: (
                            <>
                                <HomeOutlined />
                                <span>Home</span>
                            </>
                        ),
                        path: '/',
                    },
                    {
                        title: (
                            <>
                                <PieChartOutlined />
                                <span>Dashboards</span>
                            </>
                        ),
                        menu: {
                            items: DASHBOARD_ITEMS.map((d) => ({
                                key: d.title,
                                title: <Link to={d.path}>{d.title}</Link>,
                            })),
                        },
                    },
                    {
                        title: 'Event Details',
                    },
                ]}
            />

            <Card title={<Title level={3}>{eventDetails.name}</Title>}
                extra={<Button type="primary" icon={<UserAddOutlined />} onClick={handleRegisterEvent} loading={loading}>Register Event</Button>}
            >
                <Row gutter={[16, 16]}>
                    <Col span={24}>
                        <Image src={eventDetails.banner || "https://placehold.co/1920x1080"} alt="Event Banner" style={{ width: '100%', borderRadius: '10px' }} fallback="https://placehold.co/1920x1080" />
                    </Col>
                    <Col span={24}>
                        <Descriptions bordered column={{ xs: 1, sm: 1, md: 2, lg: 2, xl: 3 }}>
                            <Descriptions.Item label="Name">{eventDetails.name}</Descriptions.Item>
                            <Descriptions.Item label="Category">{eventDetails.categoryId}</Descriptions.Item>
                            <Descriptions.Item label="Location">{eventDetails.location}</Descriptions.Item>
                            <Descriptions.Item label="Start Date">
                                {dayjs(eventDetails.startDate).format('YYYY-MM-DD HH:mm:ss')}
                            </Descriptions.Item>
                            <Descriptions.Item label="End Date">
                                {dayjs(eventDetails.endDate).format('YYYY-MM-DD HH:mm:ss')}
                            </Descriptions.Item>
                            <Descriptions.Item label="Status"><Tag color={eventDetails.status === 'SCHEDULED' ? 'blue' : eventDetails.status === 'CANCELED' ? 'red' : 'green'}>{eventDetails.status}</Tag></Descriptions.Item>
                            <Descriptions.Item label="Max Participants">{eventDetails.maxParticipants || 'Unlimited'}</Descriptions.Item>
                            <Descriptions.Item span={3} label="Description">
                                {eventDetails.description || "No description provided."}
                            </Descriptions.Item>
                        </Descriptions>
                    </Col>
                    <Col span={24}>
                        <Card title="Schedule">
                            {eventDetails.schedule && eventDetails.schedule.length > 0 ? (
                                <Table
                                    dataSource={eventDetails.schedule}
                                    columns={[
                                        { title: 'Title', dataIndex: 'title', key: 'title' },
                                        {
                                            title: 'Start Time',
                                            dataIndex: 'startTime',
                                            key: 'startTime',
                                            render: (date) => dayjs(date).format('YYYY-MM-DD HH:mm:ss'),
                                        },
                                        {
                                            title: 'End Time',
                                            dataIndex: 'endTime',
                                            key: 'endTime',
                                            render: (date) => dayjs(date).format('YYYY-MM-DD HH:mm:ss'),
                                        },
                                        { title: 'Description', dataIndex: 'description', key: 'description' },
                                        // Add speaker names if available in your data
                                    ]}
                                    pagination={false}
                                />
                            ) : (
                                <Alert message="No schedule available for this event." type="info" showIcon />
                            )}
                        </Card>
                    </Col>
                    {eventDetails.videoIntro && (
                        <Col span={24}>
                            <Card title="Video Introduction">
                                <iframe
                                    width="100%"
                                    height="480"
                                    src={eventDetails.videoIntro}
                                    title="Event Introduction Video"
                                    frameBorder="0"
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                    allowFullScreen
                                />
                            </Card>
                        </Col>
                    )}
                    {eventDetails.documents && eventDetails.documents.length > 0 && (
                        <Col span={24}>
                            <Card title="Event Documents">
                                <List
                                    dataSource={eventDetails.documents}
                                    renderItem={item => (
                                        <List.Item>
                                            <Typography.Link href={item} target="_blank">
                                                {item}
                                            </Typography.Link>
                                        </List.Item>
                                    )}
                                />
                            </Card>
                        </Col>
                    )}
                     {eventDetails?.status === 'FINISHED' && (
                        <Col span={24}>
                            <Card title="Participants Check-in/Check-out List"
                                extra={<Button icon={<DownloadOutlined />} onClick={handleDownloadPdf} loading={loading} disabled={true}> {/* Nút Download PDF bị vô hiệu hóa */}
                                    Download PDF
                                </Button>}
                            >
                                <EventParticipantsTable eventId={id || ''} />
                            </Card>
                        </Col>
                    )}
                </Row>
            </Card>
        </div>
    );
};

export default EventDetailsPage;

src\pages\details\Events.tsx:
import { useParams } from 'react-router-dom';
import {
  Card as AntdCard,
  Col,
  Flex,
  Image,
  Row,
  Typography,
} from 'antd';
import { Card } from '../../components';
import { useStylesContext } from '../../context';
import {
  EventTimelineCard
} from '../../components/dashboard';
import { useFetchData } from '../../hooks';
const { Title, Text, Paragraph } = Typography;
export const DetailEventPage = () => {
  const { id } = useParams<{ id: string }>();
  const stylesContext = useStylesContext();
  const {
    data: timelineData,
    loading: timelineDataLoading,
    error: timelineDataError,
  } = useFetchData('../../mocks/scheduleTimeline.json');
  return (
    <div>
      <Row {...stylesContext?.rowProps}>
        <Col span={24}>
          <Card title={<Title level={3}>About This Event (Event ID : {id})</Title>}>
            <Flex gap="small" vertical>
              <Text>Job Fair 101.</Text>
              <Image
                src='https://mvdirona.com/cache/433x324-0/trips/seattle2022/images/PXL_20221118_225253182_2.web.jpg'
                alt="event banner"
                width="100%"
              />
              <Paragraph>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
                eiusmod tempor incididunt ut labore et dolore magna aliqua. Non
                tellus orci ac auctor augue mauris augue. Id diam vel quam
                elementum pulvinar. Nunc scelerisque viverra mauris in. Tortor
                aliquam nulla facilisi cras fermentum odio eu. Eleifend mi in
                nulla posuere sollicitudin aliquam ultrices. Quis commodo odio
                aenean sed adipiscing diam donec adipiscing tristique. Pharetra
                magna ac placerat vestibulum lectus mauris ultrices. Viverra
                accumsan in nisl nisi scelerisque eu ultrices vitae. Etiam
                tempor orci eu lobortis elementum nibh tellus molestie nunc.
                Iaculis eu non diam phasellus vestibulum lorem sed risus
                ultricies. Vestibulum lectus mauris ultrices eros in cursus
                turpis. Risus nec feugiat in fermentum posuere urna nec. Nam at
                lectus urna duis.
              </Paragraph>
              <Paragraph>
                Sit amet purus gravida quis blandit turpis cursus. Vulputate eu
                scelerisque felis imperdiet proin fermentum leo vel orci. Fusce
                id velit ut tortor pretium viverra suspendisse potenti.
              </Paragraph>
            </Flex>
          </Card>
        </Col>
        <Col span={24}>
          <EventTimelineCard 
                title="Event's Activities"
                data={timelineData}
                loading={timelineDataLoading}
                error={timelineDataError}
          />
        </Col>
      </Row>
    </div>
  )
}


src\pages\details\index.ts:
export {DetailEventPage} from './Events'
export {DetailMyEventPage} from './MyEvent.tsx';

src\pages\details\MyEvent.tsx:
// src\pages\details\MyEventPage.tsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import {
    Col,
    Flex,
    Image,
    Row,
    Typography,
    Button,
    message,
    Alert
} from 'antd';
import { Card, Loader } from '../../components';
import { useStylesContext } from '../../context';
import {
    EventTimelineCard,
    MyEventTimelineCard
} from '../../components/dashboard';
import { useFetchData } from '../../hooks';
import { ActivityTable } from '../../components/dashboard/events';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../../redux/store';
import { DownloadOutlined } from '@ant-design/icons';
import authService from '../../services/authService';
import { fetchEventDetailsStart, setEventDetails, fetchEventDetailsFailure, clearEventDetails } from '../../redux/eventDetailsSlice';
import jsPDF from 'jspdf';
import { EventParticipantsTable } from '../dashboards/EventParticipantsTable';
import dayjs from 'dayjs';

const { Title, Text, Paragraph } = Typography;

export interface ParticipantData {
    id: string;
    name: string;
    email: string;
    phoneNumber: string;
    checkInAt: string | null;
    checkOutAt: string | null;
}


export const DetailMyEventPage = () => {
    const { id } = useParams<{ id: string }>();
    const stylesContext = useStylesContext();
    const dispatch = useDispatch<any>();
    const eventDetails = useSelector((state: RootState) => state.eventDetails.eventDetails);
    const eventDetailsLoading = useSelector((state: RootState) => state.eventDetails.loading);
    const eventDetailsError = useSelector((state: RootState) => state.eventDetails.error);


    const {
        data: timelineData,
        loading: timelineDataLoading,
        error: timelineDataError,
    } = useFetchData('../../mocks/scheduleTimeline.json');
    const {
        data: activitiesTableData,
        loading: activitiesTableLoading,
        error: activitiesTableError,
    } = useFetchData('../../mocks/PaticipatedActivities.json');


    useEffect(() => {
        const loadEventDetails = async () => {
            if (!id) return;

            dispatch(fetchEventDetailsStart());
            try {
                const accessToken = localStorage.getItem('accessToken');
                const response = await authService.getEventDetails(id, accessToken || undefined) as { data: { event: any } };
                dispatch(setEventDetails(response.data.event));

            } catch (error: any) {
                dispatch(fetchEventDetailsFailure(error.message || 'Failed to load event details'));
                message.error(error.message || 'Failed to load event details');
            }
        };

        loadEventDetails();

        return () => {
            dispatch(clearEventDetails());
        };


    }, [id, dispatch]);


    const [loading, setLoading] = useState(false);

    const handleDownloadPdf = async () => {
        if (!id) {
            message.error("Event ID is missing for PDF download.");
            return;
        }

        setLoading(true);
        try {
            const accessToken = localStorage.getItem('accessToken');
            if (!accessToken) {
                message.error("No access token found. Please login again.");
                return;
            }

            const response = await authService.getEventParticipants(id, accessToken) as { statusCode: number, data: ParticipantData[], message?: string };
            if (response.statusCode === 200 && response.data) {
                const participants: ParticipantData[] = response.data; // Type response data

                // Generate PDF using jsPDF
                const pdfDoc = new jsPDF();
                pdfDoc.text(`Participants List - Event: ${eventDetails?.name}`, 10, 10);

                let yPosition = 20;
                participants.forEach((participant, index) => {
                    pdfDoc.text(`${index + 1}. Name: ${participant.name}, Email: ${participant.email}, Check-in: ${participant.checkInAt ? dayjs(participant.checkInAt).format('YYYY-MM-DD HH:mm:ss') : 'N/A'}, Check-out: ${participant.checkOutAt ? dayjs(participant.checkOutAt).format('YYYY-MM-DD HH:mm:ss') : 'N/A'}`, 10, yPosition);
                    yPosition += 10; // Increase yPosition for next line
                });

                pdfDoc.save(`participants-list-event-${eventDetails?.name}.pdf`); // Trigger download

                message.success("PDF Download started.");
            } else {
                message.error(response.message || 'Failed to fetch participants for PDF');
            }
        } catch (error: any) {
            console.error('Error fetching participants for PDF:', error);
            message.error(error.message || 'Failed to fetch participants for PDF');
        } finally {
            setLoading(false);
        }
    };


    if (eventDetailsLoading) { // Use Redux loading state
        return <Loader />;
    }

    if (eventDetailsError) { // Use Redux error state
        return <Alert message="Error" description={eventDetailsError} type="error" showIcon />;
    }

    if (!eventDetails) { // Check if eventDetails is null (not loaded)
        return <Alert message="Event not found" description="Could not load event details" type="warning" showIcon />;
    }


    return (
        <div>
            <Row {...stylesContext?.rowProps}>
                <Col span={24}>
                    <Card title={<Title level={3}>About This Event (Event ID : {id})</Title>}>
                        <Flex gap="small" vertical>
                            <Text>Job Fair 101.</Text>
                            <Image
                                src={eventDetails.banner || 'https://placehold.co/1920x1080'} // Use eventDetails.banner
                                alt="event banner"
                                width="100%"
                            />
                            <Paragraph>
                                {eventDetails.description}
                            </Paragraph>
                            <Paragraph>
                                Sit amet purus gravida quis blandit turpis cursus. Vulputate eu
                                scelerisque felis imperdiet proin fermentum leo vel orci. Fusce
                                id velit ut tortor pretium viverra suspendisse potenti.
                            </Paragraph>
                        </Flex>
                    </Card>
                </Col>
                <Col span={24}>
                    <MyEventTimelineCard
                        title="Event's Activities"
                        data={timelineData}
                        loading={timelineDataLoading}
                        error={timelineDataError}
                    />
                </Col>
                <Col span={24}>
                    <ActivityTable
                        data={activitiesTableData}
                        loading={activitiesTableLoading}
                        error={activitiesTableError}
                    />
                </Col>
                {eventDetails?.status === 'FINISHED' && (
                    <Col span={24}>
                        <Card title="Participants Check-in/Check-out List"
                            extra={<Button icon={<DownloadOutlined />} onClick={handleDownloadPdf} loading={loading}>
                                Download PDF
                            </Button>}
                        >
                            <EventParticipantsTable eventId={id || ''} />
                        </Card>
                    </Col>
                )}
            </Row>
        </div>
    )
}

export default DetailMyEventPage;

src\pages\edit\EditEventPage.tsx:
// src\pages\edit\EditEventPage.tsx
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import {
    Alert,
    Button,
    Card,
    Col,
    DatePicker,
    Form,
    Input,
    InputNumber,
    Row,
    Select,
    Typography,
    message,
} from 'antd';
import { HomeOutlined, PieChartOutlined, SaveOutlined, ArrowLeftOutlined } from '@ant-design/icons';
import { DASHBOARD_ITEMS } from '../../constants';
import { PageHeader, Loader } from '../../components';
import { Events } from '../../types';
import authService from '../../services/authService';
import dayjs from 'dayjs';
import { Helmet } from 'react-helmet-async';

const EditEventPage: React.FC = () => {
    const { id } = useParams<{ id: string }>();
    const [eventDetails, setEventDetails] = useState<Events | null>(null);
    const [loading, setLoading] = useState(false);
    const [form] = Form.useForm();
    const navigate = useNavigate();
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchEventDetails = async () => {
            setLoading(true);
            setError(null);
            try {
                const accessToken = localStorage.getItem('accessToken');
                const response = await authService.getEventDetails(id, accessToken || undefined) as { statusCode: number; data: { event: Events }; message: string };
                if (response.statusCode === 200 && response.data.event) {
                    setEventDetails(response.data.event);
                    form.setFieldsValue({
                        name: response.data.event.name,
                        description: response.data.event.description,
                        startDate: dayjs(response.data.event.startDate),
                        endDate: dayjs(response.data.event.endDate),
                        location: response.data.event.location,
                        categoryId: response.data.event.categoryId,
                        maxParticipants: response.data.event.maxParticipants,
                        banner: response.data.event.banner,
                        videoIntro: response.data.event.videoIntro,
                        status: response.data.event.status, // Pre-fill status field
                    });
                } else {
                    setError(response?.message || 'Failed to load event details');
                    message.error(response?.message || 'Failed to load event details');
                }
            } catch (error: any) {
                console.error('Error fetching event details:', error);
                setError(error.message || 'Failed to load event details');
                message.error(error.message || 'Failed to load event details');
            } finally {
                setLoading(false);
            }
        };

        fetchEventDetails();
    }, [id, form, navigate]);

    const onFinish = async (values: any) => {
        setLoading(true);
        try {
            const accessToken = localStorage.getItem('accessToken');
            if (!accessToken) {
                message.error("No access token found. Please login again.");
                navigate('/auth/signin');
                return;
            }

            const eventData = { ...values, startDate: values.startDate.toISOString(), endDate: values.endDate.toISOString() };
            const response = await authService.updateEvent(id!, eventData, accessToken) as { statusCode: number; message: string };
            if (response.statusCode === 200) {
                message.success(response.message);
                setTimeout(() => {
                    navigate('/dashboards/my-events');
                }, 1000);
            } else {
                message.error(response.message || 'Failed to update event');
            }
        } catch (error: any) {
            console.error('Error updating event:', error);
            message.error(error.message || 'Failed to update event');
        } finally {
            setLoading(false);
        }
    };

    const onFinishFailed = (errorInfo: any) => {
        console.log('Failed:', errorInfo);
    };

    if (loading && !eventDetails) {
        return <Loader />;
    }

    if (error) {
        return <Alert message="Error" description={error} type="error" showIcon />;
    }


    return (
        <div>
            <Helmet>
                <title>Edit Event | Antd Dashboard</title>
            </Helmet>
            <PageHeader
                title="Edit Event"
                breadcrumbs={[
                    {
                        title: (
                            <>
                                <HomeOutlined />
                                <span>Home</span>
                            </>
                        ),
                        path: '/',
                    },
                    {
                        title: (
                            <>
                                <PieChartOutlined />
                                <span>Dashboards</span>
                            </>
                        ),
                        menu: {
                            items: DASHBOARD_ITEMS.map((d) => ({
                                key: d.title,
                                title: <Link to={d.path}>{d.title}</Link>,
                            })),
                        },
                    },
                    {
                        title: 'Edit Event',
                    },
                ]}
            />

            <Card title={`Edit Event: ${eventDetails?.name}`} extra={<Button onClick={() => navigate(-1)} icon={<ArrowLeftOutlined />}>Cancel</Button>}>
                <Form
                    form={form}
                    name="edit-event-form"
                    layout="vertical"
                    onFinish={onFinish}
                    onFinishFailed={onFinishFailed}
                    autoComplete="off"
                    requiredMark={false}
                >
                    <Row gutter={[16, 0]}>
                        <Col sm={24} lg={24}>
                            <Form.Item<any>
                                label="Event's Name"
                                name="name"
                                rules={[{ required: true, message: 'Please input your event name!' }]}
                            >
                                <Input placeholder='Tech Conference 2026' />
                            </Form.Item>
                        </Col>
                        <Col sm={24} lg={24}>
                            <Form.Item<any>
                                label="Event's Description"
                                name="description"
                                rules={[{ required: false }]}
                            >
                                <Input.TextArea rows={3} placeholder='A major event about technology and innovation (optional)' />
                            </Form.Item>
                        </Col>
                        <Col sm={24} lg={8}>
                            <Form.Item<any>
                                label="Event's Capacity"
                                name="maxParticipants"
                                rules={[{ required: false, message: 'Please input event capacity!' }]}
                            >
                                <InputNumber style={{ width: "100%" }} min={0} placeholder="Unlimited if empty" />
                            </Form.Item>
                        </Col>
                        <Col sm={24} lg={8}>
                            <Form.Item<any>
                                label="Start At"
                                name="startDate"
                                rules={[
                                    { required: true, message: 'Please input your start of event' },
                                ]}
                            >
                                <DatePicker style={{ width: "100%" }} showTime format="YYYY-MM-DD HH:mm:ss" />
                            </Form.Item>
                        </Col>
                        <Col sm={24} lg={8}>
                            <Form.Item<any>
                                label="End At"
                                name="endDate"
                                rules={[
                                    { required: true, message: 'Please input your end of event' },
                                ]}
                            >
                                <DatePicker style={{ width: "100%" }} showTime format="YYYY-MM-DD HH:mm:ss" />
                            </Form.Item>
                        </Col>
                        <Col sm={24} lg={12}>
                            <Form.Item<any>
                                label="Location"
                                name="location"
                                rules={[{ required: true, message: 'Please input event location!' }]}
                            >
                                <Input placeholder="Hall A, University Campus" />
                            </Form.Item>
                        </Col>
                        <Col sm={24} lg={12}>
                            <Form.Item<any>
                                label="Event Type"
                                name="categoryId"
                                rules={[
                                    { required: true, message: 'Please input your event type!' },
                                ]}
                            >
                                <Select
                                    options={[
                                        { value: '678a2141f8a1c0593de58562', label: 'IT' }, // Replace with actual categories from API later
                                        { value: '676b9128c0ea46752f9a5c89', label: 'Technology' },
                                    ]}
                                    placeholder="Select Event Type"
                                />
                            </Form.Item>
                        </Col>
                        <Col sm={24} lg={12}>
                            <Form.Item<any>
                                label="Banner URL (Optional)"
                                name="banner"
                                rules={[{ required: false }]}
                            >
                                <Input placeholder="https://example.com/banner.jpg" />
                            </Form.Item>
                        </Col>
                        <Col sm={24} lg={12}>
                            <Form.Item<any>
                                label="Video Intro URL (Optional)"
                                name="videoIntro"
                                rules={[{ required: false }]}
                            >
                                <Input placeholder="https://example.com/video.mp4" />
                            </Form.Item>
                        </Col>
                        <Col span={24} lg={12}>
                            <Form.Item<any>
                                label="Status"
                                name="status"
                                rules={[{ required: true, message: 'Please select event status!' }]}
                            >
                                <Select
                                    options={[
                                        { value: 'SCHEDULED', label: 'Scheduled' },
                                        { value: 'CANCELED', label: 'Canceled' },
                                        { value: 'FINISHED', label: 'Finished' },
                                    ]}
                                    placeholder="Select Event Status"
                                />
                            </Form.Item>
                        </Col>


                    </Row>

                    <Form.Item>
                        <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={loading}>
                            Save changes
                        </Button>
                    </Form.Item>
                </Form>
            </Card>
        </div>
    );
};

export default EditEventPage;

src\pages\errors\Error.tsx:
// src\pages\errors\Error.tsx
import { useRouteError } from 'react-router-dom';
import { Result, Typography } from 'antd';
import { BackBtn, RefreshBtn } from '../../components';

const { Paragraph, Text } = Typography;

type Error = unknown | any;

export const ErrorPage = () => {
  const error: Error = useRouteError();
  console.error(error);

  return (
    <Result
      status="error"
      title="Oops!"
      subTitle="Sorry, an unexpected error has occurred."
      extra={[<BackBtn key="back-btn" type="primary" />, <RefreshBtn key="refresh-btn" />]} // Added key props here
    >
      <div className="desc">
        <Paragraph>
          <Text
            strong
            style={{
              fontSize: 16,
            }}
          >
            The page you tried to open has the following error:
          </Text>
        </Paragraph>
        <Paragraph copyable>{error.statusText || error.message}</Paragraph>
      </div>
    </Result>
  );
};

src\pages\errors\Error400.tsx:
import { Result, Typography } from 'antd';
import { CloseCircleOutlined } from '@ant-design/icons';
import { red } from '@ant-design/colors';
import { BackBtn, RefreshBtn } from '../../components';

const { Paragraph, Text } = Typography;

export const Error400Page = () => {
  return (
    <Result
      status="error"
      title="400"
      subTitle="Bad request. The request could not be understood by the server due to malformed syntax. The client should not repeat the request without modifications"
      extra={[<BackBtn type="primary" />, <RefreshBtn />]}
    >
      <div className="desc">
        <Paragraph>
          <Text
            strong
            style={{
              fontSize: 16,
            }}
          >
            The content you submitted has the following error:
          </Text>
        </Paragraph>
        <Paragraph>
          <CloseCircleOutlined style={{ color: red[5] }} />
          &nbsp;Bad Request - Invalid URL &nbsp;<a>Forward error &gt;</a>
        </Paragraph>
        <Paragraph>
          <CloseCircleOutlined style={{ color: red[5] }} />
          &nbsp;Bad Request. Your browser sent a request that this server could
          not understand &nbsp;<a>Go to console &gt;</a>
        </Paragraph>
      </div>
    </Result>
  );
};


src\pages\errors\Error403.tsx:
import { Result } from 'antd';
import { BackBtn } from '../../components';

export const Error403Page = () => {
  return (
    <Result
      status="403"
      title="403"
      subTitle="Sorry, you are not authorized to access this page."
      extra={<BackBtn type="primary" />}
    />
  );
};


src\pages\errors\Error404.tsx:
import { Result } from 'antd';
import { BackBtn } from '../../components';

export const Error404Page = () => {
  return (
    <Result
      status="404"
      title="404"
      subTitle="Sorry, the page you visited does not exist."
      extra={<BackBtn type="primary" />}
    />
  );
};


src\pages\errors\Error500.tsx:
import { Result } from 'antd';
import { BackBtn, RefreshBtn } from '../../components';

export const Error500Page = () => {
  return (
    <Result
      status="500"
      title="500"
      subTitle="Sorry, something went wrong."
      extra={[<BackBtn type="primary" />, <RefreshBtn />]}
    />
  );
};


src\pages\errors\Error503.tsx:
import { Result } from 'antd';
import { BackBtn, RefreshBtn } from '../../components';

export const Error503Page = () => {
  return (
    <Result
      status="500"
      title="500"
      subTitle="Sorry, something went wrong."
      extra={[<BackBtn type="primary" />, <RefreshBtn />]}
    />
  );
};


src\pages\errors\index.ts:
export { ErrorPage } from './Error.tsx';
export { Error400Page } from './Error400.tsx';
export { Error403Page } from './Error403.tsx';
export { Error404Page } from './Error404.tsx';
export { Error500Page } from './Error500.tsx';
export { Error503Page } from './Error503.tsx';


src\pages\userAccount\Actions.tsx:
import { Card, Flex } from '../../components';
import { Button, Col, Divider, Row, Switch, Typography } from 'antd';
import { CSSProperties, ReactNode } from 'react';
import { QuestionCircleOutlined, SyncOutlined } from '@ant-design/icons';
import { useStylesContext } from '../../context';

const { Text } = Typography;

const dividerStyles: CSSProperties = {
  margin: `8px 0`,
};

type ActionItemProps = {
  title: ReactNode;
  extra?: ReactNode;
  children?: ReactNode;
};

const ActionItem = ({ children, extra, title }: ActionItemProps) => {
  return (
    <Flex flexDirection="column" gap="middle" alignItems="flex-start">
      <Text strong>{title}</Text>
      {children}
      {extra}
      <Divider style={dividerStyles} />
    </Flex>
  );
};

export const UserProfileActionsPage = () => {
  const context = useStylesContext();

  const onChange = (checked: boolean) => {
    console.log(`switch to ${checked}`);
  };

  return (
    <Row {...context?.rowProps}>
      <Col xs={24} lg={12} xl={8}>
        <Card title="Advanced" style={{ height: '100%' }}>
          <Flex flexDirection="column">
            <ActionItem
              title="Auto accept project invites"
              extra={
                <Text>
                  Automatically accept project invites from known collaborators.
                </Text>
              }
              children={<Switch defaultChecked onChange={onChange} />}
            />
            <ActionItem
              title="Experimental features"
              extra={
                <Button
                  icon={<QuestionCircleOutlined />}
                  type="link"
                  size="small"
                >
                  Learn more about experimental features
                </Button>
              }
              children={<Switch onChange={onChange} />}
            />
            <ActionItem
              title="Clear local data"
              children={
                <Button type="default" icon={<SyncOutlined />}>
                  Reload
                </Button>
              }
            />
          </Flex>
        </Card>
      </Col>
      <Col xs={24} lg={12} xl={8}>
        <Card title="Export content" style={{ height: '100%' }}>
          <Flex flexDirection="column">
            <ActionItem
              title="Export workspace content"
              extra={
                <Button
                  icon={<QuestionCircleOutlined />}
                  type="link"
                  size="small"
                >
                  Learn about exporting workspaces
                </Button>
              }
              children={<Button>Export all workspace content</Button>}
            />
            <ActionItem
              title="Export members"
              extra={
                <Button
                  icon={<QuestionCircleOutlined />}
                  type="link"
                  size="small"
                >
                  Learn about exporting members
                </Button>
              }
              children={<Button>Export members as CSV</Button>}
            />
          </Flex>
        </Card>
      </Col>
      <Col xs={24} lg={12} xl={8}>
        <Card title="Danger zone" style={{ height: '100%' }}>
          <ActionItem
            title="Delete account"
            extra={
              <Button
                icon={<QuestionCircleOutlined />}
                type="link"
                size="small"
              >
                Learn about deleting account
              </Button>
            }
            children={<Button danger>Delete account</Button>}
          />
        </Card>
      </Col>
    </Row>
  );
};


src\pages\userAccount\Activity.tsx:
import { TimelineCard } from '../../components';
import { useFetchData } from '../../hooks';

export const UserProfileActivityPage = () => {
  const {
    data: timelineData,
    loading: timelineDataLoading,
    error: timelineDataError,
  } = useFetchData('../mocks/TimelineActivity.json');

  return (
    <TimelineCard
      title="Recent activity"
      data={timelineData}
      loading={timelineDataLoading}
      error={timelineDataError}
    />
  );
};


src\pages\userAccount\Details.tsx:
import { Button, Col, Form, Input, Radio, Row, Select, Typography } from 'antd';
import { Card } from '../../components';
import { SaveOutlined } from '@ant-design/icons';

type FieldType = {
  username?: string;
  password?: string;
  remember?: string;
  firstName?: string;
  middleName?: string;
  lastName?: string;
  company?: string;
  email?: string;
  subscription?: 'free' | 'pro' | 'enterprise' | 'custom';
  id?: string;
  status?: 'active' | 'inactive';
};

export const UserProfileDetailsPage = () => {
  const onFinish = (values: any) => {
    console.log('Success:', values);
  };

  const onFinishFailed = (errorInfo: any) => {
    console.log('Failed:', errorInfo);
  };

  return (
    <Card>
      <Form
        name="user-profile-details-form"
        layout="vertical"
        initialValues={{
          id: '474e2cd2-fc79-49b8-98fe-dab443facede',
          username: 'kelvink96',
          firstName: 'Kelvin',
          middleName: 'Kiptum',
          lastName: 'Kiprop',
          company: 'Design Sparx',
          email: 'kelvin.kiprop96@gmail.com',
          subscription: 'pro',
          status: 'active',
        }}
        onFinish={onFinish}
        onFinishFailed={onFinishFailed}
        autoComplete="on"
        requiredMark={false}
      >
        <Row gutter={[16, 0]}>
          <Col sm={24} lg={24}>
            <Form.Item<FieldType>
              label="User ID"
              name="id"
              rules={[{ required: true, message: 'Please input your id!' }]}
            >
              <Input
                readOnly={true}
                suffix={
                  <Typography.Paragraph
                    copyable={{ text: '474e2cd2-fc79-49b8-98fe-dab443facede' }}
                    style={{ margin: 0 }}
                  ></Typography.Paragraph>
                }
              />
            </Form.Item>
          </Col>
          <Col sm={24} lg={8}>
            <Form.Item<FieldType>
              label="First name"
              name="firstName"
              rules={[
                { required: true, message: 'Please input your first name!' },
              ]}
            >
              <Input />
            </Form.Item>
          </Col>
          <Col sm={24} lg={8}>
            <Form.Item<FieldType>
              label="Middle name"
              name="middleName"
              rules={[
                { required: true, message: 'Please input your middle name!' },
              ]}
            >
              <Input />
            </Form.Item>
          </Col>
          <Col sm={24} lg={8}>
            <Form.Item<FieldType>
              label="Last name"
              name="lastName"
              rules={[
                { required: true, message: 'Please input your last name!' },
              ]}
            >
              <Input />
            </Form.Item>
          </Col>
          <Col sm={24} lg={12}>
            <Form.Item<FieldType>
              label="Email"
              name="email"
              rules={[{ required: true, message: 'Please input your email!' }]}
            >
              <Input />
            </Form.Item>
          </Col>
          <Col sm={24} lg={12}>
            <Form.Item<FieldType>
              label="Username"
              name="username"
              rules={[
                { required: true, message: 'Please input your username!' },
              ]}
            >
              <Input />
            </Form.Item>
          </Col>
          <Col sm={24} lg={12}>
            <Form.Item<FieldType>
              label="Company"
              name="company"
              rules={[
                { required: true, message: 'Please input your company!' },
              ]}
            >
              <Input />
            </Form.Item>
          </Col>
          <Col sm={24} lg={12}>
            <Form.Item<FieldType>
              label="Subscription"
              name="subscription"
              rules={[
                { required: true, message: 'Please select your subscription!' },
              ]}
            >
              <Select
                options={[
                  { value: 'free', label: 'Free' },
                  { value: 'pro', label: 'Pro' },
                  { value: 'enterprise', label: 'Enterprise' },
                  { value: 'custom', label: 'Custom', disabled: true },
                ]}
              />
            </Form.Item>
          </Col>
          <Col span={24}>
            <Form.Item<FieldType>
              label="Status"
              name="status"
              rules={[
                { required: true, message: 'Please select your status!' },
              ]}
            >
              <Radio.Group>
                <Radio value="active">Active</Radio>
                <Radio value="inactive">Inactive</Radio>
              </Radio.Group>
            </Form.Item>
          </Col>
        </Row>

        <Form.Item>
          <Button type="primary" htmlType="submit" icon={<SaveOutlined />}>
            Save changes
          </Button>
        </Form.Item>
      </Form>
    </Card>
  );
};


src\pages\userAccount\Feedback.tsx:
import { Button, Col, Flex, Form, Input, Rate, Row, Typography } from 'antd';
import { SendOutlined } from '@ant-design/icons';
import { Card } from '../../components';
import { useState } from 'react';

const { Text } = Typography;

const RATING_DESC = ['terrible', 'bad', 'average', 'very good', 'wonderful'];

type FieldType = {
  rating?: number;
  comment?: string;
};

export const UserProfileFeedbackPage = () => {
  const [value, setValue] = useState(3);

  const onFinish = (values: any) => {
    console.log('Success:', values);
  };

  const onFinishFailed = (errorInfo: any) => {
    console.log('Failed:', errorInfo);
  };

  return (
    <div>
      <Card title="Feedback form" style={{ width: '50%' }}>
        <Flex vertical gap="middle">
          <Text>
            Your input is valuable in helping us better understand your needs
            and tailor our service accordingly
          </Text>
          <Form
            name="user-profile-address-form"
            layout="vertical"
            initialValues={{
              rating: 0,
              comment: '',
            }}
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}
            autoComplete="on"
            requiredMark={false}
          >
            <Row gutter={[16, 0]}>
              <Col span={24}>
                <Form.Item<FieldType>
                  label=""
                  name="rating"
                  rules={[
                    { required: true, message: 'Please enter your ratings!' },
                  ]}
                >
                  <Flex>
                    <Rate
                      tooltips={RATING_DESC}
                      onChange={setValue}
                      value={value}
                      allowClear
                      allowHalf
                    />
                    {value ? (
                      <span className="ant-rate-text">
                        {RATING_DESC[Math.round(value) - 1]}
                      </span>
                    ) : (
                      ''
                    )}
                  </Flex>
                </Form.Item>
              </Col>
              <Col span={24}>
                <Form.Item<FieldType>
                  label="Comment"
                  name="comment"
                  rules={[
                    { required: true, message: 'Please enter your comment!' },
                  ]}
                >
                  <Input.TextArea />
                </Form.Item>
              </Col>
            </Row>

            <Form.Item>
              <Button type="primary" htmlType="submit" icon={<SendOutlined />}>
                Submit now
              </Button>
            </Form.Item>
          </Form>
        </Flex>
      </Card>
    </div>
  );
};


src\pages\userAccount\Help.tsx:
import { Alert, Button, Flex, Input, TabsProps, Typography } from 'antd';
import { Card, FaqCollapse, Loader } from '../../components';
import {
  DollarOutlined,
  PullRequestOutlined,
  RocketOutlined,
  SettingOutlined,
  UnorderedListOutlined,
} from '@ant-design/icons';
import { createElement, useEffect, useState } from 'react';
import * as _ from 'lodash';
import FaqsData from '../../../public/mocks/Faqs.json';
import { TitleProps } from 'antd/es/typography/Title';
import { useMediaQuery } from 'react-responsive';
import { useFetchData } from '../../hooks';

const { Text, Title } = Typography;

const TOPICS = [
  {
    title: 'get started',
    image: RocketOutlined,
  },
  {
    title: 'features',
    image: UnorderedListOutlined,
  },
  {
    title: 'billing',
    image: DollarOutlined,
  },
  {
    title: 'troubleshooting',
    image: SettingOutlined,
  },
  {
    title: 'integrations',
    image: PullRequestOutlined,
  },
];

const OTHER_TOPICS = [
  {
    title: 'Getting started guide',
    description:
      "Not sure where to start? Get going with our easy-to-follow beginner's guide to Antd Dashboard.",
    action: 'Get started',
  },
  {
    title: "What's new",
    description:
      'All the upgrades and improvements that‘ll better help you organize it all.',
    action: "See what's new",
  },
  {
    title: 'Known issues',
    description:
      'The bugs with fixes in the works. Check here before shooting us a message.',
    action: 'Consult the list',
  },
];

const TITLE_PROPS: TitleProps = {
  style: {
    marginBottom: 0,
    textAlign: 'center',
  },
  level: 3,
};

export const UserProfileHelpPage = () => {
  const [activeTabKey, setActiveTabKey] = useState<string>('Account');
  const [tabList, setTabList] = useState<TabsProps['items']>([]);
  const isMobile = useMediaQuery({ maxWidth: 600 });
  const {
    data: faqsData,
    loading: faqsDataLoading,
    error: faqsDataError,
  } = useFetchData('../mocks/Faqs.json');

  const onTabChange = (key: string) => {
    setActiveTabKey(key);
  };

  useEffect(() => {
    const tabs = _.chain(FaqsData)
      .orderBy('category')
      .uniqBy('category')
      .map((d) => ({
        key: d.category,
        label: d.category,
      }))
      .value();

    console.log(tabs);
    setTabList(tabs);
  }, []);

  return (
    <div>
      <Flex vertical gap="large">
        <Flex vertical gap="middle">
          <Title {...TITLE_PROPS}>How can we help?</Title>
          <Input.Search placeholder="search articles..." />
        </Flex>
        <Flex gap="middle" wrap={isMobile ? 'wrap' : 'nowrap'}>
          {TOPICS.map((t) => (
            <Card
              hoverable
              style={{
                width: isMobile ? '100%' : '25%',
                textAlign: 'center',
              }}
            >
              <Flex vertical gap="middle">
                {createElement(t.image, {
                  style: { fontSize: '1.5rem', margin: 'auto' },
                })}
                <Text style={{ textTransform: 'capitalize' }}>{t.title}</Text>
              </Flex>
            </Card>
          ))}
        </Flex>
        <Flex gap="middle" wrap={isMobile ? 'wrap' : 'nowrap'}>
          {OTHER_TOPICS.map((t) => (
            <Card
              key={t.title}
              title={t.title}
              actions={[<Button>{t.action}</Button>]}
            >
              <Text>{t.description}</Text>
            </Card>
          ))}
        </Flex>
        <Title {...TITLE_PROPS}>Frequently asked questions</Title>
        <Text>
          Our website has a list of questions and answers that aim to provide
          clarity on a particular subject. If you need assistance, feel free to
          check out our FAQs.
        </Text>
        <Card
          tabList={tabList}
          activeTabKey={activeTabKey}
          tabBarExtraContent={<Button type="link">Go to FAQs</Button>}
          onTabChange={onTabChange}
          tabProps={{
            size: 'middle',
          }}
        >
          {faqsDataError ? (
            <Alert
              message="Error"
              description={faqsDataError.toString()}
              type="error"
              showIcon
            />
          ) : faqsDataLoading ? (
            <Loader />
          ) : (
            <FaqCollapse
              bordered
              items={_.chain(faqsData)
                .filter((d) => d.category === activeTabKey)
                .slice(0, 5)
                .map((i) => ({
                  label: `${i.question.slice(0, 50)}`,
                  children: i.answer,
                }))
                .value()}
            />
          )}
        </Card>
      </Flex>
    </div>
  );
};


src\pages\userAccount\index.ts:
export { UserProfileDetailsPage } from './Details.tsx';
export { UserProfilePreferencesPage } from './Preferences.tsx';
export { UserProfileInformationPage } from './Information.tsx';
export { UserProfileSecurityPage } from './Security.tsx';
export { UserProfileActivityPage } from './Activity.tsx';
export { UserProfileActionsPage } from './Actions.tsx';
export { UserProfileHelpPage } from './Help.tsx';
export { UserProfileFeedbackPage } from './Feedback.tsx';


src\pages\userAccount\Information.tsx:
import {
  Button,
  Checkbox,
  Col,
  DatePicker,
  Flex,
  Form,
  Input,
  Row,
  Select,
} from 'antd';
import { Card } from '../../components';
import {
  MinusCircleOutlined,
  PlusOutlined,
  SaveOutlined,
} from '@ant-design/icons';
import { useStylesContext } from '../../context';
import * as dayjs from 'dayjs';

const SOCIALS = [
  'Facebook',
  'Instagram',
  'Twitter',
  'LinkedIn',
  'Mastodon',
  'Threads',
  'YouTube',
  'WhatsApp',
  'Tiktok',
  'Telegram',
  'QQ',
  'WeChat',
];

type FieldType = {
  country?: string;
  addressLine1?: string;
  addressLine2?: string;
  city?: string;
  postalCode?: string;
  preferred?: boolean;
};

type BirthdayFieldType = {
  dob?: string;
};

export const UserProfileInformationPage = () => {
  const context = useStylesContext();
  const onFinish = (values: any) => {
    console.log('Success:', values);
  };

  const onFinishFailed = (errorInfo: any) => {
    console.log('Failed:', errorInfo);
  };

  return (
    <Row {...context?.rowProps}>
      <Col span={24}>
        <Card title="Address book">
          <Form
            name="user-profile-address-form"
            layout="vertical"
            initialValues={{
              country: 'Kenya',
              addressLine1: '828, 18282 ABC Drive, XYZ Rd',
              city: 'Nairobi',
              postalCode: '00100',
              preferred: true,
            }}
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}
            autoComplete="on"
            requiredMark={false}
          >
            <Row gutter={[16, 0]}>
              <Col sm={24} lg={12}>
                <Form.Item<FieldType>
                  label="Country"
                  name="country"
                  rules={[
                    {
                      required: true,
                      message: 'Please select your country or region!',
                    },
                  ]}
                >
                  <Select options={[]} />
                </Form.Item>
              </Col>
              <Col sm={24} lg={12}>
                <Form.Item<FieldType>
                  label="City"
                  name="city"
                  rules={[
                    { required: true, message: 'Please enter your city!' },
                  ]}
                >
                  <Input />
                </Form.Item>
              </Col>
              <Col sm={24} lg={12}>
                <Form.Item<FieldType>
                  label="Address line 1"
                  name="addressLine1"
                  rules={[
                    {
                      required: true,
                      message: 'Please enter your address line!',
                    },
                  ]}
                >
                  <Input.TextArea />
                </Form.Item>
              </Col>
              <Col sm={24} lg={12}>
                <Form.Item<FieldType>
                  label="Address line 2"
                  name="addressLine2"
                  rules={[
                    {
                      required: false,
                      message: 'Please enter your address line!',
                    },
                  ]}
                >
                  <Input.TextArea />
                </Form.Item>
              </Col>
              <Col sm={24} lg={12}>
                <Form.Item<FieldType>
                  label="Postal code"
                  name="postalCode"
                  rules={[
                    {
                      required: true,
                      message: 'Please enter your postal code!',
                    },
                  ]}
                >
                  <Input />
                </Form.Item>
              </Col>
              <Col sm={24} lg={24}>
                <Form.Item<FieldType> name="preferred">
                  <Checkbox>
                    Set as a preferred billing and shipping address
                  </Checkbox>
                </Form.Item>
              </Col>
            </Row>

            <Form.Item>
              <Button type="primary" htmlType="submit" icon={<SaveOutlined />}>
                Save changes
              </Button>
            </Form.Item>
          </Form>
        </Card>
      </Col>
      <Col sm={24} lg={16}>
        <Card title="Social links">
          <Form
            name="user-profile-social-form"
            onFinish={onFinish}
            autoComplete="off"
          >
            <Form.List name="social-links">
              {(fields, { add, remove }) => (
                <>
                  {fields.map(({ key, name, ...restField }) => (
                    <Flex
                      key={key}
                      align="baseline"
                      gap="small"
                      style={{ marginBottom: 8 }}
                    >
                      <Form.Item
                        {...restField}
                        name={[name, 'social']}
                        rules={[{ required: true, message: 'Missing social' }]}
                        style={{ width: 200 }}
                      >
                        <Select
                          placeholder="social"
                          options={SOCIALS.map((s) => ({ value: s, label: s }))}
                        />
                      </Form.Item>
                      <Form.Item
                        {...restField}
                        name={[name, 'username']}
                        rules={[
                          { required: true, message: 'Missing username' },
                        ]}
                      >
                        <Input placeholder="username" />
                      </Form.Item>
                      <Button
                        type="text"
                        icon={<MinusCircleOutlined />}
                        onClick={() => remove(name)}
                      ></Button>
                    </Flex>
                  ))}
                  <Form.Item>
                    <Button
                      type="default"
                      onClick={() => add()}
                      block
                      icon={<PlusOutlined />}
                    >
                      Add link
                    </Button>
                  </Form.Item>
                </>
              )}
            </Form.List>
            <Form.Item>
              <Button type="primary" htmlType="submit" icon={<SaveOutlined />}>
                Save changes
              </Button>
            </Form.Item>
          </Form>
        </Card>
      </Col>
      <Col sm={24} lg={8}>
        <Card title="Birthday">
          <Form
            name="user-profile-birhday-form"
            layout="vertical"
            initialValues={{
              dob: dayjs('1996/04/27'),
            }}
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}
            autoComplete="on"
            requiredMark={false}
          >
            <Form.Item<BirthdayFieldType>
              label="Birth date"
              name="dob"
              rules={[
                { required: true, message: 'Please select your birthday!' },
              ]}
            >
              <DatePicker />
            </Form.Item>

            <Form.Item>
              <Button type="primary" htmlType="submit" icon={<SaveOutlined />}>
                Save changes
              </Button>
            </Form.Item>
          </Form>
        </Card>
      </Col>
    </Row>
  );
};


src\pages\userAccount\Preferences.tsx:
import {
  Button,
  ButtonProps,
  Card as AntdCard,
  Col,
  Flex,
  Row,
  Switch,
  Typography,
} from 'antd';
import { Card } from '../../components';
import { useStylesContext } from '../../context';
import { useMediaQuery } from 'react-responsive';

const { Text } = Typography;

const BUTTON_PROPS: ButtonProps = {
  type: 'dashed',
};

export const UserProfilePreferencesPage = () => {
  const context = useStylesContext();
  const isMobile = useMediaQuery({ maxWidth: 600 });

  const notificationsOnChange = (checked: boolean) => {
    console.log(`switch to ${checked}`);
  };

  return (
    <Flex vertical gap="middle">
      <Card title="language info">
        <Flex vertical gap="small">
          <Flex
            vertical={isMobile}
            align={isMobile ? 'flex-start' : 'center'}
            gap={4}
          >
            <Text style={{ width: 200 }}>Display Language</Text>
            <Button {...BUTTON_PROPS}>English (Unites States)</Button>
          </Flex>
          <Flex
            vertical={isMobile}
            align={isMobile ? 'flex-start' : 'center'}
            gap={4}
          >
            <Text style={{ width: 200 }}>Preferred Language</Text>
            <Button {...BUTTON_PROPS}>--Add your preferred language--</Button>
          </Flex>
          <Flex
            vertical={isMobile}
            align={isMobile ? 'flex-start' : 'center'}
            gap={4}
          >
            <Text style={{ width: 200 }}>Regional Format</Text>
            <Button {...BUTTON_PROPS}>
              English (Kenya) - {new Date().toLocaleDateString()} :{' '}
              {new Date().toLocaleTimeString()}
            </Button>
          </Flex>
        </Flex>
      </Card>
      <Card title="manage notifications">
        <Row {...context?.rowProps}>
          <Col sm={24} lg={12}>
            <AntdCard title="activities" style={{ marginBottom: '1rem' }}>
              <Flex vertical gap="middle">
                <Flex align="center" justify="space-between">
                  <Text>Someone comments on my content</Text>
                  <Switch
                    defaultChecked={false}
                    onChange={notificationsOnChange}
                  />
                </Flex>
                <Flex align="center" justify="space-between">
                  <Text>Someone mentions my profile</Text>
                  <Switch defaultChecked onChange={notificationsOnChange} />
                </Flex>
                <Flex align="center" justify="space-between">
                  <Text>I received a like on my content</Text>
                  <Switch onChange={notificationsOnChange} />
                </Flex>
                <Flex align="center" justify="space-between">
                  <Text>Anyone follows me</Text>
                  <Switch
                    defaultChecked={false}
                    onChange={notificationsOnChange}
                  />
                </Flex>
                <Flex align="center" justify="space-between">
                  <Text>I received a message</Text>
                  <Switch defaultChecked onChange={notificationsOnChange} />
                </Flex>
              </Flex>
            </AntdCard>
          </Col>
          <Col sm={24} lg={12}>
            <AntdCard title="newsletters">
              <Flex vertical gap="middle">
                <Flex align="center" justify="space-between">
                  <Flex vertical align="flex-start" gap={4}>
                    <Text>General newsletter</Text>
                    <Text type="secondary">
                      News, announcements & product updates
                    </Text>
                  </Flex>
                  <Switch
                    defaultChecked={false}
                    onChange={notificationsOnChange}
                  />
                </Flex>
                <Flex align="center" justify="space-between">
                  <Flex vertical align="flex-start" gap={4}>
                    <Text>Weekly activity report</Text>
                    <Text type="secondary">
                      Weekly digest of top content & media
                    </Text>
                  </Flex>
                  <Switch defaultChecked onChange={notificationsOnChange} />
                </Flex>
                <Flex align="center" justify="space-between">
                  <Flex vertical align="flex-start" gap={4}>
                    <Text>Weekly jobs</Text>
                    <Text type="secondary">
                      Weekly board of the newest jobs
                    </Text>
                  </Flex>
                  <Switch onChange={notificationsOnChange} />
                </Flex>
                <Flex align="center" justify="space-between">
                  <Flex vertical align="flex-start" gap={4}>
                    <Text>Monthly webinars</Text>
                    <Text type="secondary">
                      Schedule of upcoming webinars & archive
                    </Text>
                  </Flex>
                  <Switch onChange={notificationsOnChange} />
                </Flex>
                <Flex align="center" justify="space-between">
                  <Flex vertical align="flex-start" gap={4}>
                    <Text>Weekly blog posts</Text>
                    <Text type="secondary">
                      Weekly feed of the most popular blog posts
                    </Text>
                  </Flex>
                  <Switch defaultChecked onChange={notificationsOnChange} />
                </Flex>
              </Flex>
            </AntdCard>
          </Col>
        </Row>
      </Card>
    </Flex>
  );
};


src\pages\userAccount\Security.tsx:
import {
  Alert,
  Badge,
  Button,
  Col,
  Collapse,
  Descriptions,
  Form,
  Input,
  Row,
  Typography,
} from 'antd';
import { useStylesContext } from '../../context';
import { Card, Flex, Loader } from '../../components';
import { Session } from '../../types';
import {
  LaptopOutlined,
  MobileOutlined,
  SaveOutlined,
  TabletOutlined,
} from '@ant-design/icons';
import { useFetchData } from '../../hooks';

const { Text } = Typography;

const onFinish = (values: any) => {
  console.log('Success:', values);
};

const onFinishFailed = (errorInfo: any) => {
  console.log('Failed:', errorInfo);
};

type FieldType = {
  currentPassword?: string;
  newPassword?: string;
  reEnterPassword?: string;
};

export const UserProfileSecurityPage = () => {
  const stylesContext = useStylesContext();
  const {
    data: sessionActivityData,
    loading: sessionActivityDataLoading,
    error: sessionActivityDataError,
  } = useFetchData('../mocks/SessionActivity.json');

  return (
    <Row {...stylesContext?.rowProps}>
      <Col span={24}>
        <Row {...stylesContext?.rowProps}>
          <Col xs={24} sm={12}>
            <Card
              title="Additional security"
              extra={<Button type="default">Learn more</Button>}
              actions={[<Button>Turn on</Button>]}
              style={{ height: '100%' }}
            >
              <Flex flexDirection="column">
                <Text>Passwordless account</Text>
                <Badge status="error" text="OFF" />
              </Flex>
            </Card>
          </Col>
          <Col xs={24} sm={12}>
            <Card
              title="Additional security"
              extra={<Button type="default">Learn more</Button>}
              actions={[<Button>Turn off</Button>]}
              style={{ height: '100%' }}
            >
              <Flex flexDirection="column">
                <Text>Two-step verification</Text>
                <Badge status="success" text="ON" />
              </Flex>
            </Card>
          </Col>
          <Col xs={24} sm={12}>
            <Card
              title="Sign me out"
              actions={[<Button>Sign me out</Button>]}
              style={{ height: '100%' }}
            >
              <Flex flexDirection="column">
                <Text>
                  We can protect you by signing you out of browsers, apps and
                  anywhere else your account is used to sign in.
                </Text>
              </Flex>
            </Card>
          </Col>
          <Col xs={24} sm={12}>
            <Card
              title="Recovery code"
              actions={[<Button>Generate a new code</Button>]}
              style={{ height: '100%' }}
            >
              <Flex flexDirection="column">
                <Text>
                  You can use this code to access your account if you lose
                  access to your sign-in info. Print this out and keep it in a
                  safe place or take a picture of it.
                </Text>
              </Flex>
            </Card>
          </Col>
        </Row>
      </Col>
      <Col span={24}>
        <Card title="Change your password">
          <Form
            name="form-change-password"
            layout="vertical"
            labelCol={{ span: 8 }}
            initialValues={{ remember: true }}
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}
            autoComplete="off"
            requiredMark={false}
          >
            <Form.Item<FieldType>
              label="Current password"
              name="currentPassword"
              rules={[
                {
                  required: true,
                  message: 'Please input your current password!',
                },
              ]}
            >
              <Input.Password />
            </Form.Item>

            <Form.Item<FieldType>
              label="New password"
              name="newPassword"
              rules={[
                { required: true, message: 'Please input your new password!' },
              ]}
            >
              <Input.Password />
            </Form.Item>

            <Form.Item<FieldType>
              label="Reenter password"
              name="reEnterPassword"
              rules={[
                {
                  required: true,
                  message: 'Please re-input your new password!!',
                },
              ]}
            >
              <Input.Password />
            </Form.Item>

            <Form.Item>
              <Button type="primary" htmlType="submit" icon={<SaveOutlined />}>
                Save changes
              </Button>
            </Form.Item>
          </Form>
        </Card>
      </Col>
      <Col span={24}>
        <Card
          title="Recent activity"
          extra={<Button>View all activity</Button>}
        >
          {sessionActivityDataError ? (
            <Alert
              message="Error"
              description={sessionActivityDataError.toString()}
              type="error"
              showIcon
            />
          ) : sessionActivityDataLoading ? (
            <Loader />
          ) : (
            <Collapse
              bordered
              expandIconPosition="start"
              items={sessionActivityData.slice(0, 5).map((s: Session) => ({
                key: s.id,
                label: (
                  <Flex>
                    <span>{s.login_time}</span>
                  </Flex>
                ),
                children: (
                  <Descriptions
                    bordered
                    column={{ xs: 1, sm: 2, md: 2, lg: 3, xl: 3, xxl: 4 }}
                    items={[
                      {
                        key: 'session_device',
                        label: 'Device',
                        children: s.device_type,
                      },
                      {
                        key: 'session_browser',
                        label: 'Browser',
                        children: s.browser,
                      },
                      {
                        key: 'session_ip',
                        label: 'IP address',
                        children: s.ip_address,
                      },
                      {
                        key: 'session_status',
                        label: 'Status',
                        children: <Badge status="processing" text={s.status} />,
                      },
                      {
                        key: 'session_location',
                        label: 'Location',
                        children: s.login_location,
                      },
                      {
                        key: 'session_duration',
                        label: 'Session duration (mins)',
                        children: s.login_duration,
                      },
                      {
                        key: 'session_login_attempts',
                        label: 'Login attempts',
                        children: s.login_attempts,
                      },
                    ]}
                  />
                ),
                extra:
                  s.device_type === 'desktop' ? (
                    <LaptopOutlined />
                  ) : s.device_type === 'tablet' ? (
                    <TabletOutlined />
                  ) : (
                    <MobileOutlined />
                  ),
              }))}
            />
          )}
        </Card>
      </Col>
    </Row>
  );
};


src\redux\eventDetailsSlice.tsx:
// src\redux\eventDetailsSlice.tsx
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Events } from '../types'; // Import your Events type

interface EventDetailsState {
    eventDetails: Events | null;
    loading: boolean;
    error: string | null;
}

const initialState: EventDetailsState = {
    eventDetails: null,
    loading: false,
    error: null,
};

const eventDetailsSlice = createSlice({
    name: 'eventDetails',
    initialState,
    reducers: {
        setEventDetails: (state, action: PayloadAction<Events>) => {
            state.eventDetails = action.payload;
            state.loading = false;
            state.error = null;
        },
        fetchEventDetailsStart: (state) => {
            state.loading = true;
            state.error = null;
        },
        fetchEventDetailsFailure: (state, action: PayloadAction<string>) => {
            state.loading = false;
            state.error = action.payload;
            state.eventDetails = null;
        },
        clearEventDetails: (state) => {
            state.eventDetails = null;
            state.loading = false;
            state.error = null;
        },
    },
});

export const {
    setEventDetails,
    fetchEventDetailsStart,
    fetchEventDetailsFailure,
    clearEventDetails,
} = eventDetailsSlice.actions;

export default eventDetailsSlice.reducer;

src\redux\store.ts:
// src/redux/store.ts
import { configureStore } from '@reduxjs/toolkit';
import themeReducer from './theme/themeSlice';
import { persistStore, persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage';
import userReducer from './userSlice';
import eventDetailsReducer from './eventDetailsSlice'; // Import eventDetailsReducer

const persistConfig = {
  key: 'root',
  storage,
  blacklist: ['user', 'eventDetails'], // Blacklist eventDetails too if needed
};

const persistedThemeReducer = persistReducer(persistConfig, themeReducer);

export const store = configureStore({
  reducer: {
    theme: persistedThemeReducer,
    user: userReducer,
    eventDetails: eventDetailsReducer, // Add eventDetailsReducer here
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: false,
    }),
});

export const persistor = persistStore(store);
export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

src\redux\userSlice.tsx:
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface UserState {
    id: string | null;
    email: string | null;
    name: string | null;
    avatar: string | null;
}

const initialState: UserState = {
    id: null,
    email: null,
    name: null,
    avatar: null,
};

const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {
        setUser: (state, action: PayloadAction<UserState>) => {
            state.id = action.payload.id;
            state.email = action.payload.email;
            state.name = action.payload.name;
            state.avatar = action.payload.avatar;
        },
        clearUser: (state) => {
            state.id = null;
            state.email = null;
            state.name = null;
            state.avatar = null;
        },
    },
});

export const { setUser, clearUser } = userSlice.actions;
export default userSlice.reducer;

src\redux\theme\themeSlice.ts:
import { createSlice } from '@reduxjs/toolkit';

export interface ThemeState {
  mytheme: string;
}

const initialState: ThemeState = {
  mytheme: 'light',
};

const themeSlice = createSlice({
  name: 'mytheme',
  initialState,
  reducers: {
    toggleTheme: (state: ThemeState) => {
      state.mytheme = state.mytheme === 'light' ? 'dark' : 'light';
    },
  },
});

export const { toggleTheme } = themeSlice.actions;

export default themeSlice.reducer;


src\routes\routes.tsx:
import { createBrowserRouter, useLocation } from 'react-router-dom';
import {
  AccountDeactivePage,
  BiddingDashboardPage,
  CorporateAboutPage,
  CorporateContactPage,
  CorporateFaqPage,
  CorporateLicensePage,
  CorporatePricingPage,
  CorporateTeamPage,
  DefaultDashboardPage,
  EcommerceDashboardPage,
  Error400Page,
  Error403Page,
  Error404Page,
  Error500Page,
  Error503Page,
  ErrorPage,
  MarketingDashboardPage,
  PasswordResetPage,
  ProjectsDashboardPage,
  SignInPage,
  SignUpPage,
  SitemapPage,
  SocialDashboardPage,
  UserProfileActionsPage,
  UserProfileActivityPage,
  UserProfileDetailsPage,
  UserProfileFeedbackPage,
  UserProfileHelpPage,
  UserProfileInformationPage,
  UserProfilePreferencesPage,
  UserProfileSecurityPage,
  VerifyEmailPage,
  WelcomePage,
  LearningDashboardPage,
  LogisticsDashboardPage,
  CreateEventPage,
  DetailEventPage,
  MyEventDashboardPage,
  DetailMyEventPage,
  UserDashboardPage
} from '../pages';
import {
  CorporateLayout,
  DashboardLayout,
  EventDetailLayout,
  // GuestLayout,
  UserAccountLayout,
} from '../layouts';
import React, { ReactNode, useEffect } from 'react';
import { AboutPage } from '../pages/About.tsx';
import EventsDashboardPage from '../pages/dashboards/Events.tsx';
import EventsListPage from '../pages/dashboards/EventsList.tsx';
import EventDetailsPage from '../pages/details/EventDetailsPage.tsx';
import EditEventPage from '../pages/edit/EditEventPage.tsx';
import ParticipatedEventsPage from '../pages/dashboards/ParticipatedEvents.tsx';

// Custom scroll restoration function
export const ScrollToTop: React.FC = () => {
  const { pathname } = useLocation();

  useEffect(() => {
    window.scrollTo({
      top: 0,
      left: 0,
      behavior: 'smooth',
    }); // Scroll to the top when the location changes
  }, [pathname]);

  return null; // This component doesn't render anything
};

type PageProps = {
  children: ReactNode;
};

// Create an HOC to wrap your route components with ScrollToTop
const PageWrapper = ({ children }: PageProps) => {
  return (
    <>
      <ScrollToTop />
      {children}
    </>
  );
};

// Create the router
const router = createBrowserRouter([
  {
    path: '/',
    // element: <PageWrapper children={<GuestLayout />} />,
    errorElement: <ErrorPage />,
    children: [
      {
        index: true,
        path: '',
        element: <SignInPage />,
      },
    ],
  },
  {
    path: '/create',
    element: <PageWrapper children={<DashboardLayout />} />,
    errorElement: <ErrorPage />,
    children: [
      {
        index: true,
        path: 'events',
        element: <CreateEventPage />,
      },
    ],
  },
  {
    path: '/details',
    element: <PageWrapper children={<EventDetailLayout />} />,
    errorElement: <ErrorPage />,
    children: [
      {
        index: true,
        path: 'events/:id',
        element: <EventDetailsPage />,
      },
      {
        path: 'my-events/:id',
        element: <DetailMyEventPage />,
      },
    ],
  },
  {
    path: '/dashboards',
    element: <PageWrapper children={<DashboardLayout />} />,
    errorElement: <ErrorPage />,
    children: [
      {
        path: 'participated-events',  // Add route for participated events page
        element: <ParticipatedEventsPage />,
      },
      {
        index: true,
        path: 'default',
        element: <DefaultDashboardPage />,
      },
      {
        path: 'projects',
        element: <ProjectsDashboardPage />,
      },
      {
        path: 'events',
        element: <EventsDashboardPage />,
      },
      {
        path: 'ecommerce',
        element: <EcommerceDashboardPage />,
      },
      {
        path: 'marketing',
        element: <MarketingDashboardPage />,
      },
      {
        path: 'social',
        element: <SocialDashboardPage />,
      },
      {
        path: 'my-events',
        element: <MyEventDashboardPage />,
      },
      {
        path: 'users',
        element: <UserDashboardPage />,
      },
      {
        path: 'events-list',
        element: <EventsListPage />,
      },
    ],
  },
  {
    path: '/sitemap',
    element: <PageWrapper children={<DashboardLayout />} />,
    errorElement: <ErrorPage />,
    children: [
      {
        index: true,
        path: '',
        element: <SitemapPage />,
      },
    ],
  },
  {
    path: '/corporate',
    element: <PageWrapper children={<CorporateLayout />} />,
    errorElement: <ErrorPage />,
    children: [
      {
        index: true,
        path: 'about',
        element: <CorporateAboutPage />,
      },
      {
        path: 'team',
        element: <CorporateTeamPage />,
      },
      {
        path: 'faqs',
        element: <CorporateFaqPage />,
      },
      {
        path: 'contact',
        element: <CorporateContactPage />,
      },
      {
        path: 'pricing',
        element: <CorporatePricingPage />,
      },
      {
        path: 'license',
        element: <CorporateLicensePage />,
      },
    ],
  },
  {
    path: '/user-profile',
    element: <PageWrapper children={<UserAccountLayout />} />,
    errorElement: <ErrorPage />,
    children: [
      {
        index: true,
        path: 'details',
        element: <UserProfileDetailsPage />,
      },
      {
        path: 'preferences',
        element: <UserProfilePreferencesPage />,
      },
      {
        path: 'information',
        element: <UserProfileInformationPage />,
      },
      {
        path: 'security',
        element: <UserProfileSecurityPage />,
      },
      {
        path: 'activity',
        element: <UserProfileActivityPage />,
      },
      {
        path: 'actions',
        element: <UserProfileActionsPage />,
      },
      {
        path: 'help',
        element: <UserProfileHelpPage />,
      },
      {
        path: 'feedback',
        element: <UserProfileFeedbackPage />,
      },
    ],
  },
  {
    path: '/auth',
    errorElement: <ErrorPage />,
    children: [
      {
        path: 'signup',
        element: <SignUpPage />,
      },
      {
        path: 'signin',
        element: <SignInPage />,
      },
      {
        path: 'welcome',
        element: <WelcomePage />,
      },
      {
        path: 'verify-email',
        element: <VerifyEmailPage />,
      },
      {
        path: 'password-reset',
        element: <PasswordResetPage />,
      },
      {
        path: 'account-delete',
        element: <AccountDeactivePage />,
      },
    ],
  },
  {
    path: '/edit', // Add route for edit event page
    element: <PageWrapper children={<DashboardLayout />} />,
    errorElement: <ErrorPage />,
    children: [
      {
        path: 'events/:id',
        element: <EditEventPage />, // Use EditEventPage component
      },
    ],
  },
  {
    path: 'errors',
    errorElement: <ErrorPage />,
    children: [
      {
        path: '400',
        element: <Error400Page />,
      },
      {
        path: '403',
        element: <Error403Page />,
      },
      {
        path: '404',
        element: <Error404Page />,
      },
      {
        path: '500',
        element: <Error500Page />,
      },
      {
        path: '503',
        element: <Error503Page />,
      },
    ],
  },
  {
    path: '/about',
    element: <PageWrapper children={<DashboardLayout />} />,
    errorElement: <ErrorPage />,
    children: [
      {
        index: true,
        path: '',
        element: <AboutPage />,
      },
    ],
  },
]);

export default router;

src\services\authService.ts:
// src\services\authService.ts
import axios from 'axios';

const API_BASE_URL = 'http://localhost:8080/api/v1/auth';
const API_EVENT_BASE_URL = 'http://localhost:8080/api/v1/events';
const API_CATEGORY_BASE_URL = 'http://localhost:8080/api/v1/categories'; // Define category base URL


const authService = {
  login: async (credentials: any) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/login`, credentials);
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },

  register: async (userData: any) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/register`, userData);
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  googleLogin: async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/google/login`);
      const data = response.data as { url: string };
      console.log(data.url);
      return window.location.href = data.url;

    } catch (error: any) {
      throw error.response.data
    }
  },
  createEvent: async (eventData: any, accessToken: string) => {
    try {
      const response = await axios.post(
        `${API_EVENT_BASE_URL}`,
        eventData,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  logout: async (accessToken: string) => {
    try {
      const response = await axios.post(
        `${API_BASE_URL}/logout`,
        {},
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  getCategories: async (accessToken: string) => { // Function to fetch categories
    try {
      const response = await axios.get(`${API_CATEGORY_BASE_URL}`, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  createCategory: async (categoryData: any, accessToken: string) => { // Function to create a new category
    try {
      const response = await axios.post(
        `${API_CATEGORY_BASE_URL}`,
        categoryData,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  getEventDetails: async (eventId: string | undefined, accessToken?: string) => { // Function to fetch event details - accessToken is optional now
    try {
      const headers: any = { // Define headers as any to avoid type issues
        'Content-Type': 'application/json',
      };
      if (accessToken) {
        headers['Authorization'] = `Bearer ${accessToken}`;
      }
      const response = await axios.get(`${API_EVENT_BASE_URL}/${eventId}`, { // Pass headers in axios.get config
        headers,
      });
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  registerEvent: async (eventId: string, sessionIds: string[], accessToken: string) => { // Function to register for event
    try {
      const response = await axios.post(
        `http://localhost:8080/api/v1/participants`, // Correct endpoint for participant registration
        { eventId, sessionIds },
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  deleteEvent: async (eventId: string, accessToken: string) => { // Function to delete event
    try {
      const response = await axios.delete(
        `${API_EVENT_BASE_URL}/${eventId}`,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  updateEvent: async (eventId: string, eventData: any, accessToken: string) => { // Function to update event
    try {
      const response = await axios.patch(
        `${API_EVENT_BASE_URL}/${eventId}`,
        eventData,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  getOrganizedEvents: async (status?: string, accessToken?: string) => { // Function to fetch organized events, status is optional
    try {
      const headers: any = {
        'Content-Type': 'application/json',
      };
      if (accessToken) {
        headers['Authorization'] = `Bearer ${accessToken}`;
      }
      let url = `${API_EVENT_BASE_URL}/organized-events`;
      if (status) {
        url += `?status=${status}`; // Append status query parameter if provided
      }
      const response = await axios.get(url, { headers });
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  uploadEventFiles: async (eventId: string, field: string, formData: FormData, accessToken: string) => { // Function to upload event files
    try {
      const response = await axios.post(
        `${API_EVENT_BASE_URL}/${eventId}/files`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data', // Quan trọng: set Content-Type
            'Authorization': `Bearer ${accessToken}`,
            'field': field // Truyền field vào header
          },
        }
      );
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  getEventParticipants: async (eventId: string | undefined, accessToken?: string) => { // Function to fetch event participants
    try {
      const headers: any = {
        'Content-Type': 'application/json',
      };
      if (accessToken) {
        headers['Authorization'] = `Bearer ${accessToken}`;
      }
      const response = await axios.get(`${API_EVENT_BASE_URL}/${eventId}/participants`, { headers }); // Call API to get participants
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
  getParticipatedEvents: async (status?: string, accessToken?: string) => { // Function to fetch participated events
    try {
      const headers: any = {
        'Content-Type': 'application/json',
      };
      if (accessToken) {
        headers['Authorization'] = `Bearer ${accessToken}`;
      }
      let url = `${API_EVENT_BASE_URL}/participated-events`; // Correct API endpoint
      if (status && status !== 'all') { // Only add status param if status is not 'all'
        url += `?status=${status}`;
      }
      const response = await axios.get(url, { headers });
      return response.data;
    } catch (error: any) {
      throw error.response.data;
    }
  },
};

export default authService;

