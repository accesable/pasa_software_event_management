// src\App.tsx:
// src/App.tsx
import { RouterProvider } from 'react-router-dom';
import { ConfigProvider, theme as antdTheme } from 'antd';

import { HelmetProvider } from 'react-helmet-async';
import { StylesContext } from './context';
import routes from './routes/routes.tsx';
import { useSelector } from 'react-redux';
import { RootState } from './redux/store.ts';
import './App.css';
import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { setUser } from './redux/userSlice.tsx';
import axiosInstance from './api/axiosInstance'; // Import axiosInstance

// color palettes: triadic #A1A7CB, #CBA1A7, #A7CBA1
// 10 color objects of primary #2378c3 as generated by https://smart-swatch.netlify.app/#2378c3
// This is for reference purposes

const COLOR = {
  50: '#e0f1ff',
  100: '#b0d2ff',
  200: '#7fb0ff',
  300: '#4d8bff',
  400: '#1e79fe',
  500: '#076ee5',
  600: '#0062b3',
  700: '#004f81',
  800: '#003650',
  900: '#001620',
  borderColor: '#E7EAF3B2',
};

function App() {
  const { mytheme } = useSelector((state: RootState) => state.theme);
  const dispatch = useDispatch();
  useEffect(() => {
    const accessToken = localStorage.getItem('accessToken');

    if (accessToken) {
    // Lấy thông tin người dùng từ local storage hoặc API
    try {
      const storedUser = JSON.parse(localStorage.getItem('user') || '{}');
        dispatch(setUser(storedUser))
      // Lấy thông tin người dùng từ API
     // TODO, you have to call an api to fill out and assign to state if u wanna load user info right here

     // Example API call to get user info (you might need to adjust the endpoint)
    //  const fetchUserInfo = async () => {
    //     try {
    //         const response = await axiosInstance.get('/auth/me'); // Replace '/auth/me' with your actual endpoint
    //         dispatch(setUser(response.data.data.user)); // Assuming the API returns user data in response.data.user
    //     } catch (error) {
    //         console.error('Failed to fetch user info on init', error);
    //         localStorage.removeItem('user'); // Optionally remove user from local storage if fetch fails
    //     }
    // };
    // fetchUserInfo();


    } catch (error) {
        localStorage.removeItem('user');
      console.error('fail load user when init from localstorage')
    }

    //  dispatch(setUser({ //hard assign
    //     avatar: "https://lh3.googleusercontent.com/a/ACg8ocIj_YgS0xOp0b681eI7Gz9GfMMPQW-_jQ7s-zP888l=s96-c",
    //     name : "Name example",
    //     email : 'sampleEmail@domain',
    //     id : '123'
    //   }))
    }
    else {
      localStorage.removeItem('user');
    }
  }, []);

  return (
    <HelmetProvider>
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: COLOR['500'],
            borderRadius: 6,
            fontFamily: 'Lato, sans-serif',
          },
          components: {
            Breadcrumb: {
              // linkColor: 'rgba(0,0,0,.8)',
              // itemColor: 'rgba(0,0,0,.8)',
            },
            Button: {
              colorLink: COLOR['500'],
              colorLinkActive: COLOR['700'],
              colorLinkHover: COLOR['300'],
            },
            Calendar: {
              colorBgContainer: 'none',
            },
            Card: {
              colorBorderSecondary: COLOR['borderColor'],
            },
            Carousel: {
              colorBgContainer: COLOR['800'],
              dotWidth: 8,
            },
            Rate: {
              colorFillContent: COLOR['100'],
              colorText: COLOR['600'],
            },
            Segmented: {
              colorBgLayout: COLOR['100'],
              borderRadius: 6,
              colorTextLabel: '#000000',
            },
            Table: {
              borderColor: COLOR['100'],
              colorBgContainer: 'none',
              headerBg: 'none',
              rowHoverBg: COLOR['50'],
            },
            Tabs: {
              colorBorderSecondary: COLOR['100'],
            },
            Timeline: {
              dotBg: 'none',
            },
            Typography: {
              colorLink: COLOR['500'],
              colorLinkActive: COLOR['700'],
              colorLinkHover: COLOR['300'],
              linkHoverDecoration: 'underline',
            },
          },
          algorithm:
            mytheme === 'dark'
              ? antdTheme.darkAlgorithm
              : antdTheme.defaultAlgorithm,
        }}
      >
        <StylesContext.Provider
          value={{
            rowProps: {
              gutter: [
                { xs: 8, sm: 16, md: 24, lg: 32 },
                { xs: 8, sm: 16, md: 24, lg: 32 },
              ],
            },
            carouselProps: {
              autoplay: true,
              dots: true,
              dotPosition: 'bottom',
              infinite: true,
              slidesToShow: 3,
              slidesToScroll: 1,
            },
          }}
        >
          <RouterProvider router={routes} />
        </StylesContext.Provider>
      </ConfigProvider>
    </HelmetProvider>
  );
}

export default App;
export {COLOR}