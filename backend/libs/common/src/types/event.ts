// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.20.3
// source: proto/event.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "event";

export interface Empty {
}

export interface GetRegisteredParticipantsResponse {
  participants: RegisteredParticipant[];
  meta: Meta | undefined;
}

export interface RegisteredParticipant {
  eventId: string;
  id: string;
  email: string;
  name: string;
  phoneNumber?: string | undefined;
  status: string;
  sessionIds: string[];
  participantId: string;
  createdAt: string;
}

export interface ParticipantsWithFacesResponse {
  participants: ParticipantWithFaces[];
}

export interface ParticipantWithFaces {
  participantId: string;
  userId: string;
  email: string;
  name: string;
  faceImages: string[];
}

export interface GetEventFeedbacksRequest {
  eventId: string;
  query: QueryParamsRequest | undefined;
}

export interface EventComparisonData {
  eventId: string;
  eventName: string;
  categoryName: string;
  startDate: string;
  endDate: string;
  location: string;
  registrationCount: number;
  averageRating: number;
  feedbackCount: number;
  status: string;
}

export interface GetEventComparisonDataResponse {
  eventComparisonDataList: EventComparisonData[];
}

export interface GetEventInvitedUsersResponse {
  invitedUsers: InvitedUser[];
}

export interface GetTotalOrganizedEventsOverTimeRequest {
  userId: string;
}

export interface MonthlyEventCountsResponse {
  monthlyOrganizedEvents: MonthlyEventCount[];
  monthlyParticipatedEvents: MonthlyEventCount[];
}

export interface MonthlyEventCount {
  /** "YYYY-MM" format */
  month: string;
  count: number;
}

export interface EventRegistrationsOverTimeResponse {
  registrationCounts: RegistrationCountData[];
}

export interface RegistrationCountData {
  /** Ngày đăng ký (YYYY-MM-DD) */
  date: string;
  /** Số lượng đăng ký trong ngày */
  registrations: number;
}

export interface GetFeedbackByUserResponse {
  feedback: Feedback | undefined;
}

export interface GetFeedbackByUserRequest {
  eventId: string;
  userId: string;
}

export interface CreateQuestionRequest {
  eventId: string;
  userId: string;
  text: string;
}

export interface CreateQuestionResponse {
  question: Question | undefined;
}

export interface AnswerQuestionRequest {
  questionId: string;
  userId: string;
  text: string;
}

export interface AnswerQuestionResponse {
  question: Question | undefined;
}

export interface GetEventQuestionsResponse {
  questions: Question[];
}

export interface Question {
  id: string;
  eventId: string;
  userId: string;
  text: string;
  answers: Answer[];
  createdAt: string;
  updatedAt: string;
}

export interface Answer {
  userId: string;
  text: string;
  createdAt: string;
}

export interface SubmitFeedbackRequest {
  eventId: string;
  userId: string;
  rating: number;
  comment: string;
}

export interface SubmitFeedbackResponse {
  message: string;
}

export interface GetEventFeedbacksResponse {
  feedbacks: Feedback[];
}

export interface Feedback {
  id: string;
  eventId: string;
  userId: string;
  rating: number;
  comment: string;
  createdAt: string;
  updatedAt: string;
}

export interface FeedbackAnalysisResponse {
  eventId: string;
  averageRating: number;
  totalFeedbacks: number;
  ratingDistribution: { [key: string]: number };
}

export interface FeedbackAnalysisResponse_RatingDistributionEntry {
  key: string;
  value: number;
}

export interface UpdateGuestRequest {
  id: string;
  name?: string | undefined;
  jobTitle?: string | undefined;
  organization?: string | undefined;
  linkSocial?: string | undefined;
  avatar?: string | undefined;
  userId: string;
}

export interface UpdateSpeakerRequest {
  id: string;
  name?: string | undefined;
  email?: string | undefined;
  avatar?: string | undefined;
  phone?: string | undefined;
  jobTitle?: string | undefined;
  bio?: string | undefined;
  linkFb?: string | undefined;
  userId: string;
}

export interface GetAllRequest {
  userId: string;
}

export interface AcceptInvitationRequest {
  eventId: string;
  token: string;
}

export interface AcceptInvitationResponse {
  message: string;
}

export interface DeclineInvitationRequest {
  eventId: string;
  token: string;
}

export interface DeclineInvitationResponse {
  message: string;
}

export interface getParticipatedEventsRequest {
  userId: string;
  status?: string | undefined;
}

export interface getOrganizedEventsRequest {
  userId: string;
  status?: string | undefined;
}

export interface IsExistEventResponse {
  isExist: boolean;
}

export interface SendEventInvitesRequest {
  event: EventResponse | undefined;
  users: UserTypeInvite[];
}

export interface UserTypeInvite {
  email: string;
  id: string;
}

export interface SendEventInvitesResponse {
  message: string;
  success: boolean;
}

export interface UpdateEventVideoIntroRequest {
  id: string;
  videoUrl: string;
}

export interface CheckOwnerShipRequest {
  eventId: string;
  userId: string;
}

export interface CheckOwnerShipResponse {
  isOwner: boolean;
}

export interface UpdateEventFilesRequest {
  id: string;
  field: string;
  fileIds: string[];
  videoUrl: string;
  deletedFiles: string[];
}

export interface UpdateEventDocumentRequest {
  id: string;
  index: number;
  document: string;
  userId: string;
}

export interface UpdateEventDocumentResponse {
  message: string;
  event: EventType | undefined;
}

export interface CancelEventRequest {
  id: string;
  userId: string;
}

export interface CancelEventResponse {
  message: string;
}

export interface GuestResponse {
  guest: Guest | undefined;
}

export interface AllGuestResponse {
  guests: Guest[];
  meta: Meta | undefined;
}

export interface CreateGuestRequest {
  name: string;
  jobTitle: string;
  organization?: string | undefined;
  linkSocial?: string | undefined;
  avatar?: string | undefined;
  userId: string;
}

export interface CreateSpeakerRequest {
  name: string;
  email: string;
  avatar?: string | undefined;
  phone?: string | undefined;
  jobTitle: string;
  bio?: string | undefined;
  linkFb?: string | undefined;
  userId: string;
}

export interface SpeakerResponse {
  speaker: Speaker | undefined;
}

export interface AllSpeakerResponse {
  speakers: Speaker[];
  meta: Meta | undefined;
}

export interface FindByIdRequest {
  id: string;
}

export interface DecodeAccessResponse {
  id: string;
  email: string;
  name: string;
  avatar: string;
  oldAvatarId: string;
  phoneNumber: string;
  isActive: boolean;
  role: string;
  lastLoginAt: string;
  createdAt: string;
  updatedAt: string;
}

export interface Meta {
  page?: number | undefined;
  limit?: number | undefined;
  totalPages?: number | undefined;
  totalItems: number;
  count: number;
}

export interface QueryParamsRequest {
  query: { [key: string]: string };
}

export interface QueryParamsRequest_QueryEntry {
  key: string;
  value: string;
}

export interface UpdateCategoryRequest {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
}

export interface CreateCategoryRequest {
  name: string;
  description?: string | undefined;
}

export interface CategoryByIdRequest {
  id: string;
}

export interface EventByIdRequest {
  id: string;
}

export interface AllCategoryResponse {
  categories: Category[];
  meta: Meta | undefined;
}

export interface EventResponse {
  event: EventType | undefined;
}

export interface AllEventResponse {
  events: EventType[];
  meta: Meta | undefined;
}

export interface CategoryResponse {
  category: Category | undefined;
}

export interface Category {
  id: string;
  name: string;
  description: string;
}

export interface CreateEventRequest {
  name: string;
  description: string;
  startDate: string;
  endDate: string;
  location: string;
  guestIds: string[];
  categoryId: string;
  maxParticipants: number;
  banner?: string | undefined;
  videoIntro?: string | undefined;
  documents: string[];
  createdBy: CreatedBy | undefined;
  sponsors: SponsorType[];
  budget?: BudgetType | undefined;
  schedule: ScheduleWithoutId[];
}

export interface UpdateEventRequest {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  location?: string | undefined;
  guestIds: string[];
  categoryId?: string | undefined;
  maxParticipants?: number | undefined;
  banner?: string | undefined;
  videoIntro?: string | undefined;
  documents: string[];
  status?: string | undefined;
  sponsors: SponsorType[];
  budget?: BudgetType | undefined;
  schedule: ScheduleWithoutId[];
  invitedUsers: InvitedUser[];
}

export interface EventType {
  id: string;
  name: string;
  description: string;
  startDate: string;
  endDate: string;
  location: string;
  schedule: ScheduleType[];
  guestIds: string[];
  categoryId: string;
  maxParticipants: number;
  banner?: string | undefined;
  videoIntro?: string | undefined;
  documents: string[];
  status: string;
  createdAt: string;
  updatedAt: string;
  createdBy: CreatedBy | undefined;
  sponsors: SponsorType[];
  budget?: BudgetType | undefined;
  invitedUsers: InvitedUser[];
}

export interface InvitedUser {
  userId: string;
  email: string;
  status?: string | undefined;
}

export interface Speaker {
  id: string;
  name: string;
  bio: string;
  linkFb: string;
  avatar: string;
  email: string;
  phone?: string | undefined;
  jobTitle: string;
  createdAt: string;
  updatedAt: string;
}

export interface Guest {
  id: string;
  name: string;
  jobTitle: string;
  organization?: string | undefined;
  linkSocial?: string | undefined;
  avatar: string;
  createdAt: string;
  updatedAt: string;
}

export interface SponsorType {
  name: string;
  logo: string;
  website: string;
  contribution: number;
}

export interface ExpenseOrRevenueType {
  desc: string;
  amount: number;
  date: string;
}

export interface BudgetType {
  totalBudget: number;
  expenses: ExpenseOrRevenueType[];
  revenue: ExpenseOrRevenueType[];
}

export interface ScheduleWithoutId {
  title: string;
  startTime: string;
  endTime: string;
  description: string;
  speakerIds: string[];
}

export interface ScheduleType {
  id: string;
  title: string;
  startTime: string;
  endTime: string;
  description: string;
  speakerIds: string[];
}

export interface CreatedBy {
  id: string;
  email: string;
}

export const EVENT_PACKAGE_NAME = "event";

export interface EventServiceClient {
  getAllEvent(request: QueryParamsRequest): Observable<AllEventResponse>;

  getEventById(request: EventByIdRequest): Observable<EventResponse>;

  getCategoryById(request: CategoryByIdRequest): Observable<CategoryResponse>;

  getAllCategory(request: Empty): Observable<AllCategoryResponse>;

  createEvent(request: CreateEventRequest): Observable<EventResponse>;

  createCategory(request: CreateCategoryRequest): Observable<CategoryResponse>;

  updateEvent(request: UpdateEventRequest): Observable<EventResponse>;

  updateCategory(request: UpdateCategoryRequest): Observable<CategoryResponse>;

  updateSpeaker(request: UpdateSpeakerRequest): Observable<SpeakerResponse>;

  updateGuest(request: UpdateGuestRequest): Observable<GuestResponse>;

  createSpeaker(request: CreateSpeakerRequest): Observable<SpeakerResponse>;

  getAllSpeaker(request: GetAllRequest): Observable<AllSpeakerResponse>;

  getAllGuest(request: GetAllRequest): Observable<AllGuestResponse>;

  getSpeakerById(request: FindByIdRequest): Observable<SpeakerResponse>;

  getGuestById(request: FindByIdRequest): Observable<GuestResponse>;

  createGuest(request: CreateGuestRequest): Observable<GuestResponse>;

  cancelEvent(request: CancelEventRequest): Observable<CancelEventResponse>;

  /** rpc UpdateEventDocument (UpdateEventDocumentRequest) returns (UpdateEventDocumentResponse); */

  checkOwnerShip(request: CheckOwnerShipRequest): Observable<CheckOwnerShipResponse>;

  /** rpc UpdateEventVideoIntro(UpdateEventVideoIntroRequest) returns (EventResponse); */

  sendEventInvites(request: SendEventInvitesRequest): Observable<SendEventInvitesResponse>;

  acceptInvitation(request: AcceptInvitationRequest): Observable<AcceptInvitationResponse>;

  declineInvitation(request: DeclineInvitationRequest): Observable<DeclineInvitationResponse>;

  isExistEvent(request: EventByIdRequest): Observable<IsExistEventResponse>;

  getOrganizedEvents(request: getOrganizedEventsRequest): Observable<AllEventResponse>;

  getParticipatedEvents(request: getParticipatedEventsRequest): Observable<AllEventResponse>;

  createQuestion(request: CreateQuestionRequest): Observable<CreateQuestionResponse>;

  answerQuestion(request: AnswerQuestionRequest): Observable<AnswerQuestionResponse>;

  getEventQuestions(request: EventByIdRequest): Observable<GetEventQuestionsResponse>;

  submitFeedback(request: SubmitFeedbackRequest): Observable<GetFeedbackByUserResponse>;

  getFeedbackAnalysis(request: EventByIdRequest): Observable<FeedbackAnalysisResponse>;

  updateFeedback(request: SubmitFeedbackRequest): Observable<GetFeedbackByUserResponse>;

  getFeedbackByUser(request: GetFeedbackByUserRequest): Observable<GetFeedbackByUserResponse>;

  getEventRegistrationsOverTime(request: EventByIdRequest): Observable<EventRegistrationsOverTimeResponse>;

  getTotalEventsOverTime(request: GetTotalOrganizedEventsOverTimeRequest): Observable<MonthlyEventCountsResponse>;

  getEventInvitedUsers(request: EventByIdRequest): Observable<GetEventInvitedUsersResponse>;

  getEventComparisonData(request: Empty): Observable<GetEventComparisonDataResponse>;

  getEventFeedbacks(request: GetEventFeedbacksRequest): Observable<GetEventFeedbacksResponse>;

  getParticipantsWithFaces(request: EventByIdRequest): Observable<ParticipantsWithFacesResponse>;

  getRegisteredParticipants(request: EventByIdRequest): Observable<GetRegisteredParticipantsResponse>;
}

export interface EventServiceController {
  getAllEvent(request: QueryParamsRequest): Promise<AllEventResponse> | Observable<AllEventResponse> | AllEventResponse;

  getEventById(request: EventByIdRequest): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  getCategoryById(
    request: CategoryByIdRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  getAllCategory(request: Empty): Promise<AllCategoryResponse> | Observable<AllCategoryResponse> | AllCategoryResponse;

  createEvent(request: CreateEventRequest): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  createCategory(
    request: CreateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  updateEvent(request: UpdateEventRequest): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  updateCategory(
    request: UpdateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  updateSpeaker(
    request: UpdateSpeakerRequest,
  ): Promise<SpeakerResponse> | Observable<SpeakerResponse> | SpeakerResponse;

  updateGuest(request: UpdateGuestRequest): Promise<GuestResponse> | Observable<GuestResponse> | GuestResponse;

  createSpeaker(
    request: CreateSpeakerRequest,
  ): Promise<SpeakerResponse> | Observable<SpeakerResponse> | SpeakerResponse;

  getAllSpeaker(
    request: GetAllRequest,
  ): Promise<AllSpeakerResponse> | Observable<AllSpeakerResponse> | AllSpeakerResponse;

  getAllGuest(request: GetAllRequest): Promise<AllGuestResponse> | Observable<AllGuestResponse> | AllGuestResponse;

  getSpeakerById(request: FindByIdRequest): Promise<SpeakerResponse> | Observable<SpeakerResponse> | SpeakerResponse;

  getGuestById(request: FindByIdRequest): Promise<GuestResponse> | Observable<GuestResponse> | GuestResponse;

  createGuest(request: CreateGuestRequest): Promise<GuestResponse> | Observable<GuestResponse> | GuestResponse;

  cancelEvent(
    request: CancelEventRequest,
  ): Promise<CancelEventResponse> | Observable<CancelEventResponse> | CancelEventResponse;

  /** rpc UpdateEventDocument (UpdateEventDocumentRequest) returns (UpdateEventDocumentResponse); */

  checkOwnerShip(
    request: CheckOwnerShipRequest,
  ): Promise<CheckOwnerShipResponse> | Observable<CheckOwnerShipResponse> | CheckOwnerShipResponse;

  /** rpc UpdateEventVideoIntro(UpdateEventVideoIntroRequest) returns (EventResponse); */

  sendEventInvites(
    request: SendEventInvitesRequest,
  ): Promise<SendEventInvitesResponse> | Observable<SendEventInvitesResponse> | SendEventInvitesResponse;

  acceptInvitation(
    request: AcceptInvitationRequest,
  ): Promise<AcceptInvitationResponse> | Observable<AcceptInvitationResponse> | AcceptInvitationResponse;

  declineInvitation(
    request: DeclineInvitationRequest,
  ): Promise<DeclineInvitationResponse> | Observable<DeclineInvitationResponse> | DeclineInvitationResponse;

  isExistEvent(
    request: EventByIdRequest,
  ): Promise<IsExistEventResponse> | Observable<IsExistEventResponse> | IsExistEventResponse;

  getOrganizedEvents(
    request: getOrganizedEventsRequest,
  ): Promise<AllEventResponse> | Observable<AllEventResponse> | AllEventResponse;

  getParticipatedEvents(
    request: getParticipatedEventsRequest,
  ): Promise<AllEventResponse> | Observable<AllEventResponse> | AllEventResponse;

  createQuestion(
    request: CreateQuestionRequest,
  ): Promise<CreateQuestionResponse> | Observable<CreateQuestionResponse> | CreateQuestionResponse;

  answerQuestion(
    request: AnswerQuestionRequest,
  ): Promise<AnswerQuestionResponse> | Observable<AnswerQuestionResponse> | AnswerQuestionResponse;

  getEventQuestions(
    request: EventByIdRequest,
  ): Promise<GetEventQuestionsResponse> | Observable<GetEventQuestionsResponse> | GetEventQuestionsResponse;

  submitFeedback(
    request: SubmitFeedbackRequest,
  ): Promise<GetFeedbackByUserResponse> | Observable<GetFeedbackByUserResponse> | GetFeedbackByUserResponse;

  getFeedbackAnalysis(
    request: EventByIdRequest,
  ): Promise<FeedbackAnalysisResponse> | Observable<FeedbackAnalysisResponse> | FeedbackAnalysisResponse;

  updateFeedback(
    request: SubmitFeedbackRequest,
  ): Promise<GetFeedbackByUserResponse> | Observable<GetFeedbackByUserResponse> | GetFeedbackByUserResponse;

  getFeedbackByUser(
    request: GetFeedbackByUserRequest,
  ): Promise<GetFeedbackByUserResponse> | Observable<GetFeedbackByUserResponse> | GetFeedbackByUserResponse;

  getEventRegistrationsOverTime(
    request: EventByIdRequest,
  ):
    | Promise<EventRegistrationsOverTimeResponse>
    | Observable<EventRegistrationsOverTimeResponse>
    | EventRegistrationsOverTimeResponse;

  getTotalEventsOverTime(
    request: GetTotalOrganizedEventsOverTimeRequest,
  ): Promise<MonthlyEventCountsResponse> | Observable<MonthlyEventCountsResponse> | MonthlyEventCountsResponse;

  getEventInvitedUsers(
    request: EventByIdRequest,
  ): Promise<GetEventInvitedUsersResponse> | Observable<GetEventInvitedUsersResponse> | GetEventInvitedUsersResponse;

  getEventComparisonData(
    request: Empty,
  ):
    | Promise<GetEventComparisonDataResponse>
    | Observable<GetEventComparisonDataResponse>
    | GetEventComparisonDataResponse;

  getEventFeedbacks(
    request: GetEventFeedbacksRequest,
  ): Promise<GetEventFeedbacksResponse> | Observable<GetEventFeedbacksResponse> | GetEventFeedbacksResponse;

  getParticipantsWithFaces(
    request: EventByIdRequest,
  ): Promise<ParticipantsWithFacesResponse> | Observable<ParticipantsWithFacesResponse> | ParticipantsWithFacesResponse;

  getRegisteredParticipants(
    request: EventByIdRequest,
  ):
    | Promise<GetRegisteredParticipantsResponse>
    | Observable<GetRegisteredParticipantsResponse>
    | GetRegisteredParticipantsResponse;
}

export function EventServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getAllEvent",
      "getEventById",
      "getCategoryById",
      "getAllCategory",
      "createEvent",
      "createCategory",
      "updateEvent",
      "updateCategory",
      "updateSpeaker",
      "updateGuest",
      "createSpeaker",
      "getAllSpeaker",
      "getAllGuest",
      "getSpeakerById",
      "getGuestById",
      "createGuest",
      "cancelEvent",
      "checkOwnerShip",
      "sendEventInvites",
      "acceptInvitation",
      "declineInvitation",
      "isExistEvent",
      "getOrganizedEvents",
      "getParticipatedEvents",
      "createQuestion",
      "answerQuestion",
      "getEventQuestions",
      "submitFeedback",
      "getFeedbackAnalysis",
      "updateFeedback",
      "getFeedbackByUser",
      "getEventRegistrationsOverTime",
      "getTotalEventsOverTime",
      "getEventInvitedUsers",
      "getEventComparisonData",
      "getEventFeedbacks",
      "getParticipantsWithFaces",
      "getRegisteredParticipants",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EVENT_SERVICE_NAME = "EventService";
