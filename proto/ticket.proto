syntax = "proto3";

package ticket;

service TicketServiceProto{
    rpc GetAllTicket(QueryParamsRequest) returns (AllTicketResponse);
    rpc GetTicketById(TicketByIdRequest) returns (TicketResponse);
    rpc UpdateTicket(UpdateTicketRequest) returns (TicketResponse);
    rpc DeleteTicket(TicketByIdRequest) returns (TicketResponse);
    rpc CheckIn(TicketByIdRequest) returns (TicketResponse);
    rpc CancelTicket(TicketByIdRequest) returns (TicketResponse);
    rpc ScanTicket(ScanTicketRequest) returns (ScanTicketResponse);

    rpc CreateParticipant(CreateParticipationRequest) returns (ParticipationResponse);
    rpc GetParticipantByEventId(GetParticipantByEventIdRequest) returns (GetParticipantByEventIdResponse);
    rpc GetParticipantById(ParticipationByIdRequest) returns (ParticipationResponse);
    rpc UpdateParticipant(CreateParticipationRequest) returns (ParticipationResponse);
    rpc DeleteParticipant(ParticipationByIdRequest) returns (Empty);
}

message Empty{}

message GetParticipantByEventIdRequest{
  string eventId = 1;
}

message GetParticipantByEventIdResponse{
  repeated DataResultCheckInOut participants = 1;
}

message ScanTicketResponse{
  DataResultCheckInOut result = 1;
}

message DataResultCheckInOut{
  string eventId = 7;
  string id = 1;
  string email = 2;
  string name = 3;
  optional string phoneNumber = 4;
  string checkInAt = 5;
  optional string checkOutAt = 6;
}

message ScanTicketRequest{
  string code = 1;
}

message ParticipationByIdRequest{
  string id = 1;
}

message QueryParamsRequest{
  map<string, string> query = 1;
}

message CreateParticipationRequest{
  string eventId = 1;
  string userId = 2;
  repeated string sessionIds = 3;
}

message ParticipationResponse{
  Participation participation = 1;
  TicketType ticket = 2;
}

message Participation{
  string id = 1;
  string eventId = 2;
  string userId = 3;
  repeated string sessionIds = 4;
  string status = 5;
  string createdAt = 6;
  string updatedAt = 7;
  optional string checkedInAt = 8;
  optional string checkedOutAt = 9;
}

message TicketResponse{
  TicketType ticket = 1;
}

message AllTicketResponse{
  repeated TicketType tickets = 1;
  Meta meta = 2;
}

message TicketByIdRequest{
  string id = 1;
}

message UpdateTicketRequest{
  string id = 1;
  optional string status = 2;
  optional string usedAt = 3;
}

message TicketType {
  string id = 1;
  string participantId = 2;
  string qrCodeUrl = 3;
  string status = 4;
  optional string usedAt = 5;
}

message Meta{
  optional int32 page = 1;
  optional int32 limit = 2;
  optional int32 totalPages = 3;
  int32 totalItems = 4;
  int32 count = 5;
}