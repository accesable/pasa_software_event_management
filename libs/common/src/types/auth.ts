// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.2
//   protoc               v3.20.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface Empty {
}

export interface GoogleAuthRequest {
  name: string;
  email: string;
  picture: string;
  accessToken: string;
}

export interface AccessTokenRequest {
  refreshToken: string;
}

export interface GeneralResponse {
  user: UserResponse | undefined;
  accessToken: string;
  refreshToken: string;
}

export interface LogoutRequest {
  accessToken: string;
}

export interface LogoutResponse {
  email: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  name: string;
  email: string;
  password: string;
}

export interface RegisterResponse {
  user: UserResponse | undefined;
}

export interface UserResponse {
  id: string;
  email: string;
  name: string;
  avatar: string;
  phoneNumber: string;
  isActive: boolean;
  role: string;
  lastLoginAt: string;
  createdAt: string;
  updatedAt: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface UsersServiceClient {
  login(request: LoginRequest): Observable<GeneralResponse>;

  register(request: RegisterRequest): Observable<RegisterResponse>;

  accessToken(request: AccessTokenRequest): Observable<GeneralResponse>;

  handleLogout(request: LogoutRequest): Observable<LogoutResponse>;

  handleGoogleAuth(request: GoogleAuthRequest): Observable<GeneralResponse>;
}

export interface UsersServiceController {
  login(request: LoginRequest): Promise<GeneralResponse> | Observable<GeneralResponse> | GeneralResponse;

  register(request: RegisterRequest): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

  accessToken(request: AccessTokenRequest): Promise<GeneralResponse> | Observable<GeneralResponse> | GeneralResponse;

  handleLogout(request: LogoutRequest): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  handleGoogleAuth(
    request: GoogleAuthRequest,
  ): Promise<GeneralResponse> | Observable<GeneralResponse> | GeneralResponse;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["login", "register", "accessToken", "handleLogout", "handleGoogleAuth"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
