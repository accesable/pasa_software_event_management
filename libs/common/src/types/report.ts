// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.20.3
// source: proto/report.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "report";

export interface UserEventsByDateRequest {
  userId: string;
  year: number;
  month?: number | undefined;
}

export interface MonthlyEventCountsResponse {
  monthlyOrganizedEvents: MonthlyEventCount[];
  monthlyParticipatedEvents: MonthlyEventCount[];
}

export interface MonthlyEventCount {
  month: number;
  count: number;
}

export interface EventInfo {
  id: string;
  name: string;
  description: string;
  startDate: string;
  endDate: string;
  location: string;
  status: string;
  categoryId: string;
}

export interface Empty {
}

export interface EventCategoryDistributionResponse {
  categoryDistribution: CategoryDistribution[];
  totalEvents: number;
}

export interface CategoryDistribution {
  type: string;
  value: number;
}

export interface OrganizerEventFeedbackSummaryRequest {
  userId: string;
}

export interface OrganizerEventFeedbackSummaryResponse {
  averageRating: number;
  ratingDistribution: { [key: string]: number };
  totalFeedbacks: number;
}

export interface OrganizerEventFeedbackSummaryResponse_RatingDistributionEntry {
  key: string;
  value: number;
}

export interface EventInvitationReportRequest {
  eventId: string;
}

export interface EventInvitationReportResponse {
  eventId: string;
  invitedUsers: InvitedUserStatus[];
  invitationSummary: InvitationSummary | undefined;
}

export interface InvitedUserStatus {
  email: string;
  status: string;
}

export interface InvitationSummary {
  accepted: number;
  pending: number;
  declined: number;
  totalInvited: number;
}

export const REPORT_PACKAGE_NAME = "report";

export interface ReportServiceProtoClient {
  getEventCategoryDistribution(request: Empty): Observable<EventCategoryDistributionResponse>;

  /** Thay đổi response type */

  getUserEventsByDate(request: UserEventsByDateRequest): Observable<MonthlyEventCountsResponse>;

  getOrganizerEventFeedbackSummary(
    request: OrganizerEventFeedbackSummaryRequest,
  ): Observable<OrganizerEventFeedbackSummaryResponse>;

  getEventInvitationReport(request: EventInvitationReportRequest): Observable<EventInvitationReportResponse>;
}

export interface ReportServiceProtoController {
  getEventCategoryDistribution(
    request: Empty,
  ):
    | Promise<EventCategoryDistributionResponse>
    | Observable<EventCategoryDistributionResponse>
    | EventCategoryDistributionResponse;

  /** Thay đổi response type */

  getUserEventsByDate(
    request: UserEventsByDateRequest,
  ): Promise<MonthlyEventCountsResponse> | Observable<MonthlyEventCountsResponse> | MonthlyEventCountsResponse;

  getOrganizerEventFeedbackSummary(
    request: OrganizerEventFeedbackSummaryRequest,
  ):
    | Promise<OrganizerEventFeedbackSummaryResponse>
    | Observable<OrganizerEventFeedbackSummaryResponse>
    | OrganizerEventFeedbackSummaryResponse;

  getEventInvitationReport(
    request: EventInvitationReportRequest,
  ): Promise<EventInvitationReportResponse> | Observable<EventInvitationReportResponse> | EventInvitationReportResponse;
}

export function ReportServiceProtoControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getEventCategoryDistribution",
      "getUserEventsByDate",
      "getOrganizerEventFeedbackSummary",
      "getEventInvitationReport",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ReportServiceProto", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ReportServiceProto", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REPORT_SERVICE_PROTO_SERVICE_NAME = "ReportServiceProto";
