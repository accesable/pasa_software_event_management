// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.20.3
// source: proto/report.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "report";

export interface UserEventsByDateRequest {
  userId: string;
  year: number;
  month?: number | undefined;
}

export interface UserEventsByDateResponse {
  organizedEvents: EventInfo[];
  participatedEvents: EventInfo[];
}

/** Message tái sử dụng, hoặc tạo mới nếu cần thiết */
export interface EventInfo {
  id: string;
  name: string;
  description: string;
  startDate: string;
  endDate: string;
  location: string;
  status: string;
  /** ... các trường thông tin sự kiện cần thiết khác ... */
  categoryId: string;
}

export interface Empty {
}

export interface EventCategoryDistributionResponse {
  categoryDistribution: CategoryDistribution[];
  totalEvents: number;
}

export interface CategoryDistribution {
  type: string;
  value: number;
}

export interface EventRequest {
  eventId: string;
}

/** 1) Đếm participant: registeredCount, checkInCount, checkOutCount */
export interface EventParticipationStatsResponse {
  eventId: string;
  registeredCount: number;
  checkInCount: number;
  checkOutCount: number;
}

/** 2) Timeline checkin/checkout */
export interface ParticipationTimelineResponse {
  timeline: TimelinePoint[];
}

export interface TimelinePoint {
  /** "00:00 - 00:59" */
  timeSlot: string;
  checkInCount: number;
  checkOutCount: number;
}

/** 3) Thống kê theo tháng */
export interface MonthlyStatsRequest {
  year: number;
}

export interface MonthlyParticipationStatsResponse {
  monthlyStats: MonthlyParticipationStat[];
}

export interface MonthlyParticipationStat {
  month: number;
  participantCount: number;
}

/** 4) Phân tích thời gian checkin, checkout trung bình (phút) */
export interface CheckInOutTimeAnalysisResponse {
  averageCheckInTimeInMinutes: number;
  averageCheckOutTimeInMinutes: number;
}

/** 5) Tỷ lệ checkIn / checkOut (phần trăm) */
export interface ParticipationRateResponse {
  checkInRate: number;
  checkOutRate: number;
}

export const REPORT_PACKAGE_NAME = "report";

/** Service report đơn giản, chỉ 5 hàm */

export interface ReportServiceProtoClient {
  /** 1) Thống kê số người đã đăng ký, checkin, checkout */

  getEventParticipationStats(request: EventRequest): Observable<EventParticipationStatsResponse>;

  /** 2) Lấy timeline checkin/checkout theo khung giờ */

  getParticipationTimeline(request: EventRequest): Observable<ParticipationTimelineResponse>;

  /** 3) Thống kê số lượt tham gia trong từng tháng (cho 1 năm) */

  getMonthlyParticipationStats(request: MonthlyStatsRequest): Observable<MonthlyParticipationStatsResponse>;

  /** 4) Phân tích thời điểm checkin/checkout trung bình */

  getCheckInOutTimeAnalysis(request: EventRequest): Observable<CheckInOutTimeAnalysisResponse>;

  /** 5) Tỷ lệ checkin/checkout (theo %) so với tổng */

  getParticipationRate(request: EventRequest): Observable<ParticipationRateResponse>;

  getEventCategoryDistribution(request: Empty): Observable<EventCategoryDistributionResponse>;

  getUserEventsByDate(request: UserEventsByDateRequest): Observable<UserEventsByDateResponse>;
}

/** Service report đơn giản, chỉ 5 hàm */

export interface ReportServiceProtoController {
  /** 1) Thống kê số người đã đăng ký, checkin, checkout */

  getEventParticipationStats(
    request: EventRequest,
  ):
    | Promise<EventParticipationStatsResponse>
    | Observable<EventParticipationStatsResponse>
    | EventParticipationStatsResponse;

  /** 2) Lấy timeline checkin/checkout theo khung giờ */

  getParticipationTimeline(
    request: EventRequest,
  ): Promise<ParticipationTimelineResponse> | Observable<ParticipationTimelineResponse> | ParticipationTimelineResponse;

  /** 3) Thống kê số lượt tham gia trong từng tháng (cho 1 năm) */

  getMonthlyParticipationStats(
    request: MonthlyStatsRequest,
  ):
    | Promise<MonthlyParticipationStatsResponse>
    | Observable<MonthlyParticipationStatsResponse>
    | MonthlyParticipationStatsResponse;

  /** 4) Phân tích thời điểm checkin/checkout trung bình */

  getCheckInOutTimeAnalysis(
    request: EventRequest,
  ):
    | Promise<CheckInOutTimeAnalysisResponse>
    | Observable<CheckInOutTimeAnalysisResponse>
    | CheckInOutTimeAnalysisResponse;

  /** 5) Tỷ lệ checkin/checkout (theo %) so với tổng */

  getParticipationRate(
    request: EventRequest,
  ): Promise<ParticipationRateResponse> | Observable<ParticipationRateResponse> | ParticipationRateResponse;

  getEventCategoryDistribution(
    request: Empty,
  ):
    | Promise<EventCategoryDistributionResponse>
    | Observable<EventCategoryDistributionResponse>
    | EventCategoryDistributionResponse;

  getUserEventsByDate(
    request: UserEventsByDateRequest,
  ): Promise<UserEventsByDateResponse> | Observable<UserEventsByDateResponse> | UserEventsByDateResponse;
}

export function ReportServiceProtoControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getEventParticipationStats",
      "getParticipationTimeline",
      "getMonthlyParticipationStats",
      "getCheckInOutTimeAnalysis",
      "getParticipationRate",
      "getEventCategoryDistribution",
      "getUserEventsByDate",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ReportServiceProto", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ReportServiceProto", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REPORT_SERVICE_PROTO_SERVICE_NAME = "ReportServiceProto";
