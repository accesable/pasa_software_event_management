// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.20.3
// source: proto/notification.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "notification";

export interface ForgotPasswordRequest {
  id: string;
  email: string;
  name: string;
}

export interface ForgotPasswordResponse {
  status: string;
  message: string;
  token?: string | undefined;
  tokenData?: TokenData | undefined;
}

export interface TokenData {
  id: string;
  email: string;
  name: string;
  used: boolean;
  type: string;
  expiredAt: number;
  createdAt: number;
}

export const NOTIFICATION_PACKAGE_NAME = "notification";

export interface NotificationServiceProtoClient {
  forgotPassword(request: ForgotPasswordRequest): Observable<ForgotPasswordResponse>;
}

export interface NotificationServiceProtoController {
  forgotPassword(
    request: ForgotPasswordRequest,
  ): Promise<ForgotPasswordResponse> | Observable<ForgotPasswordResponse> | ForgotPasswordResponse;
}

export function NotificationServiceProtoControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["forgotPassword"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationServiceProto", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationServiceProto", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATION_SERVICE_PROTO_SERVICE_NAME = "NotificationServiceProto";
