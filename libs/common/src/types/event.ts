// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.1
//   protoc               v3.20.3
// source: proto/event.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "event";

export interface Empty {
}

export interface CreateSpeakerRequest {
  name: string;
  email: string;
  avatar?: string | undefined;
  phone?: string | undefined;
  jobTitle: string;
  bio?: string | undefined;
  linkFb?: string | undefined;
}

export interface SpeakerResponse {
  speaker: Speaker | undefined;
}

export interface AllSpeakerResponse {
  speakers: Speaker[];
  meta: Meta | undefined;
}

export interface FindByIdRequest {
  id: string;
}

export interface DecodeAccessResponse {
  id: string;
  email: string;
  name: string;
  avatar: string;
  oldAvatarId: string;
  phoneNumber: string;
  isActive: boolean;
  role: string;
  lastLoginAt: string;
  createdAt: string;
  updatedAt: string;
}

export interface Meta {
  page?: number | undefined;
  limit?: number | undefined;
  totalPages?: number | undefined;
  totalItems: number;
  count: number;
}

export interface QueryParamsRequest {
  query: { [key: string]: string };
}

export interface QueryParamsRequest_QueryEntry {
  key: string;
  value: string;
}

export interface UpdateCategoryRequest {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
}

export interface CategoryNameRequest {
  name: string;
}

export interface CreateCategoryRequest {
  name: string;
  description?: string | undefined;
}

export interface CategoryByIdRequest {
  id: string;
}

export interface EventByIdRequest {
  id: string;
}

export interface AllCategoryResponse {
  categories: Category[];
  meta: Meta | undefined;
}

export interface EventResponse {
  event: EventType | undefined;
}

export interface AllEventResponse {
  events: EventType[];
  meta: Meta | undefined;
}

export interface CategoryResponse {
  category: Category | undefined;
}

export interface Category {
  id: string;
  name: string;
  description: string;
}

export interface CreateEventRequest {
  name: string;
  description: string;
  startDate: string;
  endDate: string;
  location: string;
  /** Đổi từ guest thành guestIds */
  guestIds: string[];
  categoryId: string;
  isFree: boolean;
  price: number;
  maxParticipants: number;
  banner: string;
  videoIntro: string;
  documents: string[];
  createdBy: string;
}

export interface UpdateEventRequest {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  location?:
    | string
    | undefined;
  /** Đổi từ guest thành guestIds */
  guestIds: string[];
  categoryId?: string | undefined;
  isFree?: boolean | undefined;
  price?: number | undefined;
  maxParticipants?: number | undefined;
  banner?: string | undefined;
  videoIntro?: string | undefined;
  documents: string[];
  status?: string | undefined;
}

export interface EventType {
  id: string;
  name: string;
  description: string;
  startDate: string;
  endDate: string;
  location: string;
  schedule: ScheduleType[];
  guestIds: string[];
  categoryId: string;
  isFree: boolean;
  price: number;
  maxParticipants: number;
  banner: string;
  videoIntro: string;
  documents: string[];
  status: string;
  createdAt: string;
  updatedAt: string;
  createdBy: string;
}

export interface ScheduleType {
  title: string;
  startTime: string;
  endTime: string;
  description: string;
  speakerIds: string[];
}

export interface Speaker {
  id: string;
  name: string;
  bio: string;
  linkFb: string;
  avatar: string;
  email: string;
  phone?: string | undefined;
  jobTitle: string;
  createdAt: string;
  updatedAt: string;
}

export const EVENT_PACKAGE_NAME = "event";

export interface EventServiceClient {
  getAllEvent(request: QueryParamsRequest): Observable<AllEventResponse>;

  getEventById(request: EventByIdRequest): Observable<EventResponse>;

  getAllEventByCategoryName(request: CategoryNameRequest): Observable<AllEventResponse>;

  getCategoryById(request: CategoryByIdRequest): Observable<CategoryResponse>;

  getAllCategory(request: Empty): Observable<AllCategoryResponse>;

  createEvent(request: CreateEventRequest): Observable<EventResponse>;

  createCategory(request: CreateCategoryRequest): Observable<CategoryResponse>;

  updateEvent(request: UpdateEventRequest): Observable<EventResponse>;

  updateCategory(request: UpdateCategoryRequest): Observable<CategoryResponse>;

  createSpeaker(request: CreateSpeakerRequest): Observable<SpeakerResponse>;

  getAllSpeaker(request: Empty): Observable<AllSpeakerResponse>;
}

export interface EventServiceController {
  getAllEvent(request: QueryParamsRequest): Promise<AllEventResponse> | Observable<AllEventResponse> | AllEventResponse;

  getEventById(request: EventByIdRequest): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  getAllEventByCategoryName(
    request: CategoryNameRequest,
  ): Promise<AllEventResponse> | Observable<AllEventResponse> | AllEventResponse;

  getCategoryById(
    request: CategoryByIdRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  getAllCategory(request: Empty): Promise<AllCategoryResponse> | Observable<AllCategoryResponse> | AllCategoryResponse;

  createEvent(request: CreateEventRequest): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  createCategory(
    request: CreateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  updateEvent(request: UpdateEventRequest): Promise<EventResponse> | Observable<EventResponse> | EventResponse;

  updateCategory(
    request: UpdateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  createSpeaker(
    request: CreateSpeakerRequest,
  ): Promise<SpeakerResponse> | Observable<SpeakerResponse> | SpeakerResponse;

  getAllSpeaker(request: Empty): Promise<AllSpeakerResponse> | Observable<AllSpeakerResponse> | AllSpeakerResponse;
}

export function EventServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getAllEvent",
      "getEventById",
      "getAllEventByCategoryName",
      "getCategoryById",
      "getAllCategory",
      "createEvent",
      "createCategory",
      "updateEvent",
      "updateCategory",
      "createSpeaker",
      "getAllSpeaker",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EVENT_SERVICE_NAME = "EventService";
